{
    "contracts": {
        "CustomToken": {
            "abi": [
                {
                  "inputs": [
                    {
                      "internalType": "uint256",
                      "name": "initial_supply",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "decimal_units",
                      "type": "uint8"
                    },
                    {
                      "internalType": "string",
                      "name": "token_name",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "token_symbol",
                      "type": "string"
                    }
                  ],
                  "stateMutability": "nonpayable",
                  "type": "constructor"
                },
                {
                  "anonymous": false,
                  "inputs": [
                    {
                      "indexed": true,
                      "internalType": "address",
                      "name": "_owner",
                      "type": "address"
                    },
                    {
                      "indexed": true,
                      "internalType": "address",
                      "name": "_spender",
                      "type": "address"
                    },
                    {
                      "indexed": false,
                      "internalType": "uint256",
                      "name": "_value",
                      "type": "uint256"
                    }
                  ],
                  "name": "Approval",
                  "type": "event"
                },
                {
                  "anonymous": false,
                  "inputs": [
                    {
                      "indexed": true,
                      "internalType": "address",
                      "name": "_to",
                      "type": "address"
                    },
                    {
                      "indexed": true,
                      "internalType": "uint256",
                      "name": "_num",
                      "type": "uint256"
                    }
                  ],
                  "name": "Minted",
                  "type": "event"
                },
                {
                  "anonymous": false,
                  "inputs": [
                    {
                      "indexed": true,
                      "internalType": "address",
                      "name": "_from",
                      "type": "address"
                    },
                    {
                      "indexed": true,
                      "internalType": "address",
                      "name": "_to",
                      "type": "address"
                    },
                    {
                      "indexed": false,
                      "internalType": "uint256",
                      "name": "_value",
                      "type": "uint256"
                    }
                  ],
                  "name": "Transfer",
                  "type": "event"
                },
                {
                  "inputs": [],
                  "name": "_decimals",
                  "outputs": [
                    {
                      "internalType": "uint8",
                      "name": "",
                      "type": "uint8"
                    }
                  ],
                  "stateMutability": "view",
                  "type": "function"
                },
                {
                  "inputs": [
                    {
                      "internalType": "address",
                      "name": "_owner",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "_spender",
                      "type": "address"
                    }
                  ],
                  "name": "allowance",
                  "outputs": [
                    {
                      "internalType": "uint256",
                      "name": "remaining",
                      "type": "uint256"
                    }
                  ],
                  "stateMutability": "view",
                  "type": "function"
                },
                {
                  "inputs": [
                    {
                      "internalType": "address",
                      "name": "_spender",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "_value",
                      "type": "uint256"
                    }
                  ],
                  "name": "approve",
                  "outputs": [
                    {
                      "internalType": "bool",
                      "name": "success",
                      "type": "bool"
                    }
                  ],
                  "stateMutability": "nonpayable",
                  "type": "function"
                },
                {
                  "inputs": [
                    {
                      "internalType": "address",
                      "name": "_owner",
                      "type": "address"
                    }
                  ],
                  "name": "balanceOf",
                  "outputs": [
                    {
                      "internalType": "uint256",
                      "name": "balance",
                      "type": "uint256"
                    }
                  ],
                  "stateMutability": "view",
                  "type": "function"
                },
                {
                  "inputs": [
                    {
                      "internalType": "address",
                      "name": "",
                      "type": "address"
                    }
                  ],
                  "name": "balances",
                  "outputs": [
                    {
                      "internalType": "uint256",
                      "name": "",
                      "type": "uint256"
                    }
                  ],
                  "stateMutability": "view",
                  "type": "function"
                },
                {
                  "inputs": [],
                  "name": "decimals",
                  "outputs": [
                    {
                      "internalType": "uint8",
                      "name": "decimals",
                      "type": "uint8"
                    }
                  ],
                  "stateMutability": "view",
                  "type": "function"
                },
                {
                  "inputs": [
                    {
                      "internalType": "uint256",
                      "name": "num",
                      "type": "uint256"
                    }
                  ],
                  "name": "mint",
                  "outputs": [],
                  "stateMutability": "nonpayable",
                  "type": "function"
                },
                {
                  "inputs": [
                    {
                      "internalType": "uint256",
                      "name": "num",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "target",
                      "type": "address"
                    }
                  ],
                  "name": "mintFor",
                  "outputs": [],
                  "stateMutability": "nonpayable",
                  "type": "function"
                },
                {
                  "inputs": [],
                  "name": "multiplier",
                  "outputs": [
                    {
                      "internalType": "uint256",
                      "name": "",
                      "type": "uint256"
                    }
                  ],
                  "stateMutability": "view",
                  "type": "function"
                },
                {
                  "inputs": [],
                  "name": "name",
                  "outputs": [
                    {
                      "internalType": "string",
                      "name": "",
                      "type": "string"
                    }
                  ],
                  "stateMutability": "view",
                  "type": "function"
                },
                {
                  "inputs": [],
                  "name": "owner_address",
                  "outputs": [
                    {
                      "internalType": "address payable",
                      "name": "",
                      "type": "address"
                    }
                  ],
                  "stateMutability": "view",
                  "type": "function"
                },
                {
                  "inputs": [],
                  "name": "symbol",
                  "outputs": [
                    {
                      "internalType": "string",
                      "name": "",
                      "type": "string"
                    }
                  ],
                  "stateMutability": "view",
                  "type": "function"
                },
                {
                  "inputs": [],
                  "name": "totalSupply",
                  "outputs": [
                    {
                      "internalType": "uint256",
                      "name": "supply",
                      "type": "uint256"
                    }
                  ],
                  "stateMutability": "view",
                  "type": "function"
                },
                {
                  "inputs": [
                    {
                      "internalType": "address",
                      "name": "_to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "_value",
                      "type": "uint256"
                    }
                  ],
                  "name": "transfer",
                  "outputs": [
                    {
                      "internalType": "bool",
                      "name": "success",
                      "type": "bool"
                    }
                  ],
                  "stateMutability": "nonpayable",
                  "type": "function"
                },
                {
                  "inputs": [
                    {
                      "internalType": "address",
                      "name": "_from",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "_to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "_value",
                      "type": "uint256"
                    }
                  ],
                  "name": "transferFrom",
                  "outputs": [
                    {
                      "internalType": "bool",
                      "name": "success",
                      "type": "bool"
                    }
                  ],
                  "stateMutability": "nonpayable",
                  "type": "function"
                },
                {
                  "inputs": [],
                  "name": "version",
                  "outputs": [
                    {
                      "internalType": "string",
                      "name": "",
                      "type": "string"
                    }
                  ],
                  "stateMutability": "view",
                  "type": "function"
                }
              ],
              "bin":"",
              "bin-runtime":"608060405234801561001957600080610016610b78565b50505b50600436106100d95760003560e01c806306fdde03146100e7578063095ea7b31461016657806318160ddd146101af5780631b3ed722146101c957806323b872dd146101d157806327e235e314610210578063313ce5671461023f57806332424aa31461025d57806354fd4d501461026557806370a082311461026d57806380edef8e1461029c57806395d89b41146102c0578063a0712d68146102c8578063a9059cbb146102f0578063ad62f1ca14610325578063dd62ed3e1461035a575b6000806100e4610b78565b50505b6100ef610391565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012b578082015183820152602001610113565b50505050905090810190601f1680156101585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61019b6004803603604081101561018557600080610182610b78565b50505b506001600160a01b03813516906020013561044a565b604051901515815260200160405180910390f35b6101b76104f9565b60405190815260200160405180910390f35b6101b7610509565b61019b600480360360608110156101f0576000806101ed610b78565b50505b506001600160a01b03813581169160208101359091169060400135610516565b6101b76004803603602081101561022f5760008061022c610b78565b50505b50356001600160a01b0316610766565b61024761077e565b60405160ff909116815260200160405180910390f35b61024761079a565b6100ef6107b3565b6101b76004803603602081101561028c57600080610289610b78565b50505b50356001600160a01b0316610855565b6102a4610875565b6040516001600160a01b03909116815260200160405180910390f35b6100ef610894565b6102ee600480360360208110156102e7576000806102e4610b78565b50505b5035610936565b005b61019b6004803603604081101561030f5760008061030c610b78565b50505b506001600160a01b03813516906020013561094b565b6102ee6004803603604081101561034457600080610341610b78565b50505b50803590602001356001600160a01b0316610a65565b6101b76004803603604081101561037957600080610376610b78565b50505b506001600160a01b0381358116916020013516610b3f565b60048061039c610be3565b600181600116156101000203166002900480601f0160208091040260200160405190810160405281815291906020830182806103d6610be3565b600181600116156101000203166002900480156104425780601f10610410576101008083610402610be3565b040283529160200191610442565b820191906000526020600020905b81610427610be3565b8152906001019060200180831161041e57829003601f168201915b505050505081565b600081600260005a61045a610c43565b6001600160a01b03166001600160a01b031681526020019081526020016000206001600160a01b038516600090815260209190915260409020819061049d610c89565b505050826001600160a01b03165a6104b3610c43565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405190815260200160405180910390a35060015b92915050565b600080610504610be3565b905090565b6007610513610be3565b81565b6001600160a01b038316600090815260016020528160408220610537610be3565b101561054b57600080610548610b78565b50505b6001600160a01b0384166000908152600260205282906040902060005a610570610c43565b6001600160a01b03166001600160a01b03168152602001908152602001600020610598610be3565b10156105ac576000806105a9610b78565b50505b600082116105c2576000806105bf610b78565b50505b6001600160a01b038416600090815260016020528290604090206105e4610be3565b1015801561063d57506001600160a01b0384166000908152600260205282906040902060005a610612610c43565b6001600160a01b03166001600160a01b0316815260200190815260200160002061063a610be3565b10155b80156106495750600082115b1561075b576001600160a01b0383166000908152600160205282906040902060008282610674610be3565b019250508190610682610c89565b5050506001600160a01b03841660009081526001602052829060409020600082826106ab610be3565b0392505081906106b9610c89565b5050506001600160a01b0384166000908152600260205282906040902060005a6106e1610c43565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828261070d610be3565b03925050819061071b610c89565b505050826001600160a01b0316846001600160a01b0316600080516020610cd88339815191528460405190815260200160405180910390a350600161075f565b5060005b9392505050565b60016020528060005260406000209050610513610be3565b600080600661078b610be3565b906101000a900460ff16905090565b600060066107a6610be3565b906101000a900460ff1681565b6003806107be610be3565b600181600116156101000203166002900480601f0160208091040260200160405190810160405281815291906020830182806107f8610be3565b600181600116156101000203166002900480156104425780601f10610824576101008083610402610be3565b820191906000526020600020905b8161083b610be3565b815290600101906020018083116108325750859350505050565b6001600160a01b03811660009081526001602052604081206104f3610be3565b60006008610881610be3565b906101000a90046001600160a01b031681565b60058061089f610be3565b600181600116156101000203166002900480601f0160208091040260200160405190810160405281815291906020830182806108d9610be3565b600181600116156101000203166002900480156104425780601f10610905576101008083610402610be3565b820191906000526020600020905b8161091c610be3565b815290600101906020018083116109135750859350505050565b610948815a610943610c43565b610a65565b50565b600081600160005a61095b610c43565b6001600160a01b03166001600160a01b03168152602001908152602001600020610983610be3565b101580156109915750600082115b15610a5d5781600160005a6109a4610c43565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082826109d0610be3565b0392505081906109de610c89565b5050506001600160a01b0383166000908152600160205282906040902060008282610a07610be3565b019250508190610a15610c89565b505050826001600160a01b03165a610a2b610c43565b6001600160a01b0316600080516020610cd88339815191528460405190815260200160405180910390a35060016104f3565b5060006104f3565b6001600160a01b0381166000908152600160205282906040902060008282610a8b610be3565b019250508190610a99610c89565b505050816000808282610aaa610be3565b019250508190610ab8610c89565b50505081816001600160a01b03167f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe60405160405180910390a36001600160a01b03811660009081526001602052829060409020610b14610be3565b1015610b2857600080610b25610b78565b50505b816000610b33610be3565b1015610b3b57fe5b5050565b6001600160a01b03821660009081526002602052604081206001600160a01b03831660009081526020919091526040902061075f610be3565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015610bb0578086015182820160400152602001610b95565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015610c3e57600082820152602001610c27565b505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020610c27565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020610c2756feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
              "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initial_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimal_units\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"token_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"mintFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner_address\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"_owner\":\"The address of the account owning tokens\",\"_spender\":\"The address of the account able to transfer the tokens\"},\"returns\":{\"remaining\":\"Amount of remaining tokens allowed to spent\"}},\"approve(address,uint256)\":{\"params\":{\"_spender\":\"The address of the account able to transfer the tokens\",\"_value\":\"The amount of wei to be approved for transfer\"},\"returns\":{\"success\":\"Whether the approval was successful or not\"}},\"balanceOf(address)\":{\"params\":{\"_owner\":\"The address from which the balance will be retrieved\"},\"returns\":{\"balance\":\"The balance\"}},\"constructor\":{\"details\":\"Contract constructor function.\",\"params\":{\"decimal_units\":\"Number of token decimals\",\"initial_supply\":\"Initial supply of tokens\",\"token_name\":\"Token name for display\",\"token_symbol\":\"Token symbol\"}},\"totalSupply()\":{\"returns\":{\"supply\":\"total amount of tokens\"}},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"The address of the recipient\",\"_value\":\"The amount of token to be transferred\"},\"returns\":{\"success\":\"Whether the transfer was successful or not\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"_from\":\"The address of the sender\",\"_to\":\"The address of the recipient\",\"_value\":\"The amount of token to be transferred\"},\"returns\":{\"success\":\"Whether the transfer was successful or not\"}}},\"title\":\"CustomToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"`msg.sender` approves `_spender` to spend `_value` tokens\"},\"decimals()\":{\"notice\":\"Transfers the collected ETH to the contract owner.OVM does not support the use of address(this).balance due to a lack of native ETH, WETH should be used instead.\"},\"mint(uint256)\":{\"notice\":\"Allows `num` tokens to be minted and assigned to `msg.sender`\"},\"mintFor(uint256,address)\":{\"notice\":\"Allows `num` tokens to be minted and assigned to `target`\"},\"transfer(address,uint256)\":{\"notice\":\"send `_value` token to `_to` from `msg.sender`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/test/CustomToken.sol\":\"CustomToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/raiden/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface Token {\\n\\n    /// @return supply total amount of tokens\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return balance The balance\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return success Whether the approval was successful or not\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return remaining Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    // Optionally implemented function to show the number of decimals for the token\\n    function decimals() external view returns (uint8 decimals);\\n}\\n\",\"keccak256\":\"0x5a8ccb9fa426228d9e213164f22a94b0ac57f1aa15ab76ce88a96177edd7b0b3\",\"license\":\"MIT\"},\"data/source/test/CustomToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\n/*\\nThis Token Contract implements the standard token functionality (https://github.com/ethereum/EIPs/issues/20), the ERC223 functionality (https://github.com/ethereum/EIPs/issues/223) as well as the following OPTIONAL extras intended for use by humans.\\nIn other words. This is intended for deployment in something like a Token Factory or Mist wallet, and then used by humans.\\nImagine coins, currencies, shares, voting weight, etc.\\nMachine-based, rapid creation of many tokens would not necessarily need these extra features or will be minted in other manners.\\n1) Initial Finite Supply (upon creation one specifies how much is minted).\\n2) In the absence of a token registry: Optional Decimal, Symbol & Name.\\n.*/\\n\\nimport \\\"./StandardToken.sol\\\";\\n\\n/// @title CustomToken\\ncontract CustomToken is StandardToken {\\n\\n    /*\\n     *  Token metadata\\n     */\\n    string public version = \\\"H0.1\\\";       //human 0.1 standard. Just an arbitrary versioning scheme.\\n    string public name;\\n    string public symbol;\\n    uint8 public _decimals;\\n    uint256 public multiplier;\\n\\n    address payable public owner_address;\\n\\n    /*\\n     * Events\\n     */\\n    event Minted(address indexed _to, uint256 indexed _num);\\n\\n    /*\\n     *  Public functions\\n     */\\n    /// @dev Contract constructor function.\\n    /// @param initial_supply Initial supply of tokens\\n    /// @param decimal_units Number of token decimals\\n    /// @param token_name Token name for display\\n    /// @param token_symbol Token symbol\\n    constructor(\\n        uint256 initial_supply,\\n        uint8 decimal_units,\\n        string memory token_name,\\n        string memory token_symbol\\n    ) {\\n        // Set the name for display purposes\\n        name = token_name;\\n\\n        // Amount of decimals for display purposes\\n        _decimals = decimal_units;\\n        multiplier = 10**(uint256(decimal_units));\\n\\n        // Set the symbol for display purposes\\n        symbol = token_symbol;\\n\\n        // Initial supply is assigned to the owner\\n        owner_address = msg.sender;\\n        balances[owner_address] = initial_supply;\\n        _total_supply = initial_supply;\\n    }\\n\\n    /// @notice Allows `num` tokens to be minted and assigned to `msg.sender`\\n    function mint(uint256 num) public {\\n        mintFor(num, msg.sender);\\n    }\\n\\n    /// @notice Allows `num` tokens to be minted and assigned to `target`\\n    function mintFor(uint256 num, address target) public {\\n        balances[target] += num;\\n        _total_supply += num;\\n\\n        emit Minted(target, num);\\n\\n        require(balances[target] >= num);\\n        assert(_total_supply >= num);\\n    }\\n\\n    /// @notice Transfers the collected ETH to the contract owner.\\n    /// @notice OVM does not support the use of address(this).balance due to\\n    /// a lack of native ETH, WETH should be used instead.\\n    /*function transferFunds() public {\\n        require(msg.sender == owner_address);\\n        require(address(this).balance > 0);\\n\\n        owner_address.transfer(address(this).balance);\\n        assert(address(this).balance == 0);\\n    }*/\\n\\n    function decimals() public override view returns (uint8 decimals) {\\n        return _decimals;\\n    }\\n}\",\"keccak256\":\"0x4d4c091c4eba4a8cfd10f1d1d6c42642ccff27c325e4c963f83ec2aa17eeb5c2\",\"license\":\"MIT\"},\"data/source/test/StandardToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable */\\npragma solidity 0.7.6;\\n\\nimport \\\"../raiden/Token.sol\\\";\\n\\n/*\\nThis implements ONLY the standard functions and NOTHING else.\\nFor a token like you would want to deploy in something like Mist, see HumanStandardToken.sol.\\nIf you deploy this, you won't have anything useful.\\nImplements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\\n.*/\\n\\ncontract StandardToken is Token {\\n    uint256 internal _total_supply;\\n    mapping (address => uint256) public balances;\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    function transfer(address _to, uint256 _value)\\n        public override\\n        returns (bool success)\\n    {\\n        //Default assumes totalSupply can't be over max (2^256 - 1).\\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\\n        //Replace the if with this one instead.\\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\\n        if (balances[msg.sender] >= _value && _value > 0) {\\n            balances[msg.sender] -= _value;\\n            balances[_to] += _value;\\n            emit Transfer(msg.sender, _to, _value);\\n            return true;\\n        } else { return false; }\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public override\\n        returns (bool success)\\n    {\\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\\n        require(balances[_from] >= _value);\\n        require(allowed[_from][msg.sender] >= _value);\\n        require(_value > 0);\\n        if ((balances[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (_value > 0)) {\\n            balances[_to] += _value;\\n            balances[_from] -= _value;\\n            allowed[_from][msg.sender] -= _value;\\n            emit Transfer(_from, _to, _value);\\n            return true;\\n        } else { return false; }\\n    }\\n\\n    function balanceOf(address _owner) public override view returns (uint256 balance) {\\n        return balances[_owner];\\n    }\\n\\n    function approve(address _spender, uint256 _value) public override returns (bool success) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) public override view returns (uint256 remaining) {\\n      return allowed[_owner][_spender];\\n    }\\n\\n    function totalSupply() public override view returns (uint256 supply) {\\n        return _total_supply;\\n    }\\n\\n    function decimals() public virtual override view returns (uint8 decimals) {\\n        return 18;\\n    }\\n}\",\"keccak256\":\"0xb9425f7bd3805c65f0a06c7cc10aa0db59f9f2bcd44fc4ef4db8b473fbb5f2d4\",\"license\":\"MIT\"}},\"version\":1}"
        },
        "Deposti": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "contract Token",
                  "name": "_token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_release_at",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_withdrawer",
                  "type": "address"
                },
                {
                  "internalType": "contract ServiceRegistryConfigurableParameters",
                  "name": "_service_registry",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "release_at",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "token",
              "outputs": [
                {
                  "internalType": "contract Token",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address payable",
                  "name": "_to",
                  "type": "address"
                }
              ],
              "name": "withdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "withdrawer",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "bin": "608060405234801561001957600080610016610123565b50505b50604051610b0e380380610b0e8339818101604052608081101561004557600080610042610123565b50505b81019080805192919060200180519291906020018051929190602001805192508591506000905060018161007761018e565b816001600160a01b0302191690836001600160a01b03160217906100996101ee565b50505082600381906100a96101ee565b50505081600260006101000a816100be61018e565b816001600160a01b0302191690836001600160a01b03160217906100e06101ee565b50505080600160006101000a816100f561018e565b816001600160a01b0302191690836001600160a01b03160217906101176101ee565b5050505050505061023c565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561015b578086015182820160400152602001610140565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b60408110156101e9576000828201526020016101d2565b505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b6000815260206101d2565b6108c38061024b6000396000f3fe60806040523480156100195760008061001661056d565b50505b50600436106100555760003560e01c806351cff8d914610063578063a0d711c414610094578063cdc18424146100ae578063fc0c546a146100d2575b60008061006061056d565b50505b610092600480360360208110156100825760008061007f61056d565b50505b50356001600160a01b03166100da565b005b61009c610536565b60405190815260200160405180910390f35b6100b6610543565b6040516001600160a01b03909116815260200160405180910390f35b6100b6610562565b600080806100e66105d8565b906101000a90046001600160a01b03166001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b604081101561015a57600082820152602001610143565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680610197610638565b1580156101ac576000806101a961056d565b50505b505a6101b6610684565b50505050501580156101d5573d6000803e3d60006101d261056d565b50505b505050506040513d60208110156101f4576000806101f161056d565b50505b8101908080519350600092506002915061020e90506105d8565b906101000a90046001600160a01b03166001600160a01b03165a610230610771565b6001600160a01b0316146102935760405162461bcd60e51b815260206004820181905260248201527f7468652063616c6c6572206973206e6f7420746865207769746864726177657260448201526064016040518091039061029061056d565b50505b600361029d6105d8565b5a6102a66107b7565b1015806103655750600060016102ba6105d8565b906101000a90046001600160a01b03166001600160a01b0316630e136b196040518163ffffffff1660e01b815260040160206040518083038186806102fd610638565b1580156103125760008061030f61056d565b50505b505a61031c610684565b505050505015801561033b573d6000803e3d600061033861056d565b50505b505050506040513d602081101561035a5760008061035761056d565b50505b810190808051925050505b6103b95760405162461bcd60e51b815260206004820152601860248201527719195c1bdcda5d081b9bdd081c995b19585cd959081e595d60421b6044820152606401604051809103906103b661056d565b50505b6000811161040c5760405162461bcd60e51b81526020600482015260136024820152726e6f7468696e6720746f20776974686472617760681b60448201526064016040518091039061040961056d565b50505b6000806104176105d8565b906101000a90046001600160a01b03166001600160a01b031663a9059cbb83836040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038160008780610478610638565b15801561048d5760008061048a61056d565b50505b505a6104976107fd565b5050505050501580156104b7573d6000803e3d60006104b461056d565b50505b505050506040513d60208110156104d6576000806104d361056d565b50505b81019080805192506105329150505760405162461bcd60e51b81526020600482015260156024820152743a37b5b2b7103234b23713ba103a3930b739b332b960591b60448201526064016040518091039061052f61056d565b50505b5050565b60036105406105d8565b81565b6000600261054f6105d8565b906101000a90046001600160a01b031681565b60008061054f6105d8565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156105a557808601518282016040015260200161058a565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b60408110156106335760008282015260200161061c565b505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061061c565b638540661f598160e01b81526106b7565b80808311156106a15750815b92915050565b80808310156106a1575090919050565b836004820152846024820152606060448201528660648201526084810160005b888110156106ef5780880151828201526020016106d7565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af150596107448d3d6106a7565b8c016107508187610695565b5b828110156107655760008152602001610751565b50929c50505050505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061061c565b63bdbf8c36598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061061c565b6385979f76598160e01b8152836004820152846024820152606060448201528760648201526084810160005b89811015610841578089015182820152602001610829565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af150596108968e3d6106a7565b8d016108a28187610695565b5b828110156108b757600081526020016108a3565b50929d5050505050505056",
          "bin-runtime": "60806040523480156100195760008061001661056d565b50505b50600436106100555760003560e01c806351cff8d914610063578063a0d711c414610094578063cdc18424146100ae578063fc0c546a146100d2575b60008061006061056d565b50505b610092600480360360208110156100825760008061007f61056d565b50505b50356001600160a01b03166100da565b005b61009c610536565b60405190815260200160405180910390f35b6100b6610543565b6040516001600160a01b03909116815260200160405180910390f35b6100b6610562565b600080806100e66105d8565b906101000a90046001600160a01b03166001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b604081101561015a57600082820152602001610143565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680610197610638565b1580156101ac576000806101a961056d565b50505b505a6101b6610684565b50505050501580156101d5573d6000803e3d60006101d261056d565b50505b505050506040513d60208110156101f4576000806101f161056d565b50505b8101908080519350600092506002915061020e90506105d8565b906101000a90046001600160a01b03166001600160a01b03165a610230610771565b6001600160a01b0316146102935760405162461bcd60e51b815260206004820181905260248201527f7468652063616c6c6572206973206e6f7420746865207769746864726177657260448201526064016040518091039061029061056d565b50505b600361029d6105d8565b5a6102a66107b7565b1015806103655750600060016102ba6105d8565b906101000a90046001600160a01b03166001600160a01b0316630e136b196040518163ffffffff1660e01b815260040160206040518083038186806102fd610638565b1580156103125760008061030f61056d565b50505b505a61031c610684565b505050505015801561033b573d6000803e3d600061033861056d565b50505b505050506040513d602081101561035a5760008061035761056d565b50505b810190808051925050505b6103b95760405162461bcd60e51b815260206004820152601860248201527719195c1bdcda5d081b9bdd081c995b19585cd959081e595d60421b6044820152606401604051809103906103b661056d565b50505b6000811161040c5760405162461bcd60e51b81526020600482015260136024820152726e6f7468696e6720746f20776974686472617760681b60448201526064016040518091039061040961056d565b50505b6000806104176105d8565b906101000a90046001600160a01b03166001600160a01b031663a9059cbb83836040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038160008780610478610638565b15801561048d5760008061048a61056d565b50505b505a6104976107fd565b5050505050501580156104b7573d6000803e3d60006104b461056d565b50505b505050506040513d60208110156104d6576000806104d361056d565b50505b81019080805192506105329150505760405162461bcd60e51b81526020600482015260156024820152743a37b5b2b7103234b23713ba103a3930b739b332b960591b60448201526064016040518091039061052f61056d565b50505b5050565b60036105406105d8565b81565b6000600261054f6105d8565b906101000a90046001600160a01b031681565b60008061054f6105d8565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156105a557808601518282016040015260200161058a565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b60408110156106335760008282015260200161061c565b505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061061c565b638540661f598160e01b81526106b7565b80808311156106a15750815b92915050565b80808310156106a1575090919050565b836004820152846024820152606060448201528660648201526084810160005b888110156106ef5780880151828201526020016106d7565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af150596107448d3d6106a7565b8c016107508187610695565b5b828110156107655760008152602001610751565b50929c50505050505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061061c565b63bdbf8c36598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061061c565b6385979f76598160e01b8152836004820152846024820152606060448201528760648201526084810160005b89811015610841578089015182820152602001610829565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af150596108968e3d6106a7565b8d016108a28187610695565b5b828110156108b757600081526020016108a3565b50929d5050505050505056",
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_release_at\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_withdrawer\",\"type\":\"address\"},{\"internalType\":\"contract ServiceRegistryConfigurableParameters\",\"name\":\"_service_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"release_at\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_release_at\":\"The timestap after which the withdrawer can withdraw the deposit\",\"_service_registry\":\"The address of ServiceRegistry whose deprecation enables immediate withdrawals\",\"_token\":\"The address of the ERC20 token contract where the deposit is accounted\",\"_withdrawer\":\"The address that can withdraw the deposit after the release time\"}},\"withdraw(address)\":{\"params\":{\"_to\":\"The address where the withdrawn tokens should go\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"withdraw(address)\":{\"notice\":\"Withdraws the tokens that have been deposited Only `withdrawer` can call this.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/services/ServiceRegistry.sol\":\"Deposit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/raiden/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface Token {\\n\\n    /// @return supply total amount of tokens\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return balance The balance\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return success Whether the approval was successful or not\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return remaining Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    // Optionally implemented function to show the number of decimals for the token\\n    function decimals() external view returns (uint8 decimals);\\n}\\n\",\"keccak256\":\"0x5a8ccb9fa426228d9e213164f22a94b0ac57f1aa15ab76ce88a96177edd7b0b3\",\"license\":\"MIT\"},\"data/source/raiden/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @title Utils\\n/// @notice Utils contract for various helpers used by the Raiden Network smart\\n/// contracts.\\ncontract Utils {\\n    /// @notice Check if a contract exists\\n    /// @param contract_address The address to check whether a contract is\\n    /// deployed or not\\n    /// @return True if a contract exists, false otherwise\\n    function contractExists(address contract_address) public view returns (bool) {\\n        uint size;\\n\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            size := extcodesize(contract_address)\\n        }\\n\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x3fb4df9cdadd3711bffff81a451868c7a1ee8a2f3ff1a20a4343def15cb38e0f\",\"license\":\"MIT\"},\"data/source/services/ServiceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable indentation */\\n/* solium-disable security/no-block-members */\\npragma solidity 0.7.6;\\n\\nimport \\\"../raiden/Token.sol\\\";\\nimport \\\"../raiden/Utils.sol\\\";\\n\\ncontract ServiceRegistryConfigurableParameters {\\n    address public controller;\\n\\n    modifier onlyController() {\\n        require(msg.sender == controller, \\\"caller is not the controller\\\");\\n        _;\\n    }\\n\\n    // After a price is set to set_price at timestamp set_price_at,\\n    // the price decays according to decayedPrice().\\n    uint256 public set_price;\\n    uint256 public set_price_at;\\n\\n    /// The amount of time (in seconds) till the price decreases to roughly 1/e.\\n    uint256 public decay_constant = 200 days;\\n\\n    // Once the price is at min_price, it can't decay further.\\n    uint256 public min_price = 1000;\\n\\n    // Whenever a deposit comes in, the price is multiplied by numerator / denominator.\\n    uint256 public price_bump_numerator = 1;\\n    uint256 public price_bump_denominator = 1;\\n\\n    // The duration of service registration/extension in seconds\\n    uint256 public registration_duration = 180 days;\\n\\n    // If true, new deposits are no longer accepted.\\n    bool public deprecated = false;\\n\\n    function setDeprecationSwitch() public onlyController returns (bool _success) {\\n        deprecated = true;\\n        return true;\\n    }\\n\\n    function changeParameters(\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator,\\n            uint256 _decay_constant,\\n            uint256 _min_price,\\n            uint256 _registration_duration\\n    ) public onlyController returns (bool _success) {\\n        changeParametersInternal(\\n            _price_bump_numerator,\\n            _price_bump_denominator,\\n            _decay_constant,\\n            _min_price,\\n            _registration_duration\\n        );\\n        return true;\\n    }\\n\\n    function changeParametersInternal(\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator,\\n            uint256 _decay_constant,\\n            uint256 _min_price,\\n            uint256 _registration_duration\\n    ) internal {\\n        refreshPrice();\\n        setPriceBumpParameters(_price_bump_numerator, _price_bump_denominator);\\n        setMinPrice(_min_price);\\n        setDecayConstant(_decay_constant);\\n        setRegistrationDuration(_registration_duration);\\n    }\\n\\n    // Updates set_price to be currentPrice() and set_price_at to be now\\n    function refreshPrice() private {\\n        set_price = currentPrice();\\n        set_price_at = block.timestamp;\\n    }\\n\\n    function setPriceBumpParameters(\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator\\n    ) private {\\n        require(_price_bump_denominator > 0, \\\"divide by zero\\\");\\n        require(_price_bump_numerator >= _price_bump_denominator, \\\"price dump instead of bump\\\");\\n        require(_price_bump_numerator < 2 ** 40, \\\"price dump numerator is too big\\\");\\n        price_bump_numerator = _price_bump_numerator;\\n        price_bump_denominator = _price_bump_denominator;\\n    }\\n\\n    function setMinPrice(uint256 _min_price) private {\\n        // No checks.  Even allowing zero.\\n        min_price = _min_price;\\n        // No checks or modifications on set_price.\\n        // Even if set_price is smaller than min_price, currentPrice() function returns min_price.\\n    }\\n\\n    function setDecayConstant(uint256 _decay_constant) private {\\n        require(_decay_constant > 0, \\\"attempt to set zero decay constant\\\");\\n        require(_decay_constant < 2 ** 40, \\\"too big decay constant\\\");\\n        decay_constant = _decay_constant;\\n    }\\n\\n    function setRegistrationDuration(uint256 _registration_duration) private {\\n        // No checks.  Even allowing zero (when no new registrations are possible).\\n        registration_duration = _registration_duration;\\n    }\\n\\n\\n    /// @notice The amount to deposit for registration or extension\\n    /// Note: the price moves quickly depending on what other addresses do.\\n    /// The current price might change after you send a `deposit()` transaction\\n    /// before the transaction is executed.\\n    function currentPrice() public view returns (uint256) {\\n        require(block.timestamp >= set_price_at, \\\"An underflow in price computation\\\");\\n        uint256 seconds_passed = block.timestamp - set_price_at;\\n\\n        return decayedPrice(set_price, seconds_passed);\\n    }\\n\\n\\n    /// @notice Calculates the decreased price after a number of seconds\\n    /// @param _set_price The initial price\\n    /// @param _seconds_passed The number of seconds passed since the initial\\n    /// price was set\\n    function decayedPrice(uint256 _set_price, uint256 _seconds_passed) public\\n        view returns (uint256) {\\n        // We are here trying to approximate some exponential decay.\\n        // exp(- X / A) where\\n        //   X is the number of seconds since the last price change\\n        //   A is the decay constant (A = 200 days corresponds to 0.5% decrease per day)\\n\\n        // exp(- X / A) ~~ P / Q where\\n        //   P = 24 A^4\\n        //   Q = 24 A^4 + 24 A^3X + 12 A^2X^2 + 4 AX^3 + X^4\\n        // Note: swap P and Q, and then think about the Taylor expansion.\\n\\n        uint256 X = _seconds_passed;\\n\\n        if (X >= 2 ** 40) { // The computation below overflows.\\n            return min_price;\\n        }\\n\\n        uint256 A = decay_constant;\\n\\n        uint256 P = 24 * (A ** 4);\\n        uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;\\n\\n        // The multiplication below is not supposed to overflow because\\n        // _set_price should be at most 2 ** 90 and\\n        // P should be at most 24 * (2 ** 40).\\n        uint256 price = _set_price * P / Q;\\n\\n        // Not allowing a price smaller than min_price.\\n        // Once it's too low it's too low forever.\\n        if (price < min_price) {\\n            price = min_price;\\n        }\\n        return price;\\n    }\\n}\\n\\n\\ncontract Deposit {\\n    // This contract holds ERC20 tokens as deposit until a predetemined point of time.\\n\\n    // The ERC20 token contract that the deposit is about.\\n    Token public token;\\n\\n    // The address of ServiceRegistry contract that this deposit is associated with.\\n    // If the address has no code, service_registry.deprecated() call will fail.\\n    ServiceRegistryConfigurableParameters service_registry;\\n\\n    // The address that can withdraw the deposit after the release time.\\n    address public withdrawer;\\n\\n    // The timestamp after which the withdrawer can withdraw the deposit.\\n    uint256 public release_at;\\n\\n    /// @param _token The address of the ERC20 token contract where the deposit is accounted\\n    /// @param _release_at The timestap after which the withdrawer can withdraw the deposit\\n    /// @param _withdrawer The address that can withdraw the deposit after the release time\\n    /// @param _service_registry The address of ServiceRegistry whose deprecation enables immediate withdrawals\\n    constructor(\\n        Token _token,\\n        uint256 _release_at,\\n        address _withdrawer,\\n        ServiceRegistryConfigurableParameters _service_registry\\n    ) {\\n        token = _token;\\n        // Don't care even if it's in the past.\\n        release_at = _release_at;\\n        withdrawer = _withdrawer;\\n        service_registry = _service_registry;\\n    }\\n\\n    // In order to make a deposit, transfer the ERC20 token into this contract.\\n    // If you transfer a wrong kind of ERC20 token or ETH into this contract,\\n    // these tokens will be lost forever.\\n\\n    /// @notice Withdraws the tokens that have been deposited\\n    /// Only `withdrawer` can call this.\\n    /// @param _to The address where the withdrawn tokens should go\\n    function withdraw(address payable _to) external {\\n        uint256 balance = token.balanceOf(address(this));\\n        require(msg.sender == withdrawer, \\\"the caller is not the withdrawer\\\");\\n        require(block.timestamp >= release_at || service_registry.deprecated(), \\\"deposit not released yet\\\");\\n        require(balance > 0, \\\"nothing to withdraw\\\");\\n        require(token.transfer(_to, balance), \\\"token didn't transfer\\\");\\n        //selfdestruct(_to); // OVM does not support selfdestruct\\n    }\\n}\\n\\n\\ncontract ServiceRegistry is Utils, ServiceRegistryConfigurableParameters {\\n    Token public token;\\n\\n    mapping(address => uint256) public service_valid_till;\\n    mapping(address => string) public urls;  // URLs of services for HTTP access\\n\\n    // An append-only list of addresses that have ever made a deposit.\\n    // Starting from this list, all alive registrations can be figured out.\\n    address[] public ever_made_deposits;\\n\\n    // @param service The address of the registered service provider\\n    // @param valid_till The timestamp of the moment when the registration expires\\n    // @param deposit_amount The amount of deposit transferred\\n    // @param deposit The address of Deposit instance where the deposit is stored\\n    event RegisteredService(address indexed service, uint256 valid_till, uint256 deposit_amount, Deposit deposit_contract);\\n\\n    // @param _token_for_registration The address of the ERC20 token contract that services use for registration fees\\n    // @param _controller The address that can change parameters and deprecate the ServiceRegistry\\n    // @param _initial_price The amount of tokens needed initially for a slot\\n    // @param _price_bump_numerator The ratio of price bump after deposit is made (numerator)\\n    // @param _price_bump_denominator The ratio of price bump after deposit is made (denominator)\\n    // @param _decay_constant The number of seconds after which the price becomes roughly 1/e\\n    // @param _min_price The minimum amount of tokens needed for a slot\\n    // @param _registration_duration The number of seconds (roughly, barring block time & miners'\\n    // timestamp errors) of a slot gained for a successful deposit\\n    constructor(\\n            Token _token_for_registration,\\n            address _controller,\\n            uint256 _initial_price,\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator,\\n            uint256 _decay_constant,\\n            uint256 _min_price,\\n            uint256 _registration_duration\\n    ) {\\n        require(address(_token_for_registration) != address(0x0), \\\"token at address zero\\\");\\n        require(contractExists(address(_token_for_registration)), \\\"token has no code\\\");\\n        require(_initial_price >= min_price, \\\"initial price too low\\\");\\n        require(_initial_price <= 2 ** 90, \\\"intiial price too high\\\");\\n\\n        token = _token_for_registration;\\n        // Check if the contract is indeed a token contract\\n        require(token.totalSupply() > 0, \\\"total supply zero\\\");\\n        controller = _controller;\\n\\n        // Set up the price and the set price timestamp\\n        set_price = _initial_price;\\n        set_price_at = block.timestamp;\\n\\n        // Set the parameters\\n        changeParametersInternal(_price_bump_numerator, _price_bump_denominator, _decay_constant, _min_price, _registration_duration);\\n    }\\n\\n    // @notice Locks tokens and registers a service or extends the registration\\n    // @param _limit_amount The biggest amount of tokens that the caller is willing to deposit\\n    // The call fails if the current price is higher (this is always possible\\n    // when other parties have just called `deposit()`)\\n    function deposit(uint _limit_amount) public returns (bool _success) {\\n        require(! deprecated, \\\"this contract was deprecated\\\");\\n\\n        uint256 amount = currentPrice();\\n        require(_limit_amount >= amount, \\\"not enough limit\\\");\\n\\n        // Extend the service position.\\n        uint256 valid_till = service_valid_till[msg.sender];\\n        if (valid_till == 0) { // a first time joiner\\n            ever_made_deposits.push(msg.sender);\\n        }\\n        if (valid_till < block.timestamp) { // a first time joiner or an expired service.\\n            valid_till = block.timestamp;\\n        }\\n        // Check against overflow.\\n        require(valid_till < valid_till + registration_duration, \\\"overflow during extending the registration\\\");\\n        valid_till = valid_till + registration_duration;\\n        assert(valid_till > service_valid_till[msg.sender]);\\n        service_valid_till[msg.sender] = valid_till;\\n\\n        // Record the price\\n        set_price = amount * price_bump_numerator / price_bump_denominator;\\n        if (set_price > 2 ** 90) {\\n            set_price = 2 ** 90; // Preventing overflows.\\n        }\\n        set_price_at = block.timestamp;\\n\\n        // Move the deposit in a new Deposit contract.\\n        assert(block.timestamp < valid_till);\\n        Deposit depo = new Deposit(token, valid_till, msg.sender, this);\\n        require(token.transferFrom(msg.sender, address(depo), amount), \\\"Token transfer for deposit failed\\\");\\n\\n        // Fire event\\n        emit RegisteredService(msg.sender, valid_till, amount, depo);\\n\\n        return true;\\n    }\\n\\n    /// @notice Sets the URL used to access a service via HTTP\\n    /// Only a currently registered service can call this successfully\\n    /// @param new_url The new URL string to be stored\\n    function setURL(string memory new_url) public returns (bool _success) {\\n        require(hasValidRegistration(msg.sender), \\\"registration expired\\\");\\n        require(bytes(new_url).length != 0, \\\"new url is empty string\\\");\\n        urls[msg.sender] = new_url;\\n        return true;\\n    }\\n\\n    /// A getter function for seeing the length of ever_made_deposits array\\n    function everMadeDepositsLen() public view returns (uint256 _len) {\\n        return ever_made_deposits.length;\\n    }\\n\\n    function hasValidRegistration(address _address) public view returns (bool _has_registration) {\\n        return block.timestamp < service_valid_till[_address];\\n    }\\n}\\n\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\",\"keccak256\":\"0x5a967df24ca5e9bb01d0b5d550b6a420d6998831766e031686ca7bba11362bae\",\"license\":\"MIT\"}},\"version\":1}"
        },
        "ECVerify": {
          "abi": [],
          "bin": "608060405234801561001957600080610016610123565b50505b50604051610b0e380380610b0e8339818101604052608081101561004557600080610042610123565b50505b81019080805192919060200180519291906020018051929190602001805192508591506000905060018161007761018e565b816001600160a01b0302191690836001600160a01b03160217906100996101ee565b50505082600381906100a96101ee565b50505081600260006101000a816100be61018e565b816001600160a01b0302191690836001600160a01b03160217906100e06101ee565b50505080600160006101000a816100f561018e565b816001600160a01b0302191690836001600160a01b03160217906101176101ee565b5050505050505061023c565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561015b578086015182820160400152602001610140565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b60408110156101e9576000828201526020016101d2565b505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b6000815260206101d2565b6108c38061024b6000396000f3fe60806040523480156100195760008061001661056d565b50505b50600436106100555760003560e01c806351cff8d914610063578063a0d711c414610094578063cdc18424146100ae578063fc0c546a146100d2575b60008061006061056d565b50505b610092600480360360208110156100825760008061007f61056d565b50505b50356001600160a01b03166100da565b005b61009c610536565b60405190815260200160405180910390f35b6100b6610543565b6040516001600160a01b03909116815260200160405180910390f35b6100b6610562565b600080806100e66105d8565b906101000a90046001600160a01b03166001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b604081101561015a57600082820152602001610143565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680610197610638565b1580156101ac576000806101a961056d565b50505b505a6101b6610684565b50505050501580156101d5573d6000803e3d60006101d261056d565b50505b505050506040513d60208110156101f4576000806101f161056d565b50505b8101908080519350600092506002915061020e90506105d8565b906101000a90046001600160a01b03166001600160a01b03165a610230610771565b6001600160a01b0316146102935760405162461bcd60e51b815260206004820181905260248201527f7468652063616c6c6572206973206e6f7420746865207769746864726177657260448201526064016040518091039061029061056d565b50505b600361029d6105d8565b5a6102a66107b7565b1015806103655750600060016102ba6105d8565b906101000a90046001600160a01b03166001600160a01b0316630e136b196040518163ffffffff1660e01b815260040160206040518083038186806102fd610638565b1580156103125760008061030f61056d565b50505b505a61031c610684565b505050505015801561033b573d6000803e3d600061033861056d565b50505b505050506040513d602081101561035a5760008061035761056d565b50505b810190808051925050505b6103b95760405162461bcd60e51b815260206004820152601860248201527719195c1bdcda5d081b9bdd081c995b19585cd959081e595d60421b6044820152606401604051809103906103b661056d565b50505b6000811161040c5760405162461bcd60e51b81526020600482015260136024820152726e6f7468696e6720746f20776974686472617760681b60448201526064016040518091039061040961056d565b50505b6000806104176105d8565b906101000a90046001600160a01b03166001600160a01b031663a9059cbb83836040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038160008780610478610638565b15801561048d5760008061048a61056d565b50505b505a6104976107fd565b5050505050501580156104b7573d6000803e3d60006104b461056d565b50505b505050506040513d60208110156104d6576000806104d361056d565b50505b81019080805192506105329150505760405162461bcd60e51b81526020600482015260156024820152743a37b5b2b7103234b23713ba103a3930b739b332b960591b60448201526064016040518091039061052f61056d565b50505b5050565b60036105406105d8565b81565b6000600261054f6105d8565b906101000a90046001600160a01b031681565b60008061054f6105d8565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156105a557808601518282016040015260200161058a565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b60408110156106335760008282015260200161061c565b505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061061c565b638540661f598160e01b81526106b7565b80808311156106a15750815b92915050565b80808310156106a1575090919050565b836004820152846024820152606060448201528660648201526084810160005b888110156106ef5780880151828201526020016106d7565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af150596107448d3d6106a7565b8c016107508187610695565b5b828110156107655760008152602001610751565b50929c50505050505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061061c565b63bdbf8c36598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061061c565b6385979f76598160e01b8152836004820152846024820152606060448201528760648201526084810160005b89811015610841578089015182820152602001610829565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af150596108968e3d6106a7565b8d016108a28187610695565b5b828110156108b757600081526020016108a3565b50929d5050505050505056",
          "bin-runtime": "60806040523480156100195760008061001661056d565b50505b50600436106100555760003560e01c806351cff8d914610063578063a0d711c414610094578063cdc18424146100ae578063fc0c546a146100d2575b60008061006061056d565b50505b610092600480360360208110156100825760008061007f61056d565b50505b50356001600160a01b03166100da565b005b61009c610536565b60405190815260200160405180910390f35b6100b6610543565b6040516001600160a01b03909116815260200160405180910390f35b6100b6610562565b600080806100e66105d8565b906101000a90046001600160a01b03166001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b604081101561015a57600082820152602001610143565b5050506040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680610197610638565b1580156101ac576000806101a961056d565b50505b505a6101b6610684565b50505050501580156101d5573d6000803e3d60006101d261056d565b50505b505050506040513d60208110156101f4576000806101f161056d565b50505b8101908080519350600092506002915061020e90506105d8565b906101000a90046001600160a01b03166001600160a01b03165a610230610771565b6001600160a01b0316146102935760405162461bcd60e51b815260206004820181905260248201527f7468652063616c6c6572206973206e6f7420746865207769746864726177657260448201526064016040518091039061029061056d565b50505b600361029d6105d8565b5a6102a66107b7565b1015806103655750600060016102ba6105d8565b906101000a90046001600160a01b03166001600160a01b0316630e136b196040518163ffffffff1660e01b815260040160206040518083038186806102fd610638565b1580156103125760008061030f61056d565b50505b505a61031c610684565b505050505015801561033b573d6000803e3d600061033861056d565b50505b505050506040513d602081101561035a5760008061035761056d565b50505b810190808051925050505b6103b95760405162461bcd60e51b815260206004820152601860248201527719195c1bdcda5d081b9bdd081c995b19585cd959081e595d60421b6044820152606401604051809103906103b661056d565b50505b6000811161040c5760405162461bcd60e51b81526020600482015260136024820152726e6f7468696e6720746f20776974686472617760681b60448201526064016040518091039061040961056d565b50505b6000806104176105d8565b906101000a90046001600160a01b03166001600160a01b031663a9059cbb83836040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038160008780610478610638565b15801561048d5760008061048a61056d565b50505b505a6104976107fd565b5050505050501580156104b7573d6000803e3d60006104b461056d565b50505b505050506040513d60208110156104d6576000806104d361056d565b50505b81019080805192506105329150505760405162461bcd60e51b81526020600482015260156024820152743a37b5b2b7103234b23713ba103a3930b739b332b960591b60448201526064016040518091039061052f61056d565b50505b5050565b60036105406105d8565b81565b6000600261054f6105d8565b906101000a90046001600160a01b031681565b60008061054f6105d8565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156105a557808601518282016040015260200161058a565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b60408110156106335760008282015260200161061c565b505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061061c565b638540661f598160e01b81526106b7565b80808311156106a15750815b92915050565b80808310156106a1575090919050565b836004820152846024820152606060448201528660648201526084810160005b888110156106ef5780880151828201526020016106d7565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af150596107448d3d6106a7565b8c016107508187610695565b5b828110156107655760008152602001610751565b50929c50505050505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061061c565b63bdbf8c36598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061061c565b6385979f76598160e01b8152836004820152846024820152606060448201528760648201526084810160005b89811015610841578089015182820152602001610829565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af150596108968e3d6106a7565b8d016108a28187610695565b5b828110156108b757600081526020016108a3565b50929d5050505050505056",
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/lib/ECVerify.sol\":\"ECVerify\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/lib/ECVerify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nlibrary ECVerify {\\n\\n    function ecverify(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address signature_address)\\n    {\\n        require(signature.length == 65);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // The signature format is a compact form of:\\n        //   {bytes32 r}{bytes32 s}{uint8 v}\\n        // Compact means, uint8 is not padded to 32 bytes.\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n\\n            // Here we are loading the last 32 bytes, including 31 bytes following the signature.\\n            v := byte(0, mload(add(signature, 96)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        require(v == 27 || v == 28);\\n\\n        signature_address = ecrecover(hash, v, r, s);\\n\\n        // ecrecover returns zero on error\\n        require(signature_address != address(0x0));\\n\\n        return signature_address;\\n    }\\n}\\n\",\"keccak256\":\"0xeced41e7578af77042e00fc68e482b754cd355da872bfdda95a0b74e3dbd90e0\",\"license\":\"MIT\"}},\"version\":1}"
        },
        "MessageType": {
          "abi": [],
          "bin": "60e661007d600b82828239805160001a60731461001857fe5b5a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b604081101561006e57600082820152602001610057565b505050600052607381538281f3fe7300000000000000000000000000000000000000005a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156068576000828201526020016053565b505050146080604052600080607a607d565b50505b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101560b3578086015182820160400152602001609a565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b50505056",
          "bin-runtime": "7300000000000000000000000000000000000000005a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156068576000828201526020016053565b505050146080604052600080607a607d565b50505b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101560b3578086015182820160400152602001609a565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b50505056",
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/lib/MessageType.sol\":\"MessageType\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/lib/MessageType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nlibrary MessageType {\\n\\n    enum MessageTypeId {\\n        None,\\n        BalanceProof,\\n        BalanceProofUpdate,\\n        Withdraw,\\n        CooperativeSettle,\\n        IOU,\\n        MSReward\\n    }\\n}\\n\",\"keccak256\":\"0xe4a3d54220ba19024c03fac9f8b3338245f2c4aa266627e6cdb5e97a2adcdee4\",\"license\":\"MIT\"}},\"version\":1}"
        },
        "MonitoringService": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_token_address",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_service_registry_address",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_udc_address",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_token_network_registry_address",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "token_network_address",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "reward_amount",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "ms_address",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "raiden_node_address",
                  "type": "address"
                }
              ],
              "name": "NewBalanceProofReceived",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "ms_address",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "reward_identifier",
                  "type": "bytes32"
                }
              ],
              "name": "RewardClaimed",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "token_network_address",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "closing_participant",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "non_closing_participant",
                  "type": "address"
                }
              ],
              "name": "claimReward",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "contract_address",
                  "type": "address"
                }
              ],
              "name": "contractExists",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "closed_at_block",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "settle_timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "participant1",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "participant2",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "monitoring_service_address",
                  "type": "address"
                }
              ],
              "name": "firstBlockAllowedToMonitor",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "contract TokenNetwork",
                  "name": "token_network",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "closing_participant",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "non_closing_participant",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "monitoring_service_address",
                  "type": "address"
                }
              ],
              "name": "firstBlockAllowedToMonitorChannel",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "closing_participant",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "non_closing_participant",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "balance_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "additional_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "closing_signature",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "non_closing_signature",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "reward_amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "token_network_address",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "reward_proof_signature",
                  "type": "bytes"
                }
              ],
              "name": "monitor",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "service_registry",
              "outputs": [
                {
                  "internalType": "contract ServiceRegistry",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "token",
              "outputs": [
                {
                  "internalType": "contract Token",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "token_network_registry",
              "outputs": [
                {
                  "internalType": "contract TokenNetworkRegistry",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "user_deposit",
              "outputs": [
                {
                  "internalType": "contract UserDeposit",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "bin": "",
          "bin-runtime": "608060405234801561001957600080610016611963565b50505b506004361061008c5760003560e01c80630e7dfb731461009a57806360df33d8146100f5578063637d89d4146101565780636766923e1461017a5780637709bc78146101c757806381c6dac2146101f6578063b4238f4a146101fe578063d3b6c08014610206578063fc0c546a1461044f575b600080610097611963565b50505b6100e1600480360360808110156100b9576000806100b6611963565b50505b508035906001600160a01b036020820135811691604081013582169160609091013516610457565b604051901515815260200160405180910390f35b610144600480360360a081101561011457600080610111611963565b50505b506001600160a01b038135811691602081013591604082013581169160608101358216916080909101351661093e565b60405190815260200160405180910390f35b61015e610ca8565b6040516001600160a01b03909116815260200160405180910390f35b610144600480360360a081101561019957600080610196611963565b50505b508035906020810135906001600160a01b036040820135811691606081013582169160809091013516610cc7565b6100e1600480360360208110156101e6576000806101e3611963565b50505b50356001600160a01b0316610de1565b61015e610df6565b61015e610e02565b61044d600480360361014081101561022657600080610223611963565b50505b6001600160a01b0382358116926020810135909116916040820135916060810135916080820135919081019060c0810160a0820135600160201b81111561027557600080610272611963565b50505b8201836020820111156102905760008061028d611963565b50505b803590602001918460018302840111600160201b831117156102ba576000806102b7611963565b50505b91908080601f01602080910402602001604051908101604052818152929190602084018383808284376000920191909152509295949360208101935035915050600160201b81111561031457600080610311611963565b50505b82018360208201111561032f5760008061032c611963565b50505b803590602001918460018302840111600160201b8311171561035957600080610356611963565b50505b91908080601f016020809104026020016040519081016040528181529291906020840183838082843760009201919091525092958435956001600160a01b0360208701351695919450925060608101915060400135600160201b8111156103c8576000806103c5611963565b50505b8201836020820111156103e3576000806103e0611963565b50505b803590602001918460018302840111600160201b8311171561040d5760008061040a611963565b50505b91908080601f0160208091040260200160405190810160405281815292919060208401838380828437600092019190915250929550610e0e945050505050565b005b61015e611165565b60008381868260405160200180838152602001826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050600080836001600160a01b031663838d6e058a89896040516001600160e01b031960e086901b16815260048101939093526001600160a01b039182166024840152166044820152606401604080518083038186806104f46119ce565b15801561050957600080610506611963565b50505b505a610513611a2e565b5050505050158015610532573d6000803e3d600061052f611963565b50505b505050506040513d60408110156105515760008061054e611963565b50505b8101908080519291906020018051955092935060029250610570915050565b82600481111561057c57fe5b14806105935750600382600481111561059157fe5b145b806105a9575060048260048111156105a757fe5b145b6105fc5760405162461bcd60e51b8152602060048201526017602482015276746f6f206561726c79206368616e6e656c20737461746560481b6044820152606401604051809103906105f9611963565b50505b5a610605611b19565b811061065a5760405162461bcd60e51b815260206004820152601760248201527618da185b9b995b081b9bdd081cd95d1d1b1959081e595d604a1b604482015260640160405180910390610657611963565b50505b6000838152600460205260408120905060008060028301610679611b5f565b906101000a90046001600160a01b03166001600160a01b031614156106e55760405162461bcd60e51b81526020600482015260156024820152747265776172645f73656e646572206973207a65726f60581b6044820152606401604051809103906106e2611963565b50505b600060026106f1611b5f565b6001600160a01b036101009290920a90041663beabacc8600060028401610716611b5f565b906101000a90046001600160a01b031683600301600090610735611b5f565b906101000a90046001600160a01b031684600001610751611b5f565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015291909216602482015260448101919091526064016020604051808303816000878061079e6119ce565b1580156107b3576000806107b0611963565b50505b505a6107bd611bab565b5050505050501580156107dd573d6000803e3d60006107da611963565b50505b505050506040513d60208110156107fc576000806107f9611963565b50505b81019080805192506108579150505760405162461bcd60e51b81526020600482015260146024820152732aa221903234b2103737ba103a3930b739b332b960611b604482015260640160405180910390610854611963565b50505b83600060038301610866611b5f565b6001600160a01b036101009290920a9004167fe413caa6d70a6d9b51c2af2575a2914490f614355049af8ae7cde5caab9fd201836108a2611b5f565b60405190815260200160405180910390a36000848152600460205260409020600080826108cd611c71565b5050600182016000906108de611c71565b5050600282016001816108ef611b5f565b906001600160a01b0302191690610904611c71565b505060038201600181610915611b5f565b906001600160a01b030219169061092a611c71565b5060019d9c50505050505050505050505050565b600080600161094b611b5f565b906101000a90046001600160a01b03166001600160a01b031663ebc00c05836040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806109a46119ce565b1580156109b9576000806109b6611963565b50505b505a6109c3611a2e565b50505050501580156109e2573d6000803e3d60006109df611963565b50505b505050506040513d6020811015610a01576000806109fe611963565b50505b8101908080519250610a5e9150505760405162461bcd60e51b81526020600482015260166024820152751cd95c9d9a58d9481b9bdd081c9959da5cdd195c995960521b604482015260640160405180910390610a5b611963565b50505b600080876001600160a01b031663838d6e058888886040516001600160e01b031960e086901b16815260048101939093526001600160a01b03918216602484015216604482015260640160408051808303818680610aba6119ce565b158015610acf57600080610acc611963565b50505b505a610ad9611a2e565b5050505050158015610af8573d6000803e3d6000610af5611963565b50505b505050506040513d6040811015610b1757600080610b14611963565b50505b8101908080519291906020018051955092935060029250610b36915050565b826004811115610b4257fe5b14610b915760405162461bcd60e51b815260206004820152601260248201527118da185b9b995b081b9bdd0818db1bdcd95960721b604482015260640160405180910390610b8e611963565b50505b6000886001600160a01b031663b8378f756040518163ffffffff1660e01b81526004016020604051808303818680610bc76119ce565b158015610bdc57600080610bd9611963565b50505b505a610be6611a2e565b5050505050158015610c05573d6000803e3d6000610c02611963565b50505b505050506040513d6020811015610c2457600080610c21611963565b50505b810190808051935050505080821015610c8a5760405162461bcd60e51b815260206004820152601b60248201527a3a37b7903637bb9039b2ba3a363290313637b1b590373ab6b132b960291b604482015260640160405180910390610c87611963565b50505b808203610c9a81838a8a8a610cc7565b9a9950505050505050505050565b60006002610cb4611b5f565b906101000a90046001600160a01b031681565b6000600080516020611d358339815191528510610d335760405162461bcd60e51b815260206004820152601e60248201527f6d616c6963696f75736c792062696720736574746c652074696d656f75740000604482015260640160405180910390610d30611963565b50505b600080516020611d358339815191528610610d9d5760405162461bcd60e51b815260206004820152601f60248201527f6d616c6963696f75736c792062696720636c6f7365645f61745f626c6f636b00604482015260640160405180910390610d9a611963565b50505b601e6050606487830281900489019060328902046000816001600160a01b038a81168a8216019089160181610dce57fe5b06929092019a9950505050505050505050565b60008082610ded6119ce565b15159392505050565b60006001610cb4611b5f565b60006003610cb4611b5f565b610e26828b8b868b5a610e1f611cbf565b8a88611170565b8160006001600160a01b03821663938bcd678d8d6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303818680610e7b6119ce565b158015610e9057600080610e8d611963565b50505b505a610e9a611a2e565b5050505050158015610eb9573d6000803e3d6000610eb6611963565b50505b505050506040513d6020811015610ed857600080610ed5611963565b50505b8101908080519350610efb92508491508390508e8e5a610ef6611cbf565b61093e565b5a610f04611b19565b1015610f585760405162461bcd60e51b81526020600482015260166024820152753737ba1030b63637bbb2b2103a379036b7b734ba37b960511b604482015260640160405180910390610f55611963565b50505b816001600160a01b031663fadc554b828e8e8e8e8e8e8e6040518963ffffffff1660e01b815260040180898152602001886001600160a01b03168152602001876001600160a01b031681526020018681526020018581526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015610ff5578082015183820152602001610fdd565b50505050905090810190601f1680156110225780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611058578082015183820152602001611040565b50505050905090810190601f1680156110855780820380516001836020036101000a031916815260200191505b509a5050505050505050505050600060405180830381600087806110a76119ce565b1580156110bc576000806110b9611963565b50505b505a6110c6611bab565b5050505050501580156110e6573d6000803e3d60006110e3611963565b50505b505050508a6001600160a01b03165a6110fd611cbf565b6001600160a01b03168a7f486d5933a2980e097e7c32c7fe217158facf1a3973bac8235ac6c8b0e77d3dff87858a60405180846001600160a01b03168152602001838152602001828152602001935050505060405180910390a4505050505050505050505050565b600080610cb4611b5f565b8760006001600160a01b03821663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186806111a76119ce565b1580156111bc576000806111b9611963565b50505b505a6111c6611a2e565b50505050501580156111e5573d6000803e3d60006111e2611963565b50505b505050506040513d602081101561120457600080611201611963565b50505b810190808051935050506001600160a01b038316905060006003611226611b5f565b906101000a90046001600160a01b03166001600160a01b0316630fabd9e7836040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381868061127f6119ce565b15801561129457600080611291611963565b50505b505a61129e611a2e565b50505050501580156112bd573d6000803e3d60006112ba611963565b50505b505050506040513d60208110156112dc576000806112d9611963565b50505b8101908080516001600160a01b03169390931492506113449150505760405162461bcd60e51b8152602060048201526014602482015273556e6b6e6f776e20546f6b656e4e6574776f726b60601b604482015260640160405180910390611341611963565b50505b6000826001600160a01b031663938bcd678b8b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186806113986119ce565b1580156113ad576000806113aa611963565b50505b505a6113b7611a2e565b50505050501580156113d6573d6000803e3d60006113d3611963565b50505b505050506040513d60208110156113f5576000806113f2611963565b50505b8101908080519350600092506114ae9150506001600160a01b038516633af973b16040518163ffffffff1660e01b8152600401602060405180830381868061143b6119ce565b1580156114505760008061144d611963565b50505b505a61145a611a2e565b5050505050158015611479573d6000803e3d6000611476611963565b50505b505050506040513d602081101561149857600080611495611963565b50505b81019080805192508f91508d9050898d8a6116a0565b9050896001600160a01b0316816001600160a01b0316146115115760405162461bcd60e51b815260206004820152601060248201526f2130b2103932bbb0b93210383937b7b360811b60448201526064016040518091039061150e611963565b50505b6000828d60405160200180838152602001826001600160a01b031660601b8152601401925050506040516020818303038152906040528051906020012060008181526004602052909150604081209050898160010161156e611b5f565b106115b65760405162461bcd60e51b815260206004820152600b60248201526a7374616c65206e6f6e636560a81b6044820152606401604051809103906115b3611963565b50505b60405180608001604052808c81526020018b81526020018d6001600160a01b031681526020018a6001600160a01b031681525060046000848152602001908152602001600020815181611607611c71565b505060208201518160010161161a611c71565b5050604082015160028201600181611630611b5f565b816001600160a01b0302191690836001600160a01b0316021790611652611c71565b505050606082015160038201600181611669611b5f565b816001600160a01b0302191690836001600160a01b031602179061168b611c71565b50505050505050505050505050505050505050565b6000805a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156116f9576000828201526020016116e2565b508a9150600690508989898960405160200180807f19457468657265756d205369676e6564204d6573736167653a0a323231000000815250601d01886001600160a01b031660601b8152601401878152602001868152602001856001600160a01b031660601b8152601401846001600160a01b031660601b815260140183805190602001908083835b602083106117a15780518252601f199092019160209182019101611782565b6001836020036101000a038019825116818451161790925250505091909101928352505060200195506040945050505050516020818303038152906040528051906020012090506117f28184611858565b9150856001600160a01b0316826001600160a01b03161461184d5760405162461bcd60e51b815260040180806020018281038252602f815260200180611d06602f91396040019150506040518091039061184a611963565b50505b509695505050505050565b600081516041146118715760008061186e611963565b50505b60008060006020850151925060408501519150606085015160001a9050601b81101561189b57601b015b8060ff16601b14806118b057508060ff16601c145b6118c2576000806118bf611963565b50505b60018682858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855a611912611a2e565b5050505050158015611931573d6000803e3d600061192e611963565b50505b5050506020604051035193506001600160a01b03841661195957600080611956611963565b50505b5050505b92915050565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561199b578086015182820160400152602001611980565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015611a2957600082820152602001611a12565b505050565b638540661f598160e01b8152611a5f565b808083111561195d575090919050565b808083101561195d575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015611a97578088015182820152602001611a7f565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af15059611aec8d3d611a4f565b8c01611af88187611a3f565b5b82811015611b0d5760008152602001611af9565b50929c50505050505050565b635a98c361598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020611a12565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020611a12565b6385979f76598160e01b8152836004820152846024820152606060448201528760648201526084810160005b89811015611bef578089015182820152602001611bd7565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af15059611c448e3d611a4f565b8d01611c508187611a3f565b5b82811015611c655760008152602001611c51565b50929d50505050505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020611a12565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020611a1256fe5265776172642070726f6f6620776974682077726f6e67206e6f6e5f636c6f73696e675f7061727469636970616e74028f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f",
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_service_registry_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_udc_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token_network_registry_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_network_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ms_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"raiden_node_address\",\"type\":\"address\"}],\"name\":\"NewBalanceProofReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ms_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"reward_identifier\",\"type\":\"bytes32\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token_network_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"closing_participant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"non_closing_participant\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"closed_at_block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settle_timeout\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"participant2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"monitoring_service_address\",\"type\":\"address\"}],\"name\":\"firstBlockAllowedToMonitor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TokenNetwork\",\"name\":\"token_network\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"closing_participant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"non_closing_participant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"monitoring_service_address\",\"type\":\"address\"}],\"name\":\"firstBlockAllowedToMonitorChannel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"closing_participant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"non_closing_participant\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"balance_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"additional_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"closing_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"non_closing_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token_network_address\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"reward_proof_signature\",\"type\":\"bytes\"}],\"name\":\"monitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"service_registry\",\"outputs\":[{\"internalType\":\"contract ServiceRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_network_registry\",\"outputs\":[{\"internalType\":\"contract TokenNetworkRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"user_deposit\",\"outputs\":[{\"internalType\":\"contract UserDeposit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimReward(uint256,address,address,address)\":{\"params\":{\"closing_participant\":\"Address of the participant of the channel that called close\",\"non_closing_participant\":\"The other participant of the channel\",\"token_network_address\":\"Address of the Token Network in which the channel exists\"}},\"constructor\":{\"params\":{\"_service_registry_address\":\"The address of the ServiceRegistry contract\",\"_token_address\":\"The address of the token to use for rewards\",\"_token_network_registry_address\":\"The address of the TokenNetworkRegistry for authenticating TokenNetworks\"}},\"contractExists(address)\":{\"params\":{\"contract_address\":\"The address to check whether a contract is deployed or not\"},\"returns\":{\"_0\":\"True if a contract exists, false otherwise\"}},\"monitor(address,address,bytes32,uint256,bytes32,bytes,bytes,uint256,address,bytes)\":{\"params\":{\"nonce\":\"Strictly monotonic value used to order BPs omitting PB specific params, since these will not be provided in the future\",\"reward_amount\":\"Amount of tokens to be rewarded\",\"reward_proof_signature\":\"The signature of the signed reward proof\",\"token_network_address\":\"Address of the Token Network in which the channel being monitored exists.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimReward(uint256,address,address,address)\":{\"notice\":\"Called after a monitored channel is settled in order for MS to claim the reward Can be called once per settled channel by everyone on behalf of MS\"},\"constructor\":{\"notice\":\"Set the default values for the smart contract\"},\"contractExists(address)\":{\"notice\":\"Check if a contract exists\"},\"monitor(address,address,bytes32,uint256,bytes32,bytes,bytes,uint256,address,bytes)\":{\"notice\":\"Called by a registered MS, when providing a new balance proof to a monitored channel. Can be called multiple times by different registered MSs as long as the BP provided is newer than the current newest registered BP.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/services/MonitoringService.sol\":\"MonitoringService\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/lib/ECVerify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nlibrary ECVerify {\\n\\n    function ecverify(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address signature_address)\\n    {\\n        require(signature.length == 65);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // The signature format is a compact form of:\\n        //   {bytes32 r}{bytes32 s}{uint8 v}\\n        // Compact means, uint8 is not padded to 32 bytes.\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n\\n            // Here we are loading the last 32 bytes, including 31 bytes following the signature.\\n            v := byte(0, mload(add(signature, 96)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        require(v == 27 || v == 28);\\n\\n        signature_address = ecrecover(hash, v, r, s);\\n\\n        // ecrecover returns zero on error\\n        require(signature_address != address(0x0));\\n\\n        return signature_address;\\n    }\\n}\\n\",\"keccak256\":\"0xeced41e7578af77042e00fc68e482b754cd355da872bfdda95a0b74e3dbd90e0\",\"license\":\"MIT\"},\"data/source/lib/MessageType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nlibrary MessageType {\\n\\n    enum MessageTypeId {\\n        None,\\n        BalanceProof,\\n        BalanceProofUpdate,\\n        Withdraw,\\n        CooperativeSettle,\\n        IOU,\\n        MSReward\\n    }\\n}\\n\",\"keccak256\":\"0xe4a3d54220ba19024c03fac9f8b3338245f2c4aa266627e6cdb5e97a2adcdee4\",\"license\":\"MIT\"},\"data/source/lib/TokenNetworkUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable indentation */\\npragma solidity 0.7.6;\\n\\nimport \\\"./ECVerify.sol\\\";\\nimport \\\"./MessageType.sol\\\";\\n\\nlibrary TokenNetworkUtils {\\n    string internal constant signature_prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n\\\";\\n\\n    function getMaxPossibleReceivableAmount(\\n        uint256 participant1_deposit,\\n        uint256 participant1_withdrawn,\\n        uint256 participant1_transferred,\\n        uint256 participant1_locked,\\n        uint256 participant2_deposit,\\n        uint256 participant2_withdrawn,\\n        uint256 participant2_transferred,\\n        uint256 participant2_locked\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 participant1_max_transferred;\\n        uint256 participant2_max_transferred;\\n        uint256 participant1_net_max_received;\\n        uint256 participant1_max_amount;\\n\\n        // This is the maximum possible amount that participant1 could transfer\\n        // to participant2, if all the pending lock secrets have been\\n        // registered\\n        participant1_max_transferred = failsafe_addition(\\n            participant1_transferred,\\n            participant1_locked\\n        );\\n\\n        // This is the maximum possible amount that participant2 could transfer\\n        // to participant1, if all the pending lock secrets have been\\n        // registered\\n        participant2_max_transferred = failsafe_addition(\\n            participant2_transferred,\\n            participant2_locked\\n        );\\n\\n        // We enforce this check artificially, in order to get rid of hard\\n        // to deal with over/underflows. Settlement balance calculation is\\n        // symmetric (we can calculate either RmaxP1 and RmaxP2 first, order does\\n        // not affect result). This means settleChannel must be called with\\n        // ordered values.\\n        require(participant2_max_transferred >= participant1_max_transferred, \\\"TNU: transfers not ordered\\\");\\n\\n        assert(participant1_max_transferred >= participant1_transferred);\\n        assert(participant2_max_transferred >= participant2_transferred);\\n\\n        // This is the maximum amount that participant1 can receive at settlement time\\n        participant1_net_max_received = (\\n            participant2_max_transferred -\\n            participant1_max_transferred\\n        );\\n\\n        // Next, we add the participant1's deposit and subtract the already\\n        // withdrawn amount\\n        participant1_max_amount = failsafe_addition(\\n            participant1_net_max_received,\\n            participant1_deposit\\n        );\\n\\n        // Subtract already withdrawn amount\\n        (participant1_max_amount, ) = failsafe_subtract(\\n            participant1_max_amount,\\n            participant1_withdrawn\\n        );\\n        return participant1_max_amount;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        return a > b ? b : a;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        return a > b ? a : b;\\n    }\\n\\n    /// @dev Special subtraction function that does not fail when underflowing.\\n    /// @param a Minuend\\n    /// @param b Subtrahend\\n    /// @return Minimum between the result of the subtraction and 0, the maximum\\n    /// subtrahend for which no underflow occurs\\n    function failsafe_subtract(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        return a > b ? (a - b, b) : (0, a);\\n    }\\n\\n    /// @dev Special addition function that does not fail when overflowing.\\n    /// @param a Addend\\n    /// @param b Addend\\n    /// @return Maximum between the result of the addition or the maximum\\n    /// uint256 value\\n    function failsafe_addition(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 MAX_SAFE_UINT256 = (\\n            115792089237316195423570985008687907853269984665640564039457584007913129639935\\n        );\\n        uint256 sum = a + b;\\n        return sum >= a ? sum : MAX_SAFE_UINT256;\\n    }\\n\\n    function recoverAddressFromBalanceProof(\\n        uint256 chain_id,\\n        uint256 channel_identifier,\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes memory signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 32 + 32 + 32\\n        string memory message_length = \\\"212\\\";\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(MessageType.MessageTypeId.BalanceProof),\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, signature);\\n    }\\n\\n    function recoverAddressFromBalanceProofCounterSignature(\\n        MessageType.MessageTypeId message_type_id,\\n        uint256 chain_id,\\n        uint256 channel_identifier,\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes memory closing_signature,\\n        bytes memory non_closing_signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 32 + 32 + 32 + 65\\n        string memory message_length = \\\"277\\\";\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(message_type_id),\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            closing_signature\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, non_closing_signature);\\n    }\\n\\n    /* function recoverAddressFromCooperativeSettleSignature(\\n        uint256 channel_identifier,\\n        address participant1,\\n        uint256 participant1_balance,\\n        address participant2,\\n        uint256 participant2_balance,\\n        bytes signature\\n    )\\n        view\\n        internal\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 20 + 32 + 20 + 32\\n        string memory message_length = '220';\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(MessageTypeId.CooperativeSettle),\\n            channel_identifier,\\n            participant1,\\n            participant1_balance,\\n            participant2,\\n            participant2_balance\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, signature);\\n    } */\\n\\n    function recoverAddressFromWithdrawMessage(\\n        uint256 chain_id,\\n        uint256 channel_identifier,\\n        address participant,\\n        uint256 total_withdraw,\\n        uint256 expiration_block,\\n        bytes memory signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 20 + 32 + 32\\n        string memory message_length = \\\"200\\\";\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(MessageType.MessageTypeId.Withdraw),\\n            channel_identifier,\\n            participant,\\n            total_withdraw,\\n            expiration_block\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, signature);\\n    }\\n}\\n\",\"keccak256\":\"0x115640f1f605878e1d55e5e5e3c3e0f24e55eb435d8e618405d4bf2f14a99f59\",\"license\":\"MIT\"},\"data/source/raiden/SecretRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @title SecretRegistry\\n/// @notice SecretRegistry contract for registering secrets from Raiden Network\\n/// clients.\\ncontract SecretRegistry {\\n    // sha256(secret) => block number at which the secret was revealed\\n    mapping(bytes32 => uint256) private secrethash_to_block;\\n\\n    event SecretRevealed(bytes32 indexed secrethash, bytes32 secret);\\n\\n    /// @notice Registers a hash time lock secret and saves the block number.\\n    /// This allows the lock to be unlocked after the expiration block\\n    /// @param secret The secret used to lock the hash time lock\\n    /// @return true if secret was registered, false if the secret was already\\n    /// registered\\n    function registerSecret(bytes32 secret) public returns (bool) {\\n        bytes32 secrethash = sha256(abi.encodePacked(secret));\\n        if (secrethash_to_block[secrethash] > 0) {\\n            return false;\\n        }\\n        secrethash_to_block[secrethash] = block.number;\\n        emit SecretRevealed(secrethash, secret);\\n        return true;\\n    }\\n\\n    /// @notice Registers multiple hash time lock secrets and saves the block\\n    /// number\\n    /// @param secrets The array of secrets to be registered\\n    /// @return true if all secrets could be registered, false otherwise\\n    function registerSecretBatch(bytes32[] memory secrets) public returns (bool) {\\n        bool completeSuccess = true;\\n        for(uint i = 0; i < secrets.length; i++) {\\n            if(!registerSecret(secrets[i])) {\\n                completeSuccess = false;\\n            }\\n        }\\n        return completeSuccess;\\n    }\\n\\n    /// @notice Get the stored block number at which the secret was revealed\\n    /// @param secrethash The hash of the registered secret `keccak256(secret)`\\n    /// @return The block number at which the secret was revealed\\n    function getSecretRevealBlockHeight(bytes32 secrethash) public view returns (uint256) {\\n        return secrethash_to_block[secrethash];\\n    }\\n}\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\",\"keccak256\":\"0x828dbf9a344f66cb982df97f677d10942d1b163287b890860be40230b236642e\",\"license\":\"MIT\"},\"data/source/raiden/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface Token {\\n\\n    /// @return supply total amount of tokens\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return balance The balance\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return success Whether the approval was successful or not\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return remaining Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    // Optionally implemented function to show the number of decimals for the token\\n    function decimals() external view returns (uint8 decimals);\\n}\\n\",\"keccak256\":\"0x5a8ccb9fa426228d9e213164f22a94b0ac57f1aa15ab76ce88a96177edd7b0b3\",\"license\":\"MIT\"},\"data/source/raiden/TokenNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\n/* solium-disable indentation */\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../lib/ECVerify.sol\\\";\\nimport \\\"../lib/MessageType.sol\\\";\\nimport \\\"../lib/TokenNetworkUtils.sol\\\";\\nimport \\\"./Token.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"./SecretRegistry.sol\\\";\\n\\n/// @title TokenNetwork\\n/// @notice Stores and manages all the Raiden Network channels that use the\\n/// token specified in this TokenNetwork contract.\\ncontract TokenNetwork is Utils {\\n    // Instance of the token used by the channels\\n    Token public token;\\n\\n    // Instance of SecretRegistry used for storing secrets revealed in a\\n    // mediating transfer.\\n    SecretRegistry public secret_registry;\\n\\n    // Chain ID as specified by EIP155 used in balance proof signatures to\\n    // avoid replay attacks\\n    uint256 public chain_id;\\n\\n    uint256 public settlement_timeout_min;\\n    uint256 public settlement_timeout_max;\\n\\n    uint256 constant public MAX_SAFE_UINT256 = (\\n        115792089237316195423570985008687907853269984665640564039457584007913129639935\\n    );\\n\\n    // The deposit limit per channel per participant.\\n    uint256 public channel_participant_deposit_limit;\\n    // The total combined deposit of all channels across the whole network\\n    uint256 public token_network_deposit_limit;\\n\\n    // Global, monotonically increasing counter that keeps track of all the\\n    // opened channels in this contract\\n    uint256 public channel_counter;\\n\\n    // Only for the limited Red Eyes release\\n    address public deprecation_executor;\\n    bool public safety_deprecation_switch = false;\\n\\n    // channel_identifier => Channel\\n    // channel identifier is the channel_counter value at the time of opening\\n    // the channel\\n    mapping (uint256 => Channel) public channels;\\n\\n    // This is needed to enforce one channel per pair of participants\\n    // The key is keccak256(participant1_address, participant2_address)\\n    mapping (bytes32 => uint256) public participants_hash_to_channel_identifier;\\n\\n    // We keep the unlock data in a separate mapping to allow channel data\\n    // structures to be removed when settling uncooperatively. If there are\\n    // locked pending transfers, we need to store data needed to unlock them at\\n    // a later time.\\n    // The key is `keccak256(uint256 channel_identifier, address participant,\\n    // address partner)` Where `participant` is the participant that sent the\\n    // pending transfers We need `partner` for knowing where to send the\\n    // claimable tokens\\n    mapping(bytes32 => UnlockData) private unlock_identifier_to_unlock_data;\\n\\n    struct Participant {\\n        // Total amount of tokens transferred to this smart contract through\\n        // the `setTotalDeposit` function, for a specific channel, in the\\n        // participant's benefit.\\n        // This is a strictly monotonic value. Note that direct token transfer\\n        // into the contract cannot be tracked and will be stuck.\\n        uint256 deposit;\\n\\n        // Total amount of tokens withdrawn by the participant during the\\n        // lifecycle of this channel.\\n        // This is a strictly monotonic value.\\n        uint256 withdrawn_amount;\\n\\n        // This is a value set to true after the channel has been closed, only\\n        // if this is the participant who closed the channel.\\n        bool is_the_closer;\\n\\n        // keccak256 of the balance data provided after a closeChannel or an\\n        // updateNonClosingBalanceProof call\\n        bytes32 balance_hash;\\n\\n        // Monotonically increasing counter of the off-chain transfers,\\n        // provided along with the balance_hash\\n        uint256 nonce;\\n    }\\n\\n    enum ChannelState {\\n        NonExistent, // 0\\n        Opened,      // 1\\n        Closed,      // 2\\n        Settled,     // 3; Note: The channel has at least one pending unlock\\n        Removed      // 4; Note: Channel data is removed, there are no pending unlocks\\n    }\\n\\n    struct Channel {\\n        // After opening the channel this value represents the settlement\\n        // window. This is the number of blocks that need to be mined between\\n        // closing the channel uncooperatively and settling the channel.\\n        // After the channel has been uncooperatively closed, this value\\n        // represents the block number after which settleChannel can be called.\\n        uint256 settle_block_number;\\n\\n        ChannelState state;\\n\\n        mapping(address => Participant) participants;\\n    }\\n\\n    struct SettlementData {\\n        uint256 deposit;\\n        uint256 withdrawn;\\n        uint256 transferred;\\n        uint256 locked;\\n    }\\n\\n    struct UnlockData {\\n        // keccak256 hash of the pending locks from the Raiden client\\n        bytes32 locksroot;\\n        // Total amount of tokens locked in the pending locks corresponding\\n        // to the `locksroot`\\n        uint256 locked_amount;\\n    }\\n\\n    struct SettleInput {\\n        address participant;\\n        uint256 transferred_amount;\\n        uint256 locked_amount;\\n        bytes32 locksroot;\\n    }\\n\\n    event ChannelOpened(\\n        uint256 indexed channel_identifier,\\n        address indexed participant1,\\n        address indexed participant2,\\n        uint256 settle_timeout\\n    );\\n\\n    event ChannelNewDeposit(\\n        uint256 indexed channel_identifier,\\n        address indexed participant,\\n        uint256 total_deposit\\n    );\\n\\n    // Fires when the deprecation_switch's value changes\\n    event DeprecationSwitch(bool new_value);\\n\\n    // total_withdraw is how much the participant has withdrawn during the\\n    // lifetime of the channel. The actual amount which the participant withdrew\\n    // is `total_withdraw - total_withdraw_from_previous_event_or_zero`\\n    event ChannelWithdraw(\\n        uint256 indexed channel_identifier,\\n        address indexed participant,\\n        uint256 total_withdraw\\n    );\\n\\n    event ChannelClosed(\\n        uint256 indexed channel_identifier,\\n        address indexed closing_participant,\\n        uint256 indexed nonce,\\n        bytes32 balance_hash\\n    );\\n\\n    event ChannelUnlocked(\\n        uint256 indexed channel_identifier,\\n        address indexed receiver,\\n        address indexed sender,\\n        bytes32 locksroot,\\n        uint256 unlocked_amount,\\n        uint256 returned_tokens\\n    );\\n\\n    event NonClosingBalanceProofUpdated(\\n        uint256 indexed channel_identifier,\\n        address indexed closing_participant,\\n        uint256 indexed nonce,\\n        bytes32 balance_hash\\n    );\\n\\n    event ChannelSettled(\\n        uint256 indexed channel_identifier,\\n        uint256 participant1_amount,\\n        bytes32 participant1_locksroot,\\n        uint256 participant2_amount,\\n        bytes32 participant2_locksroot\\n    );\\n\\n    modifier onlyDeprecationExecutor() {\\n        require(msg.sender == deprecation_executor);\\n        _;\\n    }\\n\\n    modifier isSafe() {\\n        require(safety_deprecation_switch == false);\\n        _;\\n    }\\n\\n    modifier isOpen(uint256 channel_identifier) {\\n        require(channels[channel_identifier].state == ChannelState.Opened);\\n        _;\\n    }\\n\\n    modifier settleTimeoutValid(uint256 timeout) {\\n        require(timeout >= settlement_timeout_min);\\n        require(timeout <= settlement_timeout_max);\\n        _;\\n    }\\n\\n    /// @param _token_address The address of the ERC20 token contract\\n    /// @param _secret_registry The address of SecretRegistry contract that witnesses the onchain secret reveals\\n    /// @param _chain_id EIP-155 Chain ID of the blockchain where this instance is being deployed\\n    /// @param _settlement_timeout_min The shortest settlement period (in number of blocks)\\n    /// that can be chosen at the channel opening\\n    /// @param _settlement_timeout_max The longest settlement period (in number of blocks)\\n    /// that can be chosen at the channel opening\\n    /// @param _deprecation_executor The Ethereum address that can disable new deposits and channel creation\\n    /// @param _channel_participant_deposit_limit The maximum amount of tokens that can be deposited by each\\n    /// participant of each channel. MAX_SAFE_UINT256 means no limits\\n    /// @param _token_network_deposit_limit The maximum amount of tokens that this contract can hold\\n    /// MAX_SAFE_UINT256 means no limits\\n    constructor(\\n        address _token_address,\\n        address _secret_registry,\\n        uint256 _chain_id,\\n        uint256 _settlement_timeout_min,\\n        uint256 _settlement_timeout_max,\\n        address _deprecation_executor,\\n        uint256 _channel_participant_deposit_limit,\\n        uint256 _token_network_deposit_limit\\n    ) {\\n        require(_token_address != address(0x0));\\n        require(_secret_registry != address(0x0));\\n        require(_deprecation_executor != address(0x0));\\n        require(_chain_id > 0);\\n        require(_settlement_timeout_min > 0);\\n        require(_settlement_timeout_max > _settlement_timeout_min);\\n        require(contractExists(_token_address));\\n        require(contractExists(_secret_registry));\\n        require(_channel_participant_deposit_limit > 0);\\n        require(_token_network_deposit_limit > 0);\\n        require(_token_network_deposit_limit >= _channel_participant_deposit_limit);\\n\\n        token = Token(_token_address);\\n\\n        secret_registry = SecretRegistry(_secret_registry);\\n        chain_id = _chain_id;\\n        settlement_timeout_min = _settlement_timeout_min;\\n        settlement_timeout_max = _settlement_timeout_max;\\n\\n        // Make sure the contract is indeed a token contract\\n        require(token.totalSupply() > 0);\\n\\n        deprecation_executor = _deprecation_executor;\\n        channel_participant_deposit_limit = _channel_participant_deposit_limit;\\n        token_network_deposit_limit = _token_network_deposit_limit;\\n    }\\n\\n    function deprecate() public isSafe onlyDeprecationExecutor {\\n        safety_deprecation_switch = true;\\n        emit DeprecationSwitch(safety_deprecation_switch);\\n    }\\n\\n    /// @notice Opens a new channel between `participant1` and `participant2`.\\n    /// Can be called by anyone\\n    /// @param participant1 Ethereum address of a channel participant\\n    /// @param participant2 Ethereum address of the other channel participant\\n    /// @param settle_timeout Number of blocks that need to be mined between a\\n    /// call to closeChannel and settleChannel\\n    function openChannel(address participant1, address participant2, uint256 settle_timeout)\\n        public\\n        isSafe\\n        settleTimeoutValid(settle_timeout)\\n        returns (uint256)\\n    {\\n        bytes32 pair_hash;\\n        uint256 channel_identifier;\\n\\n        // Red Eyes release token network limit\\n        require(token.balanceOf(address(this)) < token_network_deposit_limit);\\n\\n        // First increment the counter\\n        // There will never be a channel with channel_identifier == 0\\n        channel_counter += 1;\\n        channel_identifier = channel_counter;\\n\\n        pair_hash = getParticipantsHash(participant1, participant2);\\n\\n        // There must only be one channel opened between two participants at\\n        // any moment in time.\\n        require(participants_hash_to_channel_identifier[pair_hash] == 0);\\n        participants_hash_to_channel_identifier[pair_hash] = channel_identifier;\\n\\n        Channel storage channel = channels[channel_identifier];\\n\\n        // We always increase the channel counter, therefore no channel data can already exist,\\n        // corresponding to this channel_identifier. This check must never fail.\\n        assert(channel.settle_block_number == 0);\\n        assert(channel.state == ChannelState.NonExistent);\\n\\n        // Store channel information\\n        channel.settle_block_number = settle_timeout;\\n        channel.state = ChannelState.Opened;\\n\\n        emit ChannelOpened(\\n            channel_identifier,\\n            participant1,\\n            participant2,\\n            settle_timeout\\n        );\\n\\n        return channel_identifier;\\n    }\\n\\n    /// @notice Sets the channel participant total deposit value.\\n    /// Can be called by anyone.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant Channel participant whose deposit is being set\\n    /// @param total_deposit The total amount of tokens that the participant\\n    /// will have as a deposit\\n    /// @param partner Channel partner address, needed to compute the total\\n    /// channel deposit\\n    function setTotalDeposit(\\n        uint256 channel_identifier,\\n        address participant,\\n        uint256 total_deposit,\\n        address partner\\n    )\\n        public\\n        isSafe\\n        isOpen(channel_identifier)\\n    {\\n        require(channel_identifier == getChannelIdentifier(participant, partner));\\n        require(total_deposit > 0);\\n        require(total_deposit <= channel_participant_deposit_limit);\\n\\n        uint256 added_deposit;\\n        uint256 channel_deposit;\\n\\n        Channel storage channel = channels[channel_identifier];\\n        Participant storage participant_state = channel.participants[participant];\\n        Participant storage partner_state = channel.participants[partner];\\n\\n        // Calculate the actual amount of tokens that will be transferred\\n        added_deposit = total_deposit - participant_state.deposit;\\n\\n        // The actual amount of tokens that will be transferred must be > 0\\n        require(added_deposit > 0);\\n\\n        // Underflow check; we use <= because added_deposit == total_deposit for the first deposit\\n\\n        require(added_deposit <= total_deposit);\\n\\n        // This should never fail at this point. Added check for security, because we directly set\\n        // the participant_state.deposit = total_deposit, while we transfer `added_deposit` tokens\\n        assert(participant_state.deposit + added_deposit == total_deposit);\\n\\n        // Red Eyes release token network limit\\n        require(token.balanceOf(address(this)) + added_deposit <= token_network_deposit_limit);\\n\\n        // Update the participant's channel deposit\\n        participant_state.deposit = total_deposit;\\n\\n        // Calculate the entire channel deposit, to avoid overflow\\n        channel_deposit = participant_state.deposit + partner_state.deposit;\\n        // Overflow check\\n        require(channel_deposit >= participant_state.deposit);\\n\\n        emit ChannelNewDeposit(\\n            channel_identifier,\\n            participant,\\n            participant_state.deposit\\n        );\\n\\n        // Do the transfer\\n        require(token.transferFrom(msg.sender, address(this), added_deposit));\\n    }\\n\\n    /// @notice Allows `participant` to withdraw tokens from the channel that he\\n    /// has with `partner`, without closing it. Can be called by anyone. Can\\n    /// only be called once per each signed withdraw message\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant Channel participant, who will receive the withdrawn\\n    /// amount\\n    /// @param total_withdraw Total amount of tokens that are marked as\\n    /// withdrawn from the channel during the channel lifecycle\\n    /// @param participant_signature Participant's signature on the withdraw\\n    /// data\\n    /// @param partner_signature Partner's signature on the withdraw data\\n    function setTotalWithdraw(\\n        uint256 channel_identifier,\\n        address participant,\\n        uint256 total_withdraw,\\n        uint256 expiration_block,\\n        bytes calldata participant_signature,\\n        bytes calldata partner_signature\\n    )\\n        external\\n        isOpen(channel_identifier)\\n    {\\n        uint256 total_deposit;\\n        uint256 current_withdraw;\\n        address partner;\\n\\n        require(total_withdraw > 0);\\n        require(block.number < expiration_block);\\n\\n        // Authenticate both channel partners via their signatures.\\n        // `participant` is a part of the signed message, so given in the calldata.\\n        require(participant == TokenNetworkUtils.recoverAddressFromWithdrawMessage(\\n            chain_id,\\n            channel_identifier,\\n            participant,\\n            total_withdraw,\\n            expiration_block,\\n            participant_signature\\n        ));\\n        partner = TokenNetworkUtils.recoverAddressFromWithdrawMessage(\\n            chain_id,\\n            channel_identifier,\\n            participant,\\n            total_withdraw,\\n            expiration_block,\\n            partner_signature\\n        );\\n\\n        // Validate that authenticated partners and the channel identifier match\\n        require(channel_identifier == getChannelIdentifier(participant, partner));\\n\\n        // Read channel state after validating the function input\\n        Channel storage channel = channels[channel_identifier];\\n        Participant storage participant_state = channel.participants[participant];\\n        Participant storage partner_state = channel.participants[partner];\\n\\n        total_deposit = participant_state.deposit + partner_state.deposit;\\n\\n        // Entire withdrawn amount must not be bigger than the current channel deposit\\n        require((total_withdraw + partner_state.withdrawn_amount) <= total_deposit);\\n        require(total_withdraw <= (total_withdraw + partner_state.withdrawn_amount));\\n\\n        // Using the total_withdraw (monotonically increasing) in the signed\\n        // message ensures that we do not allow replay attack to happen, by\\n        // using the same withdraw proof twice.\\n        // Next two lines enforce the monotonicity of total_withdraw and check for an underflow:\\n        // (we use <= because current_withdraw == total_withdraw for the first withdraw)\\n        current_withdraw = total_withdraw - participant_state.withdrawn_amount;\\n        require(current_withdraw <= total_withdraw);\\n\\n        // The actual amount of tokens that will be transferred must be > 0 to disable the reuse of\\n        // withdraw messages completely.\\n        require(current_withdraw > 0);\\n\\n        // This should never fail at this point. Added check for security, because we directly set\\n        // the participant_state.withdrawn_amount = total_withdraw,\\n        // while we transfer `current_withdraw` tokens.\\n        assert(participant_state.withdrawn_amount + current_withdraw == total_withdraw);\\n\\n        emit ChannelWithdraw(\\n            channel_identifier,\\n            participant,\\n            total_withdraw\\n        );\\n\\n        // Do the state change and tokens transfer\\n        participant_state.withdrawn_amount = total_withdraw;\\n        require(token.transfer(participant, current_withdraw));\\n\\n        // This should never happen, as we have an overflow check in setTotalDeposit\\n        assert(total_deposit >= participant_state.deposit);\\n        assert(total_deposit >= partner_state.deposit);\\n\\n        // A withdraw should never happen if a participant already has a\\n        // balance proof in storage. This should never fail as we use isOpen.\\n        assert(participant_state.nonce == 0);\\n        assert(partner_state.nonce == 0);\\n\\n    }\\n\\n    /// @notice Close the channel defined by the two participant addresses.\\n    /// Anybody can call this function on behalf of a participant (called\\n    /// the closing participant), providing a balance proof signed by\\n    /// both parties. Callable only once\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param closing_participant Channel participant who closes the channel\\n    /// @param non_closing_participant Channel partner of the `closing_participant`,\\n    /// who provided the balance proof\\n    /// @param balance_hash Hash of (transferred_amount, locked_amount,\\n    /// locksroot)\\n    /// @param additional_hash Computed from the message. Used for message\\n    /// authentication\\n    /// @param nonce Strictly monotonic value used to order transfers\\n    /// @param non_closing_signature Non-closing participant's signature of the balance proof data\\n    /// @param closing_signature Closing participant's signature of the balance\\n    /// proof data\\n    function closeChannel(\\n        uint256 channel_identifier,\\n        address non_closing_participant,\\n        address closing_participant,\\n        // The next four arguments form a balance proof.\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes memory non_closing_signature,\\n        bytes memory closing_signature\\n    )\\n        public\\n        isOpen(channel_identifier)\\n    {\\n        require(channel_identifier == getChannelIdentifier(closing_participant, non_closing_participant));\\n\\n        address recovered_non_closing_participant_address;\\n\\n        Channel storage channel = channels[channel_identifier];\\n\\n        channel.state = ChannelState.Closed;\\n        channel.participants[closing_participant].is_the_closer = true;\\n\\n        // This is the block number at which the channel can be settled.\\n        channel.settle_block_number += uint256(block.number);\\n\\n        // The closing participant must have signed the balance proof.\\n        address recovered_closing_participant_address = TokenNetworkUtils.recoverAddressFromBalanceProofCounterSignature(\\n            MessageType.MessageTypeId.BalanceProof,\\n            chain_id,\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            non_closing_signature,\\n            closing_signature\\n        );\\n        require(closing_participant == recovered_closing_participant_address);\\n\\n        // Nonce 0 means that the closer never received a transfer, therefore\\n        // never received a balance proof, or he is intentionally not providing\\n        // the latest transfer, in which case the closing party is going to\\n        // lose the tokens that were transferred to him.\\n        if (nonce > 0) {\\n            recovered_non_closing_participant_address = TokenNetworkUtils.recoverAddressFromBalanceProof(\\n                chain_id,\\n                channel_identifier,\\n                balance_hash,\\n                nonce,\\n                additional_hash,\\n                non_closing_signature\\n            );\\n            // Signature must be from the channel partner\\n            require(non_closing_participant == recovered_non_closing_participant_address);\\n\\n            updateBalanceProofData(\\n                channel,\\n                recovered_non_closing_participant_address,\\n                nonce,\\n                balance_hash\\n            );\\n        }\\n\\n        emit ChannelClosed(channel_identifier, closing_participant, nonce, balance_hash);\\n    }\\n\\n    /// @notice Called on a closed channel, the function allows the non-closing\\n    /// participant to provide the last balance proof, which modifies the\\n    /// closing participant's state. Can be called multiple times by anyone.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param closing_participant Channel participant who closed the channel\\n    /// @param non_closing_participant Channel participant who needs to update\\n    /// the balance proof\\n    /// @param balance_hash Hash of (transferred_amount, locked_amount,\\n    /// locksroot)\\n    /// @param additional_hash Computed from the message. Used for message\\n    /// authentication\\n    /// @param nonce Strictly monotonic value used to order transfers\\n    /// @param closing_signature Closing participant's signature of the balance\\n    /// proof data\\n    /// @param non_closing_signature Non-closing participant signature of the\\n    /// balance proof data\\n    function updateNonClosingBalanceProof(\\n        uint256 channel_identifier,\\n        address closing_participant,\\n        address non_closing_participant,\\n        // The next four arguments form a balance proof\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes calldata closing_signature,\\n        bytes calldata non_closing_signature\\n    )\\n        external\\n    {\\n        require(channel_identifier == getChannelIdentifier(\\n            closing_participant,\\n            non_closing_participant\\n        ));\\n        require(balance_hash != bytes32(0x0));\\n        require(nonce > 0);\\n\\n        address recovered_non_closing_participant;\\n        address recovered_closing_participant;\\n\\n        Channel storage channel = channels[channel_identifier];\\n\\n        require(channel.state == ChannelState.Closed);\\n\\n        // Calling this function after the settlement window is forbidden to\\n        // fix the following race condition:\\n        //\\n        // 1 A badly configured node A, that doesn't have a monitoring service\\n        //   and is temporarily offline does not call update during the\\n        //   settlement window.\\n        // 2 The well behaved partner B, who called close, sees the\\n        //   settlement window is over and calls settle. At this point the B's\\n        //   balance proofs which should be provided by A is missing, so B will\\n        //   call settle with its balance proof zeroed out.\\n        // 3 A restarts and calls update, which will change B's balance\\n        //   proof.\\n        // 4 At this point, the transactions from 2 and 3 are racing, and one\\n        //   of them will fail.\\n        //\\n        // To avoid the above race condition, which would require special\\n        // handling on both nodes, the call to update is forbidden after the\\n        // settlement window. This does not affect safety, since we assume the\\n        // nodes are always properly configured and have a monitoring service\\n        // available to call update on the user's behalf.\\n        require(channel.settle_block_number >= block.number);\\n\\n        // We need the signature from the non-closing participant to allow\\n        // anyone to make this transaction. E.g. a monitoring service.\\n        recovered_non_closing_participant = TokenNetworkUtils.recoverAddressFromBalanceProofCounterSignature(\\n            MessageType.MessageTypeId.BalanceProofUpdate,\\n            chain_id,\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            closing_signature,\\n            non_closing_signature\\n        );\\n        require(non_closing_participant == recovered_non_closing_participant);\\n\\n        recovered_closing_participant = TokenNetworkUtils.recoverAddressFromBalanceProof(\\n            chain_id,\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            closing_signature\\n        );\\n        require(closing_participant == recovered_closing_participant);\\n\\n        Participant storage closing_participant_state = channel.participants[closing_participant];\\n        // Make sure the first signature is from the closing participant\\n        require(closing_participant_state.is_the_closer);\\n\\n        // Update the balance proof data for the closing_participant\\n        updateBalanceProofData(channel, closing_participant, nonce, balance_hash);\\n\\n        emit NonClosingBalanceProofUpdated(\\n            channel_identifier,\\n            closing_participant,\\n            nonce,\\n            balance_hash\\n        );\\n    }\\n\\n    /// @notice Settles the balance between the two parties. Note that arguments\\n    /// order counts: `participant1_transferred_amount +\\n    /// participant1_locked_amount` <= `participant2_transferred_amount +\\n    /// participant2_locked_amount`\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant1 Channel participant\\n    /// @param participant1_transferred_amount The latest known amount of tokens\\n    /// transferred from `participant1` to `participant2`\\n    /// @param participant1_locked_amount Amount of tokens owed by\\n    /// `participant1` to `participant2`, contained in locked transfers that\\n    /// will be retrieved by calling `unlock` after the channel is settled\\n    /// @param participant1_locksroot The latest known hash of the\\n    /// pending hash-time locks of `participant1`, used to validate the unlocked\\n    /// proofs. If no balance_hash has been submitted, locksroot is ignored\\n    /// @param participant2 Other channel participant\\n    /// @param participant2_transferred_amount The latest known amount of tokens\\n    /// transferred from `participant2` to `participant1`\\n    /// @param participant2_locked_amount Amount of tokens owed by\\n    /// `participant2` to `participant1`, contained in locked transfers that\\n    /// will be retrieved by calling `unlock` after the channel is settled\\n    /// @param participant2_locksroot The latest known hash of the\\n    /// pending hash-time locks of `participant2`, used to validate the unlocked\\n    /// proofs. If no balance_hash has been submitted, locksroot is ignored\\n    function settleChannel(\\n        uint256 channel_identifier,\\n        address participant1,\\n        uint256 participant1_transferred_amount,\\n        uint256 participant1_locked_amount,\\n        bytes32 participant1_locksroot,\\n        address participant2,\\n        uint256 participant2_transferred_amount,\\n        uint256 participant2_locked_amount,\\n        bytes32 participant2_locksroot\\n    )\\n        public\\n    {\\n        settleChannel2(\\n            channel_identifier,\\n            SettleInput({\\n                participant: participant1,\\n                transferred_amount: participant1_transferred_amount,\\n                locked_amount: participant1_locked_amount,\\n                locksroot: participant1_locksroot\\n            }),\\n            SettleInput({\\n                participant: participant2,\\n                transferred_amount: participant2_transferred_amount,\\n                locked_amount: participant2_locked_amount,\\n                locksroot: participant2_locksroot\\n            })\\n        );\\n    }\\n\\n    function settleChannel2(\\n        uint256 channel_identifier,\\n        SettleInput memory participant1_settlement,\\n        SettleInput memory participant2_settlement\\n    )\\n        public\\n    {\\n        // There are several requirements that this function MUST enforce:\\n        // - it MUST never fail; therefore, any overflows or underflows must be\\n        // handled gracefully\\n        // - it MUST ensure that if participants use the latest valid balance proofs,\\n        // provided by the official Raiden client, the participants will be able\\n        // to receive correct final balances at the end of the channel lifecycle\\n        // - it MUST ensure that the participants cannot cheat by providing an\\n        // old, valid balance proof of their partner; meaning that their partner MUST\\n        // receive at least the amount of tokens that he would have received if\\n        // the latest valid balance proofs are used.\\n        // - the contract cannot determine if a balance proof is invalid (values\\n        // are not within the constraints enforced by the official Raiden client),\\n        // therefore it cannot ensure correctness. Users MUST use the official\\n        // Raiden clients for signing balance proofs.\\n\\n        address participant1 = participant1_settlement.participant;\\n        address participant2 = participant2_settlement.participant;\\n        require(channel_identifier == getChannelIdentifier(participant1, participant2));\\n\\n        bytes32 pair_hash;\\n\\n        pair_hash = getParticipantsHash(participant1, participant2);\\n        Channel storage channel = channels[channel_identifier];\\n\\n        require(channel.state == ChannelState.Closed);\\n\\n        // Settlement window must be over\\n        require(channel.settle_block_number < block.number);\\n\\n        Participant storage participant1_state = channel.participants[participant1];\\n        Participant storage participant2_state = channel.participants[participant2];\\n\\n        require(verifyBalanceHashData(\\n            participant1_state,\\n            participant1_settlement\\n        ));\\n\\n        require(verifyBalanceHashData(\\n            participant2_state,\\n            participant2_settlement\\n        ));\\n\\n        // We are calculating the final token amounts that need to be\\n        // transferred to the participants now and the amount of tokens that\\n        // need to remain locked in the contract. These tokens can be unlocked\\n        // by calling `unlock`.\\n        // participant1_transferred_amount = the amount of tokens that\\n        //   participant1 will receive in this transaction.\\n        // participant2_transferred_amount = the amount of tokens that\\n        //   participant2 will receive in this transaction.\\n        // participant1_locked_amount = the amount of tokens remaining in the\\n        //   contract, representing pending transfers from participant1 to participant2.\\n        // participant2_locked_amount = the amount of tokens remaining in the\\n        //   contract, representing pending transfers from participant2 to participant1.\\n        // We are reusing variables due to the local variables number limit.\\n        // For better readability this can be refactored further.\\n        (\\n            participant1_settlement.transferred_amount,\\n            participant2_settlement.transferred_amount,\\n            participant1_settlement.locked_amount,\\n            participant2_settlement.locked_amount\\n        ) = getSettleTransferAmounts(\\n            participant1_state,\\n            participant1_settlement.transferred_amount,\\n            participant1_settlement.locked_amount,\\n            participant2_state,\\n            participant2_settlement.transferred_amount,\\n            participant2_settlement.locked_amount\\n        );\\n\\n        // Remove the channel data from storage\\n        delete channel.participants[participant1];\\n        delete channel.participants[participant2];\\n        delete channels[channel_identifier];\\n\\n        // Remove the pair's channel counter\\n        delete participants_hash_to_channel_identifier[pair_hash];\\n\\n        // Store balance data needed for `unlock`, including the calculated\\n        // locked amounts remaining in the contract.\\n        storeUnlockData(\\n            channel_identifier,\\n            participant1_settlement,\\n            participant2\\n        );\\n        storeUnlockData(\\n            channel_identifier,\\n            participant2_settlement,\\n            participant1\\n        );\\n\\n        emit ChannelSettled(\\n            channel_identifier,\\n            participant1_settlement.transferred_amount,\\n            participant1_settlement.locksroot,\\n            participant2_settlement.transferred_amount,\\n            participant2_settlement.locksroot\\n        );\\n\\n        // Do the actual token transfers\\n        if (participant1_settlement.transferred_amount > 0) {\\n            require(token.transfer(participant1, participant1_settlement.transferred_amount));\\n        }\\n\\n        if (participant2_settlement.transferred_amount > 0) {\\n            require(token.transfer(participant2, participant2_settlement.transferred_amount));\\n        }\\n    }\\n\\n    /// @notice Unlocks all pending off-chain transfers from `sender` to\\n    /// `receiver` and sends the locked tokens corresponding to locks with\\n    /// secrets registered on-chain to the `receiver`. Locked tokens\\n    /// corresponding to locks where the secret was not revealed on-chain will\\n    /// return to the `sender`. Anyone can call unlock.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param receiver Address who will receive the claimable unlocked\\n    /// tokens\\n    /// @param sender Address who sent the pending transfers and will receive\\n    /// the unclaimable unlocked tokens\\n    /// @param locks All pending locks concatenated in order of creation\\n    /// that `sender` sent to `receiver`\\n    function unlock(\\n        uint256 channel_identifier,\\n        address receiver,\\n        address sender,\\n        bytes memory locks\\n    )\\n        public\\n    {\\n        // Channel represented by channel_identifier must be settled and\\n        // channel data deleted\\n        require(channel_identifier != getChannelIdentifier(receiver, sender));\\n\\n        // After the channel is settled the storage is cleared, therefore the\\n        // value will be NonExistent and not Settled. The value Settled is used\\n        // for the external APIs\\n        require(channels[channel_identifier].state == ChannelState.NonExistent);\\n\\n        bytes32 unlock_key;\\n        bytes32 computed_locksroot;\\n        uint256 unlocked_amount;\\n        uint256 locked_amount;\\n        uint256 returned_tokens;\\n\\n        // Calculate the locksroot for the pending transfers and the amount of\\n        // tokens corresponding to the locked transfers with secrets revealed\\n        // on chain.\\n        (computed_locksroot, unlocked_amount) = getHashAndUnlockedAmount(\\n            locks\\n        );\\n\\n        // The sender must have a non-empty locksroot on-chain that must be\\n        // the same as the computed locksroot.\\n        // Get the amount of tokens that have been left in the contract, to\\n        // account for the pending transfers `sender` -> `receiver`.\\n        unlock_key = getUnlockIdentifier(channel_identifier, sender, receiver);\\n        UnlockData storage unlock_data = unlock_identifier_to_unlock_data[unlock_key];\\n        locked_amount = unlock_data.locked_amount;\\n\\n        // Locksroot must be the same as the computed locksroot\\n        require(unlock_data.locksroot == computed_locksroot);\\n\\n        // There are no pending transfers if the locked_amount is 0.\\n        // Transaction must fail\\n        require(locked_amount > 0);\\n\\n        // Make sure we don't transfer more tokens than previously reserved in\\n        // the smart contract.\\n        unlocked_amount = TokenNetworkUtils.min(unlocked_amount, locked_amount);\\n\\n        // Transfer the rest of the tokens back to the sender\\n        returned_tokens = locked_amount - unlocked_amount;\\n\\n        // Remove sender's unlock data\\n        delete unlock_identifier_to_unlock_data[unlock_key];\\n\\n        emit ChannelUnlocked(\\n            channel_identifier,\\n            receiver,\\n            sender,\\n            computed_locksroot,\\n            unlocked_amount,\\n            returned_tokens\\n        );\\n\\n        // Transfer the unlocked tokens to the receiver. unlocked_amount can\\n        // be 0\\n        if (unlocked_amount > 0) {\\n            require(token.transfer(receiver, unlocked_amount));\\n        }\\n\\n        // Transfer the rest of the tokens back to the sender\\n        if (returned_tokens > 0) {\\n            require(token.transfer(sender, returned_tokens));\\n        }\\n\\n        // At this point, this should always be true\\n        assert(locked_amount >= returned_tokens);\\n        assert(locked_amount >= unlocked_amount);\\n    }\\n\\n    /* /// @notice Cooperatively settles the balances between the two channel\\n    /// participants and transfers the agreed upon token amounts to the\\n    /// participants. After this the channel lifecycle has ended and no more\\n    /// operations can be done on it.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant1_address Address of channel participant\\n    /// @param participant1_balance Amount of tokens that `participant1_address`\\n    /// must receive when the channel is settled and removed\\n    /// @param participant2_address Address of the other channel participant\\n    /// @param participant2_balance Amount of tokens that `participant2_address`\\n    /// must receive when the channel is settled and removed\\n    /// @param participant1_signature Signature of `participant1_address` on the\\n    /// cooperative settle message\\n    /// @param participant2_signature Signature of `participant2_address` on the\\n    /// cooperative settle message\\n    function cooperativeSettle(\\n        uint256 channel_identifier,\\n        address participant1_address,\\n        uint256 participant1_balance,\\n        address participant2_address,\\n        uint256 participant2_balance,\\n        bytes participant1_signature,\\n        bytes participant2_signature\\n    )\\n        public\\n    {\\n        require(channel_identifier == getChannelIdentifier(\\n            participant1_address,\\n            participant2_address\\n        ));\\n        bytes32 pair_hash;\\n        address participant1;\\n        address participant2;\\n        uint256 total_available_deposit;\\n\\n        pair_hash = getParticipantsHash(participant1_address, participant2_address);\\n        Channel storage channel = channels[channel_identifier];\\n\\n        require(channel.state == ChannelState.Opened);\\n\\n        participant1 = TokenNetworkUtils.recoverAddressFromCooperativeSettleSignature(\\n            channel_identifier,\\n            participant1_address,\\n            participant1_balance,\\n            participant2_address,\\n            participant2_balance,\\n            participant1_signature\\n        );\\n        // The provided address must be the same as the recovered one\\n        require(participant1 == participant1_address);\\n\\n        participant2 = TokenNetworkUtils.recoverAddressFromCooperativeSettleSignature(\\n            channel_identifier,\\n            participant1_address,\\n            participant1_balance,\\n            participant2_address,\\n            participant2_balance,\\n            participant2_signature\\n        );\\n        // The provided address must be the same as the recovered one\\n        require(participant2 == participant2_address);\\n\\n        Participant storage participant1_state = channel.participants[participant1];\\n        Participant storage participant2_state = channel.participants[participant2];\\n\\n        total_available_deposit = getChannelAvailableDeposit(\\n            participant1_state,\\n            participant2_state\\n        );\\n        // The sum of the provided balances must be equal to the total\\n        // available deposit\\n        require(total_available_deposit == (participant1_balance + participant2_balance));\\n        // Overflow check for the balances addition from the above check.\\n        // This overflow should never happen if the token.transfer function is implemented\\n        // correctly. We do not control the token implementation, therefore we add this\\n        // check for safety.\\n        require(participant1_balance <= participant1_balance + participant2_balance);\\n\\n        // Remove channel data from storage before doing the token transfers\\n        delete channel.participants[participant1];\\n        delete channel.participants[participant2];\\n        delete channels[channel_identifier];\\n\\n        // Remove the pair's channel counter\\n        delete participants_hash_to_channel_identifier[pair_hash];\\n\\n        emit ChannelSettled(channel_identifier, participant1_balance, participant2_balance);\\n\\n        // Do the token transfers\\n        if (participant1_balance > 0) {\\n            require(token.transfer(participant1, participant1_balance));\\n        }\\n\\n        if (participant2_balance > 0) {\\n            require(token.transfer(participant2, participant2_balance));\\n        }\\n    } */\\n\\n    /// @notice Returns the unique identifier for the channel given by the\\n    /// contract\\n    /// @param participant Address of a channel participant\\n    /// @param partner Address of the other channel participant\\n    /// @return Unique identifier for the channel. It can be 0 if channel does\\n    /// not exist\\n    function getChannelIdentifier(address participant, address partner)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(participant != address(0x0));\\n        require(partner != address(0x0));\\n        require(participant != partner);\\n\\n        bytes32 pair_hash = getParticipantsHash(participant, partner);\\n        return participants_hash_to_channel_identifier[pair_hash];\\n    }\\n\\n    /// @dev Returns the channel specific data.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant1 Address of a channel participant\\n    /// @param participant2 Address of the other channel participant\\n    /// @return Channel settle_block_number and state\\n    /// @notice The contract cannot really distinguish Settled and Removed\\n    /// states, especially when wrong participants are given as input.\\n    /// The contract does not remember the participants of the channel\\n    function getChannelInfo(\\n        uint256 channel_identifier,\\n        address participant1,\\n        address participant2\\n    )\\n        external\\n        view\\n        returns (uint256, ChannelState)\\n    {\\n        bytes32 unlock_key1;\\n        bytes32 unlock_key2;\\n\\n        Channel storage channel = channels[channel_identifier];\\n        ChannelState state = channel.state;  // This must **not** update the storage\\n\\n        if (state == ChannelState.NonExistent &&\\n            channel_identifier > 0 &&\\n            channel_identifier <= channel_counter\\n        ) {\\n            // The channel has been settled, channel data is removed Therefore,\\n            // the channel state in storage is actually `0`, or `NonExistent`\\n            // However, for this view function, we return `Settled`, in order\\n            // to provide a consistent external API\\n            state = ChannelState.Settled;\\n\\n            // We might still have data stored for future unlock operations\\n            // Only if we do not, we can consider the channel as `Removed`\\n            unlock_key1 = getUnlockIdentifier(channel_identifier, participant1, participant2);\\n            UnlockData storage unlock_data1 = unlock_identifier_to_unlock_data[unlock_key1];\\n\\n            unlock_key2 = getUnlockIdentifier(channel_identifier, participant2, participant1);\\n            UnlockData storage unlock_data2 = unlock_identifier_to_unlock_data[unlock_key2];\\n\\n            if (unlock_data1.locked_amount == 0 && unlock_data2.locked_amount == 0) {\\n                state = ChannelState.Removed;\\n            }\\n        }\\n\\n        return (\\n            channel.settle_block_number,\\n            state\\n        );\\n    }\\n\\n    /// @dev Returns the channel specific data.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant Address of the channel participant whose data will be\\n    /// returned\\n    /// @param partner Address of the channel partner\\n    /// @return Participant's deposit, withdrawn_amount, whether the participant\\n    /// has called `closeChannel` or not, balance_hash, nonce, locksroot,\\n    /// locked_amount\\n    function getChannelParticipantInfo(\\n            uint256 channel_identifier,\\n            address participant,\\n            address partner\\n    )\\n        external\\n        view\\n        returns (uint256, uint256, bool, bytes32, uint256, bytes32, uint256)\\n    {\\n        bytes32 unlock_key;\\n\\n        Participant storage participant_state = channels[channel_identifier].participants[\\n            participant\\n        ];\\n        unlock_key = getUnlockIdentifier(channel_identifier, participant, partner);\\n        UnlockData storage unlock_data = unlock_identifier_to_unlock_data[unlock_key];\\n\\n        return (\\n            participant_state.deposit,\\n            participant_state.withdrawn_amount,\\n            participant_state.is_the_closer,\\n            participant_state.balance_hash,\\n            participant_state.nonce,\\n            unlock_data.locksroot,\\n            unlock_data.locked_amount\\n        );\\n    }\\n\\n    /// @dev Get the hash of the participant addresses, ordered\\n    /// lexicographically\\n    /// @param participant Address of a channel participant\\n    /// @param partner Address of the other channel participant\\n    function getParticipantsHash(address participant, address partner)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        require(participant != address(0x0));\\n        require(partner != address(0x0));\\n        require(participant != partner);\\n\\n        if (participant < partner) {\\n            return keccak256(abi.encodePacked(participant, partner));\\n        } else {\\n            return keccak256(abi.encodePacked(partner, participant));\\n        }\\n    }\\n\\n    /// @dev Get the hash of the channel identifier and the participant\\n    /// addresses (whose ordering matters). The hash might be useful for\\n    /// the receiver to look up the appropriate UnlockData to claim\\n    /// @param channel_identifier Identifier for the channel which the\\n    /// UnlockData is about\\n    /// @param sender Sender of the pending transfers that the UnlockData\\n    /// represents\\n    /// @param receiver Receiver of the pending transfers that the UnlockData\\n    /// represents\\n    function getUnlockIdentifier(\\n        uint256 channel_identifier,\\n        address sender,\\n        address receiver\\n    )\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        require(sender != receiver);\\n        return keccak256(abi.encodePacked(channel_identifier, sender, receiver));\\n    }\\n\\n    function updateBalanceProofData(\\n        Channel storage channel,\\n        address participant,\\n        uint256 nonce,\\n        bytes32 balance_hash\\n    )\\n        internal\\n    {\\n        Participant storage participant_state = channel.participants[participant];\\n\\n        // Multiple calls to updateNonClosingBalanceProof can be made and we\\n        // need to store the last known balance proof data.\\n        // This line prevents Monitoring Services from getting rewards\\n        // again and again using the same reward proof.\\n        require(nonce > participant_state.nonce);\\n\\n        participant_state.nonce = nonce;\\n        participant_state.balance_hash = balance_hash;\\n    }\\n\\n    function storeUnlockData(\\n        uint256 channel_identifier,\\n        SettleInput memory settle_input,\\n        address receiver\\n    )\\n        internal\\n    {\\n        // If there are transfers to unlock, store the locksroot and total\\n        // amount of tokens\\n        if (settle_input.locked_amount == 0) {\\n            return;\\n        }\\n\\n        bytes32 key = getUnlockIdentifier(channel_identifier, settle_input.participant, receiver);\\n        UnlockData storage unlock_data = unlock_identifier_to_unlock_data[key];\\n        unlock_data.locksroot = settle_input.locksroot;\\n        unlock_data.locked_amount = settle_input.locked_amount;\\n    }\\n\\n    function getChannelAvailableDeposit(\\n        Participant storage participant1_state,\\n        Participant storage participant2_state\\n    )\\n        internal\\n        view\\n        returns (uint256 total_available_deposit)\\n    {\\n        total_available_deposit = (\\n            participant1_state.deposit +\\n            participant2_state.deposit -\\n            participant1_state.withdrawn_amount -\\n            participant2_state.withdrawn_amount\\n        );\\n    }\\n\\n    /// @dev Function that calculates the amount of tokens that the participants\\n    /// will receive when calling settleChannel.\\n    /// Check https://github.com/raiden-network/raiden-contracts/issues/188 for the settlement\\n    /// algorithm analysis and explanations.\\n    function getSettleTransferAmounts(\\n        Participant storage participant1_state,\\n        uint256 participant1_transferred_amount,\\n        uint256 participant1_locked_amount,\\n        Participant storage participant2_state,\\n        uint256 participant2_transferred_amount,\\n        uint256 participant2_locked_amount\\n    )\\n        private\\n        view\\n        returns (uint256, uint256, uint256, uint256)\\n    {\\n        // The scope of this function is to compute the settlement amounts that\\n        // the two channel participants will receive when calling settleChannel\\n        // and the locked amounts that remain in the contract, to account for\\n        // the pending, not finalized transfers, that will be received by the\\n        // participants when calling `unlock`.\\n\\n        // The amount of tokens that participant1 MUST receive at the end of\\n        // the channel lifecycle (after settleChannel and unlock) is:\\n        // B1 = D1 - W1 + T2 - T1 + Lc2 - Lc1\\n\\n        // The amount of tokens that participant2 MUST receive at the end of\\n        // the channel lifecycle (after settleChannel and unlock) is:\\n        // B2 = D2 - W2 + T1 - T2 + Lc1 - Lc2\\n\\n        // B1 + B2 = TAD = D1 + D2 - W1 - W2\\n        // TAD = total available deposit at settlement time\\n\\n        // L1 = Lc1 + Lu1\\n        // L2 = Lc2 + Lu2\\n\\n        // where:\\n        // B1 = final balance of participant1 after the channel is removed\\n        // D1 = total amount deposited by participant1 into the channel\\n        // W1 = total amount withdrawn by participant1 from the channel\\n        // T2 = total amount transferred by participant2 to participant1 (finalized transfers)\\n        // T1 = total amount transferred by participant1 to participant2 (finalized transfers)\\n        // L1 = total amount of tokens locked in pending transfers, sent by\\n        //   participant1 to participant2\\n        // L2 = total amount of tokens locked in pending transfers, sent by\\n        //   participant2 to participant1\\n        // Lc2 = the amount that can be claimed by participant1 from the pending\\n        //   transfers (that have not been finalized off-chain), sent by\\n        //   participant2 to participant1. These are part of the locked amount\\n        //   value from participant2's balance proof. They are considered claimed\\n        //   if the secret corresponding to these locked transfers was registered\\n        //   on-chain, in the SecretRegistry contract, before the lock's expiration.\\n        // Lu1 = unclaimable locked amount from L1\\n        // Lc1 = the amount that can be claimed by participant2 from the pending\\n        //   transfers (that have not been finalized off-chain),\\n        //   sent by participant1 to participant2\\n        // Lu2 = unclaimable locked amount from L2\\n\\n        // Notes:\\n        // 1) The unclaimble tokens from a locked amount will return to the sender.\\n        // At the time of calling settleChannel, the TokenNetwork contract does\\n        // not know what locked amounts are claimable or unclaimable.\\n        // 2) There are some Solidity constraints that make the calculations\\n        // more difficult: attention to overflows and underflows, that MUST be\\n        // handled without throwing.\\n\\n        // Cases that require attention:\\n        // case1. If participant1 does NOT provide a balance proof or provides\\n        // an old balance proof.  participant2_transferred_amount can be [0,\\n        // real_participant2_transferred_amount) We MUST NOT punish\\n        // participant2.\\n        // case2. If participant2 does NOT provide a balance proof or provides\\n        // an old balance proof.  participant1_transferred_amount can be [0,\\n        // real_participant1_transferred_amount) We MUST NOT punish\\n        // participant1.\\n        // case3. If neither participants provide a balance proof, we just\\n        // subtract their withdrawn amounts from their deposits.\\n\\n        // This is why, the algorithm implemented in Solidity is:\\n        // (explained at each step, below)\\n        // RmaxP1 = (T2 + L2) - (T1 + L1) + D1 - W1\\n        // RmaxP1 = min(TAD, RmaxP1)\\n        // RmaxP2 = TAD - RmaxP1\\n        // SL2 = min(RmaxP1, L2)\\n        // S1 = RmaxP1 - SL2\\n        // SL1 = min(RmaxP2, L1)\\n        // S2 = RmaxP2 - SL1\\n\\n        // where:\\n        // RmaxP1 = due to possible over/underflows that only appear when using\\n        //    old balance proofs & the fact that settlement balance calculation\\n        //    is symmetric (we can calculate either RmaxP1 and RmaxP2 first,\\n        //    order does not affect result), this is a convention used to determine\\n        //    the maximum receivable amount of participant1 at settlement time\\n        // S1 = amount received by participant1 when calling settleChannel\\n        // SL1 = the maximum amount from L1 that can be locked in the\\n        //   TokenNetwork contract when calling settleChannel (due to overflows\\n        //   that only happen when using old balance proofs)\\n        // S2 = amount received by participant2 when calling settleChannel\\n        // SL2 = the maximum amount from L2 that can be locked in the\\n        //   TokenNetwork contract when calling settleChannel (due to overflows\\n        //   that only happen when using old balance proofs)\\n\\n        uint256 participant1_amount;\\n        uint256 participant2_amount;\\n        uint256 total_available_deposit;\\n\\n        SettlementData memory participant1_settlement;\\n        SettlementData memory participant2_settlement;\\n\\n        participant1_settlement.deposit = participant1_state.deposit;\\n        participant1_settlement.withdrawn = participant1_state.withdrawn_amount;\\n        participant1_settlement.transferred = participant1_transferred_amount;\\n        participant1_settlement.locked = participant1_locked_amount;\\n\\n        participant2_settlement.deposit = participant2_state.deposit;\\n        participant2_settlement.withdrawn = participant2_state.withdrawn_amount;\\n        participant2_settlement.transferred = participant2_transferred_amount;\\n        participant2_settlement.locked = participant2_locked_amount;\\n\\n        // TAD = D1 + D2 - W1 - W2 = total available deposit at settlement time\\n        total_available_deposit = getChannelAvailableDeposit(\\n            participant1_state,\\n            participant2_state\\n        );\\n\\n        // RmaxP1 = (T2 + L2) - (T1 + L1) + D1 - W1\\n        // This amount is the maximum possible amount that participant1 can\\n        // receive at settlement time and also contains the entire locked amount\\n        //  of the pending transfers from participant2 to participant1.\\n        participant1_amount = getMaxPossibleReceivableAmount(\\n            participant1_settlement,\\n            participant2_settlement\\n        );\\n\\n        // RmaxP1 = min(TAD, RmaxP1)\\n        // We need to bound this to the available channel deposit in order to\\n        // not send tokens from other channels. The only case where TAD is\\n        // smaller than RmaxP1 is when at least one balance proof is old.\\n        participant1_amount = TokenNetworkUtils.min(participant1_amount, total_available_deposit);\\n\\n        // RmaxP2 = TAD - RmaxP1\\n        // Now it is safe to subtract without underflow\\n        participant2_amount = total_available_deposit - participant1_amount;\\n\\n        // SL2 = min(RmaxP1, L2)\\n        // S1 = RmaxP1 - SL2\\n        // Both operations are done by failsafe_subtract\\n        // We take out participant2's pending transfers locked amount, bounding\\n        // it by the maximum receivable amount of participant1\\n        (participant1_amount, participant2_locked_amount) = TokenNetworkUtils.failsafe_subtract(\\n            participant1_amount,\\n            participant2_locked_amount\\n        );\\n\\n        // SL1 = min(RmaxP2, L1)\\n        // S2 = RmaxP2 - SL1\\n        // Both operations are done by failsafe_subtract\\n        // We take out participant1's pending transfers locked amount, bounding\\n        // it by the maximum receivable amount of participant2\\n        (participant2_amount, participant1_locked_amount) = TokenNetworkUtils.failsafe_subtract(\\n            participant2_amount,\\n            participant1_locked_amount\\n        );\\n\\n        // This should never throw:\\n        // S1 and S2 MUST be smaller than TAD\\n        assert(participant1_amount <= total_available_deposit);\\n        assert(participant2_amount <= total_available_deposit);\\n        // S1 + S2 + SL1 + SL2 == TAD\\n        assert(total_available_deposit == (\\n            participant1_amount +\\n            participant2_amount +\\n            participant1_locked_amount +\\n            participant2_locked_amount\\n        ));\\n\\n        return (\\n            participant1_amount,\\n            participant2_amount,\\n            participant1_locked_amount,\\n            participant2_locked_amount\\n        );\\n    }\\n\\n    function getMaxPossibleReceivableAmount(\\n        SettlementData memory participant1_settlement,\\n        SettlementData memory participant2_settlement\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return TokenNetworkUtils.getMaxPossibleReceivableAmount(\\n            participant1_settlement.deposit,\\n            participant1_settlement.withdrawn,\\n            participant1_settlement.transferred,\\n            participant1_settlement.locked,\\n            participant2_settlement.deposit,\\n            participant2_settlement.withdrawn,\\n            participant2_settlement.transferred,\\n            participant2_settlement.locked\\n        );\\n    }\\n\\n    function verifyBalanceHashData(\\n        Participant storage participant,\\n        SettleInput memory settle_input\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // When no balance proof has been provided, we need to check this\\n        // separately because hashing values of 0 outputs a value != 0\\n        if (participant.balance_hash == 0 &&\\n            settle_input.transferred_amount == 0 &&\\n            settle_input.locked_amount == 0\\n            /* locksroot is ignored. */\\n        ) {\\n            return true;\\n        }\\n\\n        // Make sure the hash of the provided state is the same as the stored\\n        // balance_hash\\n        return participant.balance_hash == keccak256(abi.encodePacked(\\n            settle_input.transferred_amount,\\n            settle_input.locked_amount,\\n            settle_input.locksroot\\n        ));\\n    }\\n\\n    /// @dev Calculates the hash of the pending transfers data and\\n    /// calculates the amount of tokens that can be unlocked because the secret\\n    /// was registered on-chain.\\n    function getHashAndUnlockedAmount(bytes memory locks)\\n        internal\\n        view\\n        returns (bytes32, uint256)\\n    {\\n        uint256 length = locks.length;\\n\\n        // each lock has this form:\\n        // (locked_amount || expiration_block || secrethash) = 3 * 32 bytes\\n        require(length % 96 == 0);\\n\\n        uint256 i;\\n        uint256 total_unlocked_amount;\\n        uint256 unlocked_amount;\\n        bytes32 total_hash;\\n\\n        for (i = 32; i < length; i += 96) {\\n            unlocked_amount = getLockedAmountFromLock(locks, i);\\n            total_unlocked_amount += unlocked_amount;\\n        }\\n\\n        total_hash = keccak256(locks);\\n\\n        return (total_hash, total_unlocked_amount);\\n    }\\n\\n    function getLockedAmountFromLock(bytes memory locks, uint256 offset)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 expiration_block;\\n        uint256 locked_amount;\\n        uint256 reveal_block;\\n        bytes32 secrethash;\\n\\n        if (locks.length <= offset) {\\n            return 0;\\n        }\\n\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            expiration_block := mload(add(locks, offset))\\n            locked_amount := mload(add(locks, add(offset, 32)))\\n            secrethash := mload(add(locks, add(offset, 64)))\\n        }\\n\\n        // Check if the lock's secret was revealed in the SecretRegistry The\\n        // secret must have been revealed in the SecretRegistry contract before\\n        // the lock's expiration_block in order for the hash time lock transfer\\n        // to be successful.\\n        reveal_block = secret_registry.getSecretRevealBlockHeight(secrethash);\\n        if (reveal_block == 0 || expiration_block <= reveal_block) {\\n            locked_amount = 0;\\n        }\\n\\n        return locked_amount;\\n    }\\n}\\n\",\"keccak256\":\"0xef9c79f097264092c65b322d121b8ffc6aeb2d7302d47c438fe1fc4bc53f1ad5\",\"license\":\"MIT\"},\"data/source/raiden/TokenNetworkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nimport \\\"./Utils.sol\\\";\\nimport \\\"./Token.sol\\\";\\nimport \\\"./TokenNetwork.sol\\\";\\n\\n\\n/// @title TokenNetworkRegistry\\n/// @notice The TokenNetwork Registry deploys new TokenNetwork contracts for the\\n/// Raiden Network protocol.\\ncontract TokenNetworkRegistry is Utils {\\n    address public secret_registry_address;\\n    uint256 public chain_id;\\n    uint256 public settlement_timeout_min;\\n    uint256 public settlement_timeout_max;\\n    uint256 public max_token_networks;\\n\\n    // Only for the limited Red Eyes release\\n    address public deprecation_executor;\\n    uint256 public token_network_created = 0;\\n\\n    // Token address => TokenNetwork address\\n    mapping(address => address) public token_to_token_networks;\\n\\n    event TokenNetworkCreated(address indexed token_address, address indexed token_network_address);\\n\\n    modifier canCreateTokenNetwork() {\\n        require(token_network_created < max_token_networks, \\\"registry full\\\");\\n        _;\\n    }\\n\\n    /// @param _secret_registry_address The address of SecretRegistry that's used by all\\n    /// TokenNetworks created by this contract\\n    /// @param _chain_id EIP-155 Chain-ID of the chain where this contract is deployed\\n    /// @param _settlement_timeout_min The shortest settlement period (in number of blocks)\\n    /// that can be chosen at the channel opening\\n    /// @param _settlement_timeout_max The longest settlement period (in number of blocks)\\n    /// that can be chosen at the channel opening\\n    /// @param _max_token_networks the number of tokens that can be registered\\n    /// MAX_UINT256 means no limits\\n    constructor(\\n        address _secret_registry_address,\\n        uint256 _chain_id,\\n        uint256 _settlement_timeout_min,\\n        uint256 _settlement_timeout_max,\\n        uint256 _max_token_networks\\n    ) {\\n        require(_chain_id > 0);\\n        require(_settlement_timeout_min > 0);\\n        require(_settlement_timeout_max > 0);\\n        require(_settlement_timeout_max > _settlement_timeout_min);\\n        require(_secret_registry_address != address(0x0));\\n        require(contractExists(_secret_registry_address));\\n        require(_max_token_networks > 0);\\n        secret_registry_address = _secret_registry_address;\\n        chain_id = _chain_id;\\n        settlement_timeout_min = _settlement_timeout_min;\\n        settlement_timeout_max = _settlement_timeout_max;\\n        max_token_networks = _max_token_networks;\\n\\n        deprecation_executor = msg.sender;\\n    }\\n\\n    /// @notice Deploy a new TokenNetwork contract for the Token deployed at\\n    /// `_token_address`\\n    /// @param _token_address Ethereum address of an already deployed token, to\\n    /// be used in the new TokenNetwork contract\\n    function createERC20TokenNetwork(\\n        address _token_address,\\n        uint256 _channel_participant_deposit_limit,\\n        uint256 _token_network_deposit_limit\\n    )\\n        external\\n        canCreateTokenNetwork\\n        returns (address token_network_address)\\n    {\\n        require(token_to_token_networks[_token_address] == address(0x0));\\n\\n        // We limit the number of token networks to 1 for the Bug Bounty release\\n        token_network_created = token_network_created + 1;\\n\\n        TokenNetwork token_network;\\n\\n        // Token contract checks are in the corresponding TokenNetwork contract\\n        token_network = new TokenNetwork(\\n            _token_address,\\n            secret_registry_address,\\n            chain_id,\\n            settlement_timeout_min,\\n            settlement_timeout_max,\\n            deprecation_executor,\\n            _channel_participant_deposit_limit,\\n            _token_network_deposit_limit\\n        );\\n\\n        token_network_address = address(token_network);\\n\\n        token_to_token_networks[_token_address] = token_network_address;\\n        emit TokenNetworkCreated(_token_address, token_network_address);\\n\\n        return token_network_address;\\n    }\\n}\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\",\"keccak256\":\"0x6ac2b18eec420639447a0d7879094357e15e398d9f222c48fe6701a7cde01a5c\",\"license\":\"MIT\"},\"data/source/raiden/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @title Utils\\n/// @notice Utils contract for various helpers used by the Raiden Network smart\\n/// contracts.\\ncontract Utils {\\n    /// @notice Check if a contract exists\\n    /// @param contract_address The address to check whether a contract is\\n    /// deployed or not\\n    /// @return True if a contract exists, false otherwise\\n    function contractExists(address contract_address) public view returns (bool) {\\n        uint size;\\n\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            size := extcodesize(contract_address)\\n        }\\n\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x3fb4df9cdadd3711bffff81a451868c7a1ee8a2f3ff1a20a4343def15cb38e0f\",\"license\":\"MIT\"},\"data/source/services/MonitoringService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"../lib/ECVerify.sol\\\";\\nimport \\\"../lib/MessageType.sol\\\";\\nimport \\\"../raiden/Token.sol\\\";\\nimport \\\"../raiden/Utils.sol\\\";\\nimport \\\"../raiden/TokenNetwork.sol\\\";\\nimport \\\"../raiden/TokenNetworkRegistry.sol\\\";\\nimport \\\"./ServiceRegistry.sol\\\";\\nimport \\\"./UserDeposit.sol\\\";\\n\\ncontract MonitoringService is Utils {\\n    // Token to be used for paying the rewards\\n    Token public token;\\n\\n    // Raiden Service Bundle contract to use for checking if MS has deposits\\n    ServiceRegistry public service_registry;\\n    UserDeposit public user_deposit;\\n    TokenNetworkRegistry public token_network_registry;\\n\\n    // keccak256(channel_identifier, token_network_address) => Struct\\n    // Keep track of the rewards per channel\\n    mapping(bytes32 => Reward) internal rewards;\\n\\n    /*\\n     *  Structs\\n     */\\n    struct Reward{\\n        // The amount of tokens to be rewarded\\n        uint256 reward_amount;\\n\\n        // Nonce of the most recently provided BP\\n        uint256 nonce;\\n\\n        // Address of the Raiden Node that was monitored\\n        // This is also the address that has the reward deducted from its deposit\\n        address reward_sender_address;\\n\\n        // Address of the Monitoring Service who is currently eligible to claim the reward\\n        address monitoring_service_address;\\n    }\\n\\n    /*\\n     *  Events\\n     */\\n\\n    event NewBalanceProofReceived(\\n        address token_network_address,\\n        uint256 channel_identifier,\\n        uint256 reward_amount,\\n        uint256 indexed nonce,\\n        address indexed ms_address,\\n        address indexed raiden_node_address\\n    );\\n    event RewardClaimed(address indexed ms_address, uint amount, bytes32 indexed reward_identifier);\\n\\n    /*\\n     *  Constructor\\n     */\\n\\n    /// @notice Set the default values for the smart contract\\n    /// @param _token_address The address of the token to use for rewards\\n    /// @param _service_registry_address The address of the ServiceRegistry contract\\n    /// @param _token_network_registry_address The address of the TokenNetworkRegistry for authenticating TokenNetworks\\n    constructor(\\n        address _token_address,\\n        address _service_registry_address,\\n        address _udc_address,\\n        address _token_network_registry_address\\n    ) {\\n        require(_token_address != address(0x0), \\\"Token at address zero\\\");\\n        require(_service_registry_address != address(0x0), \\\"ServiceRegistry at address zero\\\");\\n        require(_udc_address != address(0x0), \\\"UDC at address zero\\\");\\n        require(contractExists(_token_address), \\\"token has no code\\\");\\n        require(contractExists(_service_registry_address), \\\"ServiceRegistry has no code\\\");\\n        require(contractExists(_udc_address), \\\"UDC has no code\\\");\\n        require(contractExists(_token_network_registry_address), \\\"TokenNetworkRegistry has no code\\\");\\n\\n        token = Token(_token_address);\\n        service_registry = ServiceRegistry(_service_registry_address);\\n        user_deposit = UserDeposit(_udc_address);\\n        token_network_registry = TokenNetworkRegistry(_token_network_registry_address);\\n        // Check if the contract is indeed a token contract\\n        require(token.totalSupply() > 0, \\\"Token with zero total supply\\\");\\n        // Check if the contract is indeed a service_registry contract\\n        // TODO: Check that some function exists in the contract\\n    }\\n\\n    /// @notice Internal function that updates the Reward struct if a newer balance proof\\n    /// is provided in the monitor() function\\n    /// @param token_network_address Address of the TokenNetwork being monitored\\n    /// @param closing_participant The address of the participant who closed the channel\\n    /// @param non_closing_participant Address of the other channel participant. This is\\n    /// the participant on whose behalf the MS acts.\\n    /// @param reward_amount The amount of tokens to be rewarded\\n    /// @param nonce The nonce of the newly provided balance_proof\\n    /// @param monitoring_service_address The address of the MS calling monitor()\\n    /// @param non_closing_signature Non-closing participant signature of the\\n    /// balance proof data.\\n    /// @param reward_proof_signature The signature of the signed reward proof\\n    function updateReward(\\n        address token_network_address,\\n        address closing_participant,\\n        address non_closing_participant,\\n        uint256 reward_amount,\\n        uint256 nonce,\\n        address monitoring_service_address,\\n        bytes memory non_closing_signature,\\n        bytes memory reward_proof_signature\\n    )\\n        internal\\n    {\\n        TokenNetwork token_network = TokenNetwork(token_network_address);\\n        address token_network_token = address(token_network.token());\\n        require(\\n            token_network_registry.token_to_token_networks(token_network_token) ==\\n            address(token_network),\\n            \\\"Unknown TokenNetwork\\\"\\n        );\\n        uint256 channel_identifier = token_network.getChannelIdentifier(\\n            closing_participant, non_closing_participant\\n        );\\n\\n        // Make sure that the reward proof is signed by the non_closing_participant\\n        address raiden_node_address = recoverAddressFromRewardProof(\\n            token_network.chain_id(),\\n            token_network_address,\\n            non_closing_participant,\\n            non_closing_signature,\\n            reward_amount,\\n            reward_proof_signature\\n        );\\n        require(raiden_node_address == non_closing_participant, \\\"Bad reward proof\\\");\\n\\n        bytes32 reward_identifier = keccak256(\\n            abi.encodePacked(\\n                channel_identifier,\\n                token_network_address\\n            )\\n        );\\n\\n        // Get the Reward struct for the correct channel\\n        Reward storage reward = rewards[reward_identifier];\\n\\n        // Only allow BPs with higher nonce to be submitted\\n        require(reward.nonce < nonce, \\\"stale nonce\\\");\\n\\n        // MSC stores channel_identifier, MS_address, reward_amount, nonce\\n        // of the MS that provided the balance_proof with highest nonce\\n        rewards[reward_identifier] = Reward({\\n            reward_amount: reward_amount,\\n            nonce: nonce,\\n            reward_sender_address: non_closing_participant,\\n            monitoring_service_address: monitoring_service_address\\n        });\\n    }\\n\\n    /// @notice Called by a registered MS, when providing a new balance proof\\n    /// to a monitored channel.\\n    /// Can be called multiple times by different registered MSs as long as the BP provided\\n    /// is newer than the current newest registered BP.\\n    /// @param nonce Strictly monotonic value used to order BPs\\n    /// omitting PB specific params, since these will not be provided in the future\\n    /// @param reward_amount Amount of tokens to be rewarded\\n    /// @param token_network_address Address of the Token Network in which the channel\\n    /// being monitored exists.\\n    /// @param reward_proof_signature The signature of the signed reward proof\\n    function monitor(\\n        address closing_participant,\\n        address non_closing_participant,\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes memory closing_signature,\\n        bytes memory non_closing_signature,\\n        uint256 reward_amount,\\n        address token_network_address,\\n        bytes memory reward_proof_signature\\n    )\\n        public\\n    {\\n        // Here we're trying to do bookkeeping first, but updateReward() first calls\\n        // token_network_address.  So reentrancy is possible.\\n        // In that case, the outer frame fails and reverts the state\\n        // because token_network_address is not registered in the token_network_registry.\\n        //\\n        // Maybe it's simpler and safer to take the token address as an argument instead,\\n        // and ask the TokenNetworkRegistry for the token_network_address.\\n        updateReward(\\n            token_network_address,\\n            closing_participant,\\n            non_closing_participant,\\n            reward_amount,\\n            nonce,\\n            msg.sender,\\n            non_closing_signature,\\n            reward_proof_signature\\n        );\\n\\n        TokenNetwork token_network = TokenNetwork(token_network_address);\\n        uint256 channel_identifier = token_network.getChannelIdentifier(\\n            closing_participant, non_closing_participant\\n        );\\n        require(\\n            block.number >= firstBlockAllowedToMonitorChannel(\\n                token_network,\\n                channel_identifier,\\n                closing_participant,\\n                non_closing_participant,\\n                msg.sender\\n            ),\\n            \\\"not allowed to monitor\\\"\\n        );\\n\\n        // Call updateTransfer in the corresponding TokenNetwork\\n        token_network.updateNonClosingBalanceProof(\\n            channel_identifier,\\n            closing_participant,\\n            non_closing_participant,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            closing_signature,\\n            non_closing_signature\\n        );\\n\\n        emit NewBalanceProofReceived(\\n            token_network_address,\\n            channel_identifier,\\n            reward_amount,\\n            nonce,\\n            msg.sender,\\n            non_closing_participant\\n        );\\n    }\\n\\n    function firstBlockAllowedToMonitorChannel(\\n        TokenNetwork token_network,\\n        uint256 channel_identifier,\\n        address closing_participant,\\n        address non_closing_participant,\\n        address monitoring_service_address\\n    )\\n        public view\\n        returns (uint256)\\n    {\\n        require(service_registry.hasValidRegistration(monitoring_service_address), \\\"service not registered\\\");\\n\\n        TokenNetwork.ChannelState channel_state;\\n        uint256 settle_block_number;\\n        (settle_block_number, channel_state) = token_network.getChannelInfo(\\n            channel_identifier, closing_participant, non_closing_participant\\n        );\\n        require(channel_state == TokenNetwork.ChannelState.Closed, \\\"channel not closed\\\");\\n\\n        // We don't actually know when the channel has been closed. So we'll\\n        // make a guess so that assumed_close_block >= real_close_block.\\n        uint256 assumed_settle_timeout = token_network.settlement_timeout_min();\\n        require(settle_block_number >= assumed_settle_timeout, \\\"too low settle block number\\\");\\n        uint256 assumed_close_block = settle_block_number - assumed_settle_timeout;\\n\\n        return firstBlockAllowedToMonitor(\\n            assumed_close_block,\\n            assumed_settle_timeout,\\n            closing_participant,\\n            non_closing_participant,\\n            monitoring_service_address\\n        );\\n    }\\n\\n    function firstBlockAllowedToMonitor(\\n        uint256 closed_at_block,\\n        uint256 settle_timeout,\\n        address participant1,\\n        address participant2,\\n        address monitoring_service_address\\n    )\\n        public pure\\n        returns (uint256)\\n    {\\n        // avoid overflows when multiplying with percentages\\n        require(settle_timeout < uint256(2**256 - 1) / 100, \\\"maliciously big settle timeout\\\");\\n        require(closed_at_block < uint256(2**256 - 1) / 100, \\\"maliciously big closed_at_block\\\");\\n\\n        // First allowed block as percentage of settle_timeout. We're using\\n        // integers here to avoid accuracy loss during calculations.\\n        uint256 BEST_CASE = 30;\\n        uint256 WORST_CASE = 80;\\n\\n        // When is the first block that any MS might be allowed to monitor\\n        uint256 best_case_block = closed_at_block + BEST_CASE * settle_timeout / 100;\\n        // Length of the range into which the first allowed block will fall\\n        uint256 range_length = (WORST_CASE - BEST_CASE) * settle_timeout / 100;\\n\\n        // Offset for this specific MS within the range\\n        uint256 ms_offset = (\\n            uint256(participant1) +\\n            uint256(participant2) +\\n            uint256(monitoring_service_address)\\n        ) % range_length;\\n\\n        return best_case_block + ms_offset;\\n    }\\n\\n    /// @notice Called after a monitored channel is settled in order for MS to claim the reward\\n    /// Can be called once per settled channel by everyone on behalf of MS\\n    /// @param token_network_address Address of the Token Network in which the channel exists\\n    /// @param closing_participant Address of the participant of the channel that called close\\n    /// @param non_closing_participant The other participant of the channel\\n    function claimReward(\\n        uint256 channel_identifier,\\n        address token_network_address,\\n        address closing_participant,\\n        address non_closing_participant\\n    )\\n        public\\n        returns (bool)\\n    {\\n        TokenNetwork token_network = TokenNetwork(token_network_address);\\n        bytes32 reward_identifier = keccak256(\\n            abi.encodePacked(\\n                channel_identifier,\\n                token_network_address\\n            )\\n        );\\n\\n        // Only allowed to claim, if channel is settled\\n        // Channel is settled if it's data has been deleted\\n        TokenNetwork.ChannelState channel_state;\\n        uint256 settle_block_number;\\n        (settle_block_number, channel_state) = token_network.getChannelInfo(\\n            channel_identifier,\\n            closing_participant,\\n            non_closing_participant\\n        );\\n        // We are trying to figure out when the settlement period ends.\\n        // The meaning of settle_block_number is totally different depending on channel_state.\\n        // When channel_state is NonExistent, settle_block_number is zero so it's not useful.\\n        // When channel_state is Open, settle_block_number is the length of the settlement period.\\n        // In these cases, we don't want to proceed anyway because the settlement period has not even started.\\n        // We can only proceed with these other channel states.\\n        require(\\n            channel_state == TokenNetwork.ChannelState.Closed ||\\n            channel_state == TokenNetwork.ChannelState.Settled ||\\n            channel_state == TokenNetwork.ChannelState.Removed, \\\"too early channel state\\\"\\n        );\\n        require(settle_block_number < block.number, \\\"channel not settled yet\\\");\\n\\n        Reward storage reward = rewards[reward_identifier];\\n\\n        // Make sure that the Reward exists\\n        require(reward.reward_sender_address != address(0x0), \\\"reward_sender is zero\\\");\\n\\n        // Add reward to the monitoring service's balance\\n        require(\\n            user_deposit.transfer(\\n                reward.reward_sender_address,\\n                reward.monitoring_service_address,\\n                reward.reward_amount\\n            ),\\n            \\\"UDC did not transfer\\\"\\n        );\\n\\n        emit RewardClaimed(\\n            reward.monitoring_service_address,\\n            reward.reward_amount,\\n            reward_identifier\\n        );\\n\\n        // delete storage\\n        delete rewards[reward_identifier];\\n\\n        return true;\\n    }\\n\\n    function recoverAddressFromRewardProof(\\n        uint256 chain_id,\\n        address token_network_address,\\n        address non_closing_participant,\\n        bytes memory non_closing_signature,\\n        uint256 reward_amount,\\n        bytes memory signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        // This message shows the intention of the signer to pay\\n        // a reward to a Monitoring Service, provided that the\\n        // call of updateNonClosingBalanceProof() succeeds.\\n        // The triple (non_closing_participant, non_closing_signature, token_network_address)\\n        // uniquely identifies the call that's supposed to be made.\\n        // (Just checking non_closing_signature is not enough because\\n        // when an attacker tampers with the payload, the signature\\n        // verification doesn't fail but emits a different address.)\\n        // (Without a token_network, there will be some ambiguity\\n        // what the payload means.)\\n        bytes32 message_hash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n221\\\",  // 20 + 32 + 32 + 20 + 20 + 65 + 32\\n                address(this),\\n                chain_id,\\n                uint256(MessageType.MessageTypeId.MSReward),\\n                token_network_address,\\n                non_closing_participant,\\n                non_closing_signature,\\n                reward_amount\\n            )\\n        );\\n\\n        signature_address = ECVerify.ecverify(message_hash, signature);\\n        require(signature_address == non_closing_participant, \\\"Reward proof with wrong non_closing_participant\\\");\\n    }\\n}\\n\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\",\"keccak256\":\"0x56bffc63caf9f965a3ec7d7ec9081c4c010f7a3dd725e3e5b13f3a189936dade\",\"license\":\"MIT\"},\"data/source/services/ServiceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable indentation */\\n/* solium-disable security/no-block-members */\\npragma solidity 0.7.6;\\n\\nimport \\\"../raiden/Token.sol\\\";\\nimport \\\"../raiden/Utils.sol\\\";\\n\\ncontract ServiceRegistryConfigurableParameters {\\n    address public controller;\\n\\n    modifier onlyController() {\\n        require(msg.sender == controller, \\\"caller is not the controller\\\");\\n        _;\\n    }\\n\\n    // After a price is set to set_price at timestamp set_price_at,\\n    // the price decays according to decayedPrice().\\n    uint256 public set_price;\\n    uint256 public set_price_at;\\n\\n    /// The amount of time (in seconds) till the price decreases to roughly 1/e.\\n    uint256 public decay_constant = 200 days;\\n\\n    // Once the price is at min_price, it can't decay further.\\n    uint256 public min_price = 1000;\\n\\n    // Whenever a deposit comes in, the price is multiplied by numerator / denominator.\\n    uint256 public price_bump_numerator = 1;\\n    uint256 public price_bump_denominator = 1;\\n\\n    // The duration of service registration/extension in seconds\\n    uint256 public registration_duration = 180 days;\\n\\n    // If true, new deposits are no longer accepted.\\n    bool public deprecated = false;\\n\\n    function setDeprecationSwitch() public onlyController returns (bool _success) {\\n        deprecated = true;\\n        return true;\\n    }\\n\\n    function changeParameters(\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator,\\n            uint256 _decay_constant,\\n            uint256 _min_price,\\n            uint256 _registration_duration\\n    ) public onlyController returns (bool _success) {\\n        changeParametersInternal(\\n            _price_bump_numerator,\\n            _price_bump_denominator,\\n            _decay_constant,\\n            _min_price,\\n            _registration_duration\\n        );\\n        return true;\\n    }\\n\\n    function changeParametersInternal(\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator,\\n            uint256 _decay_constant,\\n            uint256 _min_price,\\n            uint256 _registration_duration\\n    ) internal {\\n        refreshPrice();\\n        setPriceBumpParameters(_price_bump_numerator, _price_bump_denominator);\\n        setMinPrice(_min_price);\\n        setDecayConstant(_decay_constant);\\n        setRegistrationDuration(_registration_duration);\\n    }\\n\\n    // Updates set_price to be currentPrice() and set_price_at to be now\\n    function refreshPrice() private {\\n        set_price = currentPrice();\\n        set_price_at = block.timestamp;\\n    }\\n\\n    function setPriceBumpParameters(\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator\\n    ) private {\\n        require(_price_bump_denominator > 0, \\\"divide by zero\\\");\\n        require(_price_bump_numerator >= _price_bump_denominator, \\\"price dump instead of bump\\\");\\n        require(_price_bump_numerator < 2 ** 40, \\\"price dump numerator is too big\\\");\\n        price_bump_numerator = _price_bump_numerator;\\n        price_bump_denominator = _price_bump_denominator;\\n    }\\n\\n    function setMinPrice(uint256 _min_price) private {\\n        // No checks.  Even allowing zero.\\n        min_price = _min_price;\\n        // No checks or modifications on set_price.\\n        // Even if set_price is smaller than min_price, currentPrice() function returns min_price.\\n    }\\n\\n    function setDecayConstant(uint256 _decay_constant) private {\\n        require(_decay_constant > 0, \\\"attempt to set zero decay constant\\\");\\n        require(_decay_constant < 2 ** 40, \\\"too big decay constant\\\");\\n        decay_constant = _decay_constant;\\n    }\\n\\n    function setRegistrationDuration(uint256 _registration_duration) private {\\n        // No checks.  Even allowing zero (when no new registrations are possible).\\n        registration_duration = _registration_duration;\\n    }\\n\\n\\n    /// @notice The amount to deposit for registration or extension\\n    /// Note: the price moves quickly depending on what other addresses do.\\n    /// The current price might change after you send a `deposit()` transaction\\n    /// before the transaction is executed.\\n    function currentPrice() public view returns (uint256) {\\n        require(block.timestamp >= set_price_at, \\\"An underflow in price computation\\\");\\n        uint256 seconds_passed = block.timestamp - set_price_at;\\n\\n        return decayedPrice(set_price, seconds_passed);\\n    }\\n\\n\\n    /// @notice Calculates the decreased price after a number of seconds\\n    /// @param _set_price The initial price\\n    /// @param _seconds_passed The number of seconds passed since the initial\\n    /// price was set\\n    function decayedPrice(uint256 _set_price, uint256 _seconds_passed) public\\n        view returns (uint256) {\\n        // We are here trying to approximate some exponential decay.\\n        // exp(- X / A) where\\n        //   X is the number of seconds since the last price change\\n        //   A is the decay constant (A = 200 days corresponds to 0.5% decrease per day)\\n\\n        // exp(- X / A) ~~ P / Q where\\n        //   P = 24 A^4\\n        //   Q = 24 A^4 + 24 A^3X + 12 A^2X^2 + 4 AX^3 + X^4\\n        // Note: swap P and Q, and then think about the Taylor expansion.\\n\\n        uint256 X = _seconds_passed;\\n\\n        if (X >= 2 ** 40) { // The computation below overflows.\\n            return min_price;\\n        }\\n\\n        uint256 A = decay_constant;\\n\\n        uint256 P = 24 * (A ** 4);\\n        uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;\\n\\n        // The multiplication below is not supposed to overflow because\\n        // _set_price should be at most 2 ** 90 and\\n        // P should be at most 24 * (2 ** 40).\\n        uint256 price = _set_price * P / Q;\\n\\n        // Not allowing a price smaller than min_price.\\n        // Once it's too low it's too low forever.\\n        if (price < min_price) {\\n            price = min_price;\\n        }\\n        return price;\\n    }\\n}\\n\\n\\ncontract Deposit {\\n    // This contract holds ERC20 tokens as deposit until a predetemined point of time.\\n\\n    // The ERC20 token contract that the deposit is about.\\n    Token public token;\\n\\n    // The address of ServiceRegistry contract that this deposit is associated with.\\n    // If the address has no code, service_registry.deprecated() call will fail.\\n    ServiceRegistryConfigurableParameters service_registry;\\n\\n    // The address that can withdraw the deposit after the release time.\\n    address public withdrawer;\\n\\n    // The timestamp after which the withdrawer can withdraw the deposit.\\n    uint256 public release_at;\\n\\n    /// @param _token The address of the ERC20 token contract where the deposit is accounted\\n    /// @param _release_at The timestap after which the withdrawer can withdraw the deposit\\n    /// @param _withdrawer The address that can withdraw the deposit after the release time\\n    /// @param _service_registry The address of ServiceRegistry whose deprecation enables immediate withdrawals\\n    constructor(\\n        Token _token,\\n        uint256 _release_at,\\n        address _withdrawer,\\n        ServiceRegistryConfigurableParameters _service_registry\\n    ) {\\n        token = _token;\\n        // Don't care even if it's in the past.\\n        release_at = _release_at;\\n        withdrawer = _withdrawer;\\n        service_registry = _service_registry;\\n    }\\n\\n    // In order to make a deposit, transfer the ERC20 token into this contract.\\n    // If you transfer a wrong kind of ERC20 token or ETH into this contract,\\n    // these tokens will be lost forever.\\n\\n    /// @notice Withdraws the tokens that have been deposited\\n    /// Only `withdrawer` can call this.\\n    /// @param _to The address where the withdrawn tokens should go\\n    function withdraw(address payable _to) external {\\n        uint256 balance = token.balanceOf(address(this));\\n        require(msg.sender == withdrawer, \\\"the caller is not the withdrawer\\\");\\n        require(block.timestamp >= release_at || service_registry.deprecated(), \\\"deposit not released yet\\\");\\n        require(balance > 0, \\\"nothing to withdraw\\\");\\n        require(token.transfer(_to, balance), \\\"token didn't transfer\\\");\\n        //selfdestruct(_to); // OVM does not support selfdestruct\\n    }\\n}\\n\\n\\ncontract ServiceRegistry is Utils, ServiceRegistryConfigurableParameters {\\n    Token public token;\\n\\n    mapping(address => uint256) public service_valid_till;\\n    mapping(address => string) public urls;  // URLs of services for HTTP access\\n\\n    // An append-only list of addresses that have ever made a deposit.\\n    // Starting from this list, all alive registrations can be figured out.\\n    address[] public ever_made_deposits;\\n\\n    // @param service The address of the registered service provider\\n    // @param valid_till The timestamp of the moment when the registration expires\\n    // @param deposit_amount The amount of deposit transferred\\n    // @param deposit The address of Deposit instance where the deposit is stored\\n    event RegisteredService(address indexed service, uint256 valid_till, uint256 deposit_amount, Deposit deposit_contract);\\n\\n    // @param _token_for_registration The address of the ERC20 token contract that services use for registration fees\\n    // @param _controller The address that can change parameters and deprecate the ServiceRegistry\\n    // @param _initial_price The amount of tokens needed initially for a slot\\n    // @param _price_bump_numerator The ratio of price bump after deposit is made (numerator)\\n    // @param _price_bump_denominator The ratio of price bump after deposit is made (denominator)\\n    // @param _decay_constant The number of seconds after which the price becomes roughly 1/e\\n    // @param _min_price The minimum amount of tokens needed for a slot\\n    // @param _registration_duration The number of seconds (roughly, barring block time & miners'\\n    // timestamp errors) of a slot gained for a successful deposit\\n    constructor(\\n            Token _token_for_registration,\\n            address _controller,\\n            uint256 _initial_price,\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator,\\n            uint256 _decay_constant,\\n            uint256 _min_price,\\n            uint256 _registration_duration\\n    ) {\\n        require(address(_token_for_registration) != address(0x0), \\\"token at address zero\\\");\\n        require(contractExists(address(_token_for_registration)), \\\"token has no code\\\");\\n        require(_initial_price >= min_price, \\\"initial price too low\\\");\\n        require(_initial_price <= 2 ** 90, \\\"intiial price too high\\\");\\n\\n        token = _token_for_registration;\\n        // Check if the contract is indeed a token contract\\n        require(token.totalSupply() > 0, \\\"total supply zero\\\");\\n        controller = _controller;\\n\\n        // Set up the price and the set price timestamp\\n        set_price = _initial_price;\\n        set_price_at = block.timestamp;\\n\\n        // Set the parameters\\n        changeParametersInternal(_price_bump_numerator, _price_bump_denominator, _decay_constant, _min_price, _registration_duration);\\n    }\\n\\n    // @notice Locks tokens and registers a service or extends the registration\\n    // @param _limit_amount The biggest amount of tokens that the caller is willing to deposit\\n    // The call fails if the current price is higher (this is always possible\\n    // when other parties have just called `deposit()`)\\n    function deposit(uint _limit_amount) public returns (bool _success) {\\n        require(! deprecated, \\\"this contract was deprecated\\\");\\n\\n        uint256 amount = currentPrice();\\n        require(_limit_amount >= amount, \\\"not enough limit\\\");\\n\\n        // Extend the service position.\\n        uint256 valid_till = service_valid_till[msg.sender];\\n        if (valid_till == 0) { // a first time joiner\\n            ever_made_deposits.push(msg.sender);\\n        }\\n        if (valid_till < block.timestamp) { // a first time joiner or an expired service.\\n            valid_till = block.timestamp;\\n        }\\n        // Check against overflow.\\n        require(valid_till < valid_till + registration_duration, \\\"overflow during extending the registration\\\");\\n        valid_till = valid_till + registration_duration;\\n        assert(valid_till > service_valid_till[msg.sender]);\\n        service_valid_till[msg.sender] = valid_till;\\n\\n        // Record the price\\n        set_price = amount * price_bump_numerator / price_bump_denominator;\\n        if (set_price > 2 ** 90) {\\n            set_price = 2 ** 90; // Preventing overflows.\\n        }\\n        set_price_at = block.timestamp;\\n\\n        // Move the deposit in a new Deposit contract.\\n        assert(block.timestamp < valid_till);\\n        Deposit depo = new Deposit(token, valid_till, msg.sender, this);\\n        require(token.transferFrom(msg.sender, address(depo), amount), \\\"Token transfer for deposit failed\\\");\\n\\n        // Fire event\\n        emit RegisteredService(msg.sender, valid_till, amount, depo);\\n\\n        return true;\\n    }\\n\\n    /// @notice Sets the URL used to access a service via HTTP\\n    /// Only a currently registered service can call this successfully\\n    /// @param new_url The new URL string to be stored\\n    function setURL(string memory new_url) public returns (bool _success) {\\n        require(hasValidRegistration(msg.sender), \\\"registration expired\\\");\\n        require(bytes(new_url).length != 0, \\\"new url is empty string\\\");\\n        urls[msg.sender] = new_url;\\n        return true;\\n    }\\n\\n    /// A getter function for seeing the length of ever_made_deposits array\\n    function everMadeDepositsLen() public view returns (uint256 _len) {\\n        return ever_made_deposits.length;\\n    }\\n\\n    function hasValidRegistration(address _address) public view returns (bool _has_registration) {\\n        return block.timestamp < service_valid_till[_address];\\n    }\\n}\\n\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\",\"keccak256\":\"0x5a967df24ca5e9bb01d0b5d550b6a420d6998831766e031686ca7bba11362bae\",\"license\":\"MIT\"},\"data/source/services/UserDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"../raiden/Token.sol\\\";\\nimport \\\"../raiden/Utils.sol\\\";\\n\\ncontract UserDeposit is Utils {\\n    uint constant public withdraw_delay = 100;  // time before withdraw is allowed in blocks\\n\\n    // Token to be used for the deposit\\n    Token public token;\\n\\n    // Trusted contracts (can execute `transfer`)\\n    address public msc_address;\\n    address public one_to_n_address;\\n\\n    // Total amount of tokens that have been deposited. This is monotonous and\\n    // doing a transfer or withdrawing tokens will not decrease total_deposit!\\n    mapping(address => uint256) public total_deposit;\\n    // Current user's balance, ignoring planned withdraws\\n    mapping(address => uint256) public balances;\\n    mapping(address => WithdrawPlan) public withdraw_plans;\\n\\n    // The sum of all balances\\n    uint256 public whole_balance = 0;\\n    // Deposit limit for this whole contract\\n    uint256 public whole_balance_limit;\\n\\n    /*\\n     *  Structs\\n     */\\n    struct WithdrawPlan {\\n        uint256 amount;\\n        uint256 withdraw_block;  // earliest block at which withdraw is allowed\\n    }\\n\\n    /*\\n     *  Events\\n     */\\n\\n    event BalanceReduced(address indexed owner, uint newBalance);\\n    event WithdrawPlanned(address indexed withdrawer, uint plannedBalance);\\n\\n    /*\\n     *  Modifiers\\n     */\\n\\n    modifier canTransfer() {\\n        require(msg.sender == msc_address || msg.sender == one_to_n_address, \\\"unknown caller\\\");\\n        _;\\n    }\\n\\n    /*\\n     *  Constructor\\n     */\\n\\n    /// @notice Set the default values for the smart contract\\n    /// @param _token_address The address of the token to use for rewards\\n    constructor(address _token_address, uint256 _whole_balance_limit)\\n    {\\n        // check token contract\\n        require(_token_address != address(0x0), \\\"token at address zero\\\");\\n        require(contractExists(_token_address), \\\"token has no code\\\");\\n        token = Token(_token_address);\\n        require(token.totalSupply() > 0, \\\"token has no total supply\\\"); // Check if the contract is indeed a token contract\\n        // check and set the whole balance limit\\n        require(_whole_balance_limit > 0, \\\"whole balance limit is zero\\\");\\n        whole_balance_limit = _whole_balance_limit;\\n    }\\n\\n    /// @notice Specify trusted contracts. This has to be done outside of the\\n    /// constructor to avoid cyclic dependencies.\\n    /// @param _msc_address Address of the MonitoringService contract\\n    /// @param _one_to_n_address Address of the OneToN contract\\n    function init(address _msc_address, address _one_to_n_address)\\n        external\\n    {\\n        // prevent changes of trusted contracts after initialization\\n        require(msc_address == address(0x0) && one_to_n_address == address(0x0), \\\"already initialized\\\");\\n\\n        // check monitoring service contract\\n        require(_msc_address != address(0x0), \\\"MS contract at address zero\\\");\\n        require(contractExists(_msc_address), \\\"MS contract has no code\\\");\\n        msc_address = _msc_address;\\n\\n        // check one to n contract\\n        require(_one_to_n_address != address(0x0), \\\"OneToN at address zero\\\");\\n        require(contractExists(_one_to_n_address), \\\"OneToN has no code\\\");\\n        one_to_n_address = _one_to_n_address;\\n    }\\n\\n    /// @notice Deposit tokens. The amount of transferred tokens will be\\n    /// `new_total_deposit - total_deposit[beneficiary]`. This makes the\\n    /// function behavior predictable and idempotent. Can be called several\\n    /// times and on behalf of other accounts.\\n    /// @param beneficiary The account benefiting from the deposit\\n    /// @param new_total_deposit The total sum of tokens that have been\\n    /// deposited by the user by calling this function.\\n    function deposit(address beneficiary, uint256 new_total_deposit)\\n        external\\n    {\\n        require(new_total_deposit > total_deposit[beneficiary], \\\"deposit not increasing\\\");\\n\\n        // Calculate the actual amount of tokens that will be transferred\\n        uint256 added_deposit = new_total_deposit - total_deposit[beneficiary];\\n\\n        balances[beneficiary] += added_deposit;\\n        total_deposit[beneficiary] += added_deposit;\\n\\n        // Update whole_balance, but take care against overflows.\\n        require(whole_balance + added_deposit >= whole_balance, \\\"overflowing deposit\\\");\\n        whole_balance += added_deposit;\\n\\n        // Decline deposit if the whole balance is bigger than the limit.\\n        require(whole_balance <= whole_balance_limit, \\\"too much deposit\\\");\\n\\n        // Actual transfer.\\n        require(token.transferFrom(msg.sender, address(this), added_deposit), \\\"tokens didn't transfer\\\");\\n    }\\n\\n    /// @notice Internally transfer deposits between two addresses.\\n    /// Sender and receiver must be different or the transaction will fail.\\n    /// @param sender Account from which the amount will be deducted\\n    /// @param receiver Account to which the amount will be credited\\n    /// @param amount Amount of tokens to be transferred\\n    /// @return success true if transfer has been done successfully, otherwise false\\n    function transfer(\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    )\\n        external\\n        canTransfer()\\n        returns (bool success)\\n    {\\n        require(sender != receiver, \\\"sender == receiver\\\");\\n        if (balances[sender] >= amount && amount > 0) {\\n            balances[sender] -= amount;\\n            balances[receiver] += amount;\\n            emit BalanceReduced(sender, balances[sender]);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice Announce intention to withdraw tokens.\\n    /// Sets the planned withdraw amount and resets the withdraw_block.\\n    /// There is only one planned withdrawal at a time, the old one gets overwritten.\\n    /// @param amount Maximum amount of tokens to be withdrawn\\n    function planWithdraw(uint256 amount)\\n        external\\n    {\\n        require(amount > 0, \\\"withdrawing zero\\\");\\n        require(balances[msg.sender] >= amount, \\\"withdrawing too much\\\");\\n\\n        withdraw_plans[msg.sender] = WithdrawPlan({\\n            amount: amount,\\n            withdraw_block: block.number + withdraw_delay\\n        });\\n        emit WithdrawPlanned(msg.sender, balances[msg.sender] - amount);\\n    }\\n\\n    /// @notice Execute a planned withdrawal\\n    /// Will only work after the withdraw_delay has expired.\\n    /// An amount lower or equal to the planned amount may be withdrawn.\\n    /// Removes the withdraw plan even if not the full amount has been\\n    /// withdrawn.\\n    /// @param amount Amount of tokens to be withdrawn\\n    function withdraw(uint256 amount)\\n        external\\n    {\\n        WithdrawPlan storage withdraw_plan = withdraw_plans[msg.sender];\\n        require(amount <= withdraw_plan.amount, \\\"withdrawing more than planned\\\");\\n        require(withdraw_plan.withdraw_block <= block.number, \\\"withdrawing too early\\\");\\n        uint256 withdrawable = min(amount, balances[msg.sender]);\\n        balances[msg.sender] -= withdrawable;\\n\\n        // Update whole_balance, but take care against underflows.\\n        require(whole_balance - withdrawable <= whole_balance, \\\"underflow in whole_balance\\\");\\n        whole_balance -= withdrawable;\\n\\n        emit BalanceReduced(msg.sender, balances[msg.sender]);\\n        delete withdraw_plans[msg.sender];\\n\\n        require(token.transfer(msg.sender, withdrawable), \\\"tokens didn't transfer\\\");\\n    }\\n\\n    /// @notice The owner's balance with planned withdrawals deducted\\n    /// @param owner Address for which the balance should be returned\\n    /// @return remaining_balance The remaining balance after planned withdrawals\\n    function effectiveBalance(address owner)\\n        external\\n        view\\n        returns (uint256 remaining_balance)\\n    {\\n        WithdrawPlan storage withdraw_plan = withdraw_plans[owner];\\n        if (withdraw_plan.amount > balances[owner]) {\\n            return 0;\\n        }\\n        return balances[owner] - withdraw_plan.amount;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        return a > b ? b : a;\\n    }\\n}\\n\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\",\"keccak256\":\"0x070b4f1949eec8099a1bc6e8a91789ba64853074e79b6a272d0bd8cc8f0e3053\",\"license\":\"MIT\"}},\"version\":1}"
        },
        "OneToN": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_deposit_contract",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_chain_id",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_service_registry_contract",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "expiration_block",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "transferred",
                  "type": "uint256"
                }
              ],
              "name": "Claimed",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address[]",
                  "name": "senders",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "receivers",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "expiration_blocks",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "one_to_n_address",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "signatures",
                  "type": "bytes"
                }
              ],
              "name": "bulkClaim",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "chain_id",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expiration_block",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "one_to_n_address",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ],
              "name": "claim",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "contract_address",
                  "type": "address"
                }
              ],
              "name": "contractExists",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "deposit_contract",
              "outputs": [
                {
                  "internalType": "contract UserDeposit",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "service_registry_contract",
              "outputs": [
                {
                  "internalType": "contract ServiceRegistry",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "name": "settled_sessions",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "bin": "",
          "bin-runtime": "608060405234801561001957600080610016610e32565b50505b50600436106100765760003560e01c80633af973b1146100845780633ea6b5b41461009e578063631b4903146100c25780637709bc78146101b657806399ccb9fe146101f9578063c7ae4e2c14610444578063dc291e571461046a575b600080610081610e32565b50505b61008c610472565b60405190815260200160405180910390f35b6100a661047f565b6040516001600160a01b03909116815260200160405180910390f35b61008c600480360360c08110156100e1576000806100de610e32565b50505b6001600160a01b038235811692602081013582169260408201359260608301359260808101359091169181019060c0810160a0820135600160201b8111156101315760008061012e610e32565b50505b82018360208201111561014c57600080610149610e32565b50505b803590602001918460018302840111600160201b8311171561017657600080610173610e32565b50505b91908080601f016020809104026020016040519081016040528181529291906020840183838082843760009201919091525092955061049d945050505050565b6101e5600480360360208110156101d5576000806101d2610e32565b50505b50356001600160a01b03166109e6565b604051901515815260200160405180910390f35b61008c600480360360c081101561021857600080610215610e32565b50505b810190602081018135600160201b81111561023b57600080610238610e32565b50505b82018360208201111561025657600080610253610e32565b50505b803590602001918460208302840111600160201b831117156102805760008061027d610e32565b50505b919390929091602081019035600160201b8111156102a6576000806102a3610e32565b50505b8201836020820111156102c1576000806102be610e32565b50505b803590602001918460208302840111600160201b831117156102eb576000806102e8610e32565b50505b919390929091602081019035600160201b8111156103115760008061030e610e32565b50505b82018360208201111561032c57600080610329610e32565b50505b803590602001918460208302840111600160201b8311171561035657600080610353610e32565b50505b919390929091602081019035600160201b81111561037c57600080610379610e32565b50505b82018360208201111561039757600080610394610e32565b50505b803590602001918460208302840111600160201b831117156103c1576000806103be610e32565b50505b919390926001600160a01b0383351692604081019060200135600160201b8111156103f4576000806103f1610e32565b50505b82018360208201111561040f5760008061040c610e32565b50505b803590602001918460018302840111600160201b8311171561043957600080610436610e32565b50505b5090925090506109fb565b61008c6004803603602081101561046357600080610460610e32565b50505b5035610b74565b6100a6610b8c565b600261047c610e9d565b81565b60008061048a610e9d565b906101000a90046001600160a01b031681565b60008060016104aa610e9d565b906101000a90046001600160a01b03166001600160a01b031663ebc00c05876040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680610503610efd565b15801561051857600080610515610e32565b50505b505a610522610f49565b5050505050158015610541573d6000803e3d600061053e610e32565b50505b505050506040513d60208110156105605760008061055d610e32565b50505b81019080805192506105be9150505760405162461bcd60e51b81526020600482015260176024820152761c9958d95a5d995c881b9bdd081c9959da5cdd195c9959604a1b6044820152606401604051809103906105bb610e32565b50505b835a6105c8611034565b11156106115760405162461bcd60e51b815260206004820152600b60248201526a1253d548195e1c1a5c995960aa1b60448201526064016040518091039061060e610e32565b50505b600061062a888888886002610624610e9d565b88610b98565b9050876001600160a01b0316816001600160a01b03161461068f5760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016040518091039061068c610e32565b50505b60008789876040516001600160601b0319606094851b811660208301529290931b909116603483015260488201526068016040516020818303038152906040528051906020012060008181526003602052909150604090206106ef610e9d565b156107435760405162461bcd60e51b815260206004820152601760248201527620b63932b0b23c9039b2ba3a3632b21039b2b9b9b4b7b760491b604482015260640160405180910390610740610e32565b50505b600061081a88600080610754610e9d565b906101000a90046001600160a01b03166001600160a01b03166327e235e38d6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806107ad610efd565b1580156107c2576000806107bf610e32565b50505b505a6107cc610f49565b50505050501580156107eb573d6000803e3d60006107e8610e32565b50505b505050506040513d602081101561080a57600080610807610e32565b50505b8101908080519250610c9d915050565b905080156109d95760008281526003602052879060409020819061083c61107a565b5050506000871161084957fe5b886001600160a01b03167f2f6639d24651730c7bf57c95ddbf96d66d11477e4ec626876f92c22e5f365e688b898460405180846001600160a01b03168152602001838152602001828152602001935050505060405180910390a26000806108ae610e9d565b906101000a90046001600160a01b03166001600160a01b031663beabacc88b8b846040516001600160e01b031960e086901b1681526001600160a01b03938416600482015291909216602482015260448101919091526064016020604051808303816000878061091c610efd565b1580156109315760008061092e610e32565b50505b505a61093b6110c8565b50505050505015801561095b573d6000803e3d6000610958610e32565b50505b505050506040513d602081101561097a57600080610977610e32565b50505b81019080805192506109d99150505760405162461bcd60e51b81526020600482015260186024820152773232b837b9b4ba103234b2103737ba103a3930b739b332b960411b6044820152606401604051809103906109d6610e32565b50505b9998505050505050505050565b600080826109f2610efd565b15159392505050565b6000808b8a148015610a0c57508b88145b8015610a1757508b86145b610a5b5760405162461bcd60e51b815260040180806020018281038252603981526020018061118f6039913960400191505060405180910390610a58610e32565b50505b60418c028314610aa55760405162461bcd60e51b815260040180806020018281038252602c8152602001806111c8602c913960400191505060405180910390610aa2610e32565b50505b60005b8c811015610b6357610b578e8e83818110610abf57fe5b905060200201356001600160a01b03168d8d84818110610adb57fe5b905060200201356001600160a01b03168c8c85818110610af757fe5b905060200201358b8b86818110610b0a57fe5b905060200201358a610b528b8b8080601f01602080910402602001604051908101604052818152929190602084018383808284376000920191909152508b9250610cb7915050565b61049d565b90910190600101610aa8565b509c9b505050505050505050505050565b6003602052806000526040600020905061047c610e9d565b6000600161048a610e9d565b6000805a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015610bf157600082820152602001610bda565b50869150600590508a8a8a8a6040517f19457468657265756d205369676e6564204d6573736167653a0a31383800000060208201526001600160601b0319606098891b8116603d8301526051820197909752607181019590955292861b85166091850152941b90921660a582015260b981019290925260d982015260f901604051602081830303815290604052805190602001209050610c918184610d28565b98975050505050505050565b6000818311610cac5782610cae565b815b90505b92915050565b606082518210610cc357fe5b6041820260006060604051818152601f19601f8301168101602001604052908015610cf5576020820181803683370190505b50905081602086010151602082015281604086010151604082015281606086010151606082015260418152949350505050565b60008151604114610d4157600080610d3e610e32565b50505b60008060006020850151925060408501519150606085015160001a9050601b811015610d6b57601b015b8060ff16601b1480610d8057508060ff16601c145b610d9257600080610d8f610e32565b50505b60018682858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855a610de2610f49565b5050505050158015610e01573d6000803e3d6000610dfe610e32565b50505b5050506020604051035193506001600160a01b038416610e2957600080610e26610e32565b50505b50505092915050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015610e6a578086015182820160400152602001610e4f565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015610ef857600082820152602001610ee1565b505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020610ee1565b638540661f598160e01b8152610f7a565b8080831115610cb1575090919050565b8080831015610cb1575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015610fb2578088015182820152602001610f9a565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af150596110078d3d610f6a565b8c016110138187610f5a565b5b828110156110285760008152602001611014565b50929c50505050505050565b635a98c361598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020610ee1565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020610ee1565b6385979f76598160e01b8152836004820152846024820152606060448201528760648201526084810160005b8981101561110c5780890151828201526020016110f4565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af150596111618e3d610f6a565b8d0161116d8187610f5a565b5b82811015611182576000815260200161116e565b50929d5050505050505056fe53616d65206e756d626572206f6620656c656d656e747320726571756972656420666f7220616c6c20696e70757420706172616d6574657273607369676e617475726573602073686f756c6420636f6e7461696e2036352062797465732070657220494f55",
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deposit_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_service_registry_contract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration_block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferred\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"expiration_blocks\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"one_to_n_address\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"bulkClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chain_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration_block\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"one_to_n_address\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit_contract\",\"outputs\":[{\"internalType\":\"contract UserDeposit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"service_registry_contract\",\"outputs\":[{\"internalType\":\"contract ServiceRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"settled_sessions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bulkClaim(address[],address[],uint256[],uint256[],address,bytes)\":{\"params\":{\"amounts\":\"Owed amounts of tokens\",\"expiration_blocks\":\"Tokens can only be claimed before this time\",\"one_to_n_address\":\"Address of this contract\",\"receivers\":\"Addresses to which the amounts are transferred\",\"senders\":\"Addresses from which the amounts are transferred\",\"signatures\":\"Sender's signatures concatenated into a single bytes array\"},\"returns\":{\"_0\":\"Amount of transferred tokens\"}},\"claim(address,address,uint256,uint256,address,bytes)\":{\"params\":{\"amount\":\"Owed amount of tokens\",\"expiration_block\":\"Tokens can only be claimed before this time\",\"one_to_n_address\":\"Address of this contract\",\"receiver\":\"Address to which the amount is transferred\",\"sender\":\"Address from which the amount is transferred\",\"signature\":\"Sender's signature over keccak256(sender, receiver, amount, expiration_block)\"},\"returns\":{\"_0\":\"Amount of transferred tokens\"}},\"constructor\":{\"params\":{\"_deposit_contract\":\"Address of UserDeposit contract\",\"_service_registry_contract\":\"Address of ServiceRegistry contract\"}},\"contractExists(address)\":{\"params\":{\"contract_address\":\"The address to check whether a contract is deployed or not\"},\"returns\":{\"_0\":\"True if a contract exists, false otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkClaim(address[],address[],uint256[],uint256[],address,bytes)\":{\"notice\":\"Submit multiple IOUs to claim the owed amount. This is the same as calling `claim` multiple times, except for the reduced gas cost.\"},\"claim(address,address,uint256,uint256,address,bytes)\":{\"notice\":\"Submit an IOU to claim the owed amount. If the deposit is smaller than the claim, the remaining deposit is claimed. If no tokens are claimed, `claim` may be retried, later.\"},\"contractExists(address)\":{\"notice\":\"Check if a contract exists\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/services/OneToN.sol\":\"OneToN\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/lib/ECVerify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nlibrary ECVerify {\\n\\n    function ecverify(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address signature_address)\\n    {\\n        require(signature.length == 65);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // The signature format is a compact form of:\\n        //   {bytes32 r}{bytes32 s}{uint8 v}\\n        // Compact means, uint8 is not padded to 32 bytes.\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n\\n            // Here we are loading the last 32 bytes, including 31 bytes following the signature.\\n            v := byte(0, mload(add(signature, 96)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        require(v == 27 || v == 28);\\n\\n        signature_address = ecrecover(hash, v, r, s);\\n\\n        // ecrecover returns zero on error\\n        require(signature_address != address(0x0));\\n\\n        return signature_address;\\n    }\\n}\\n\",\"keccak256\":\"0xeced41e7578af77042e00fc68e482b754cd355da872bfdda95a0b74e3dbd90e0\",\"license\":\"MIT\"},\"data/source/lib/MessageType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nlibrary MessageType {\\n\\n    enum MessageTypeId {\\n        None,\\n        BalanceProof,\\n        BalanceProofUpdate,\\n        Withdraw,\\n        CooperativeSettle,\\n        IOU,\\n        MSReward\\n    }\\n}\\n\",\"keccak256\":\"0xe4a3d54220ba19024c03fac9f8b3338245f2c4aa266627e6cdb5e97a2adcdee4\",\"license\":\"MIT\"},\"data/source/raiden/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface Token {\\n\\n    /// @return supply total amount of tokens\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return balance The balance\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return success Whether the approval was successful or not\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return remaining Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    // Optionally implemented function to show the number of decimals for the token\\n    function decimals() external view returns (uint8 decimals);\\n}\\n\",\"keccak256\":\"0x5a8ccb9fa426228d9e213164f22a94b0ac57f1aa15ab76ce88a96177edd7b0b3\",\"license\":\"MIT\"},\"data/source/raiden/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @title Utils\\n/// @notice Utils contract for various helpers used by the Raiden Network smart\\n/// contracts.\\ncontract Utils {\\n    /// @notice Check if a contract exists\\n    /// @param contract_address The address to check whether a contract is\\n    /// deployed or not\\n    /// @return True if a contract exists, false otherwise\\n    function contractExists(address contract_address) public view returns (bool) {\\n        uint size;\\n\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            size := extcodesize(contract_address)\\n        }\\n\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x3fb4df9cdadd3711bffff81a451868c7a1ee8a2f3ff1a20a4343def15cb38e0f\",\"license\":\"MIT\"},\"data/source/services/OneToN.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"../lib/ECVerify.sol\\\";\\nimport \\\"../lib/MessageType.sol\\\";\\nimport \\\"../raiden/Utils.sol\\\";\\nimport \\\"./ServiceRegistry.sol\\\";\\nimport \\\"./UserDeposit.sol\\\";\\n\\ncontract OneToN is Utils {\\n    UserDeposit public deposit_contract;\\n    ServiceRegistry public service_registry_contract;\\n\\n    // The signature given to claim() has to be computed with\\n    // this chain_id.  Otherwise the call fails.\\n    uint256 public chain_id;\\n\\n    // Indicates which sessions have already been settled by storing\\n    // keccak256(receiver, sender, expiration_block) => expiration_block.\\n    mapping (bytes32 => uint256) public settled_sessions;\\n\\n    /*\\n     *  Events\\n     */\\n\\n    // The session has been settled and can't be claimed again. The receiver is\\n    // indexed to allow services to know when claims have been successfully\\n    // processed.\\n    // When users want to get notified about low balances, they should listen\\n    // for UserDeposit.BalanceReduced, instead.\\n    // The first three values identify the session, `transferred` is the amount\\n    // of tokens that has actually been transferred during the claim.\\n    event Claimed(\\n        address sender,\\n        address indexed receiver,\\n        uint256 expiration_block,\\n        uint256 transferred\\n    );\\n\\n    /*\\n     *  Constructor\\n     */\\n\\n    /// @param _deposit_contract Address of UserDeposit contract\\n    /// @param _service_registry_contract Address of ServiceRegistry contract\\n    constructor(\\n        address _deposit_contract,\\n        uint256 _chain_id,\\n        address _service_registry_contract\\n    ) {\\n        deposit_contract = UserDeposit(_deposit_contract);\\n        chain_id = _chain_id;\\n        service_registry_contract = ServiceRegistry(_service_registry_contract);\\n    }\\n\\n    /// @notice Submit an IOU to claim the owed amount.\\n    /// If the deposit is smaller than the claim, the remaining deposit is\\n    /// claimed. If no tokens are claimed, `claim` may be retried, later.\\n    /// @param sender Address from which the amount is transferred\\n    /// @param receiver Address to which the amount is transferred\\n    /// @param amount Owed amount of tokens\\n    /// @param expiration_block Tokens can only be claimed before this time\\n    /// @param one_to_n_address Address of this contract\\n    /// @param signature Sender's signature over keccak256(sender, receiver, amount, expiration_block)\\n    /// @return Amount of transferred tokens\\n    function claim(\\n        address sender,\\n        address receiver,\\n        uint256 amount,\\n        uint256 expiration_block,\\n        address one_to_n_address,\\n        bytes memory signature\\n    )\\n        public\\n        returns (uint)\\n    {\\n        require(service_registry_contract.hasValidRegistration(receiver), \\\"receiver not registered\\\");\\n        require(block.number <= expiration_block, \\\"IOU expired\\\");\\n\\n        // validate signature\\n        address addressFromSignature = recoverAddressFromSignature(\\n            sender,\\n            receiver,\\n            amount,\\n            expiration_block,\\n            chain_id,\\n            signature\\n        );\\n        require(addressFromSignature == sender, \\\"Signature mismatch\\\");\\n\\n        // must not be claimed before\\n        bytes32 _key = keccak256(abi.encodePacked(receiver, sender, expiration_block));\\n        require(settled_sessions[_key] == 0, \\\"Already settled session\\\");\\n\\n        // claim as much as possible\\n        uint256 transferable = min(amount, deposit_contract.balances(sender));\\n        if (transferable > 0) {\\n            // register to avoid double claiming\\n            settled_sessions[_key] = expiration_block;\\n            assert(expiration_block > 0);\\n            emit Claimed(sender, receiver, expiration_block, transferable);\\n\\n            require(deposit_contract.transfer(sender, receiver, transferable), \\\"deposit did not transfer\\\");\\n        }\\n        return transferable;\\n    }\\n\\n    /// @notice Submit multiple IOUs to claim the owed amount.\\n    /// This is the same as calling `claim` multiple times, except for the reduced gas cost.\\n    /// @param senders Addresses from which the amounts are transferred\\n    /// @param receivers Addresses to which the amounts are transferred\\n    /// @param amounts Owed amounts of tokens\\n    /// @param expiration_blocks Tokens can only be claimed before this time\\n    /// @param one_to_n_address Address of this contract\\n    /// @param signatures Sender's signatures concatenated into a single bytes array\\n    /// @return Amount of transferred tokens\\n    function bulkClaim(\\n        address[] calldata senders,\\n        address[] calldata receivers,\\n        uint256[] calldata amounts,\\n        uint256[] calldata expiration_blocks,\\n        address one_to_n_address,\\n        bytes calldata signatures\\n    )\\n        external\\n        returns (uint)\\n    {\\n        uint256 transferable = 0;\\n        require(\\n            senders.length == receivers.length &&\\n            senders.length == amounts.length &&\\n            senders.length == expiration_blocks.length,\\n            \\\"Same number of elements required for all input parameters\\\"\\n        );\\n        require(\\n            signatures.length == senders.length * 65,\\n            \\\"`signatures` should contain 65 bytes per IOU\\\"\\n        );\\n        for (uint256 i = 0; i < senders.length; i++) {\\n            transferable += claim(\\n                senders[i],\\n                receivers[i],\\n                amounts[i],\\n                expiration_blocks[i],\\n                one_to_n_address,\\n                getSingleSignature(signatures, i)\\n            );\\n        }\\n        return transferable;\\n    }\\n\\n    /*\\n     *  Internal Functions\\n     */\\n\\n    /// @notice Get a single signature out of a byte array that contains concatenated signatures.\\n    /// @param signatures Multiple signatures concatenated into a single byte array\\n    /// @param i Index of the requested signature (zero based; the caller must check ranges)\\n    function getSingleSignature(\\n        bytes memory signatures,\\n        uint256 i\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        assert(i < signatures.length);\\n        uint256 offset = i * 65;\\n        // We need only 65, but we can access only whole words, so the next usable size is 3 * 32.\\n        bytes memory signature = new bytes(96);\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            // Copy the 96 bytes, using `offset` to start at the beginning\\n            // of the requested signature.\\n            mstore(add(signature, 32), mload(add(add(signatures, 32), offset)))\\n            mstore(add(signature, 64), mload(add(add(signatures, 64), offset)))\\n            mstore(add(signature, 96), mload(add(add(signatures, 96), offset)))\\n\\n            // The first 32 bytes store the length of the dynamic array.\\n            // Since a signature is 65 bytes, we set the length to 65, so\\n            // that only the signature is returned.\\n            mstore(signature, 65)\\n        }\\n        return signature;\\n    }\\n\\n    function recoverAddressFromSignature(\\n        address sender,\\n        address receiver,\\n        uint256 amount,\\n        uint256 expiration_block,\\n        uint256 chain_id,\\n        bytes memory signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        bytes32 message_hash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n188\\\",\\n                address(this),\\n                chain_id,\\n                uint256(MessageType.MessageTypeId.IOU),\\n                sender,\\n                receiver,\\n                amount,\\n                expiration_block\\n            )\\n        );\\n        return ECVerify.ecverify(message_hash, signature);\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        return a > b ? b : a;\\n    }\\n\\n}\\n\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\",\"keccak256\":\"0xd23bb47839c38547567681976de39fbf9d315a4a95b4de60f5ab063abd3746ee\",\"license\":\"MIT\"},\"data/source/services/ServiceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable indentation */\\n/* solium-disable security/no-block-members */\\npragma solidity 0.7.6;\\n\\nimport \\\"../raiden/Token.sol\\\";\\nimport \\\"../raiden/Utils.sol\\\";\\n\\ncontract ServiceRegistryConfigurableParameters {\\n    address public controller;\\n\\n    modifier onlyController() {\\n        require(msg.sender == controller, \\\"caller is not the controller\\\");\\n        _;\\n    }\\n\\n    // After a price is set to set_price at timestamp set_price_at,\\n    // the price decays according to decayedPrice().\\n    uint256 public set_price;\\n    uint256 public set_price_at;\\n\\n    /// The amount of time (in seconds) till the price decreases to roughly 1/e.\\n    uint256 public decay_constant = 200 days;\\n\\n    // Once the price is at min_price, it can't decay further.\\n    uint256 public min_price = 1000;\\n\\n    // Whenever a deposit comes in, the price is multiplied by numerator / denominator.\\n    uint256 public price_bump_numerator = 1;\\n    uint256 public price_bump_denominator = 1;\\n\\n    // The duration of service registration/extension in seconds\\n    uint256 public registration_duration = 180 days;\\n\\n    // If true, new deposits are no longer accepted.\\n    bool public deprecated = false;\\n\\n    function setDeprecationSwitch() public onlyController returns (bool _success) {\\n        deprecated = true;\\n        return true;\\n    }\\n\\n    function changeParameters(\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator,\\n            uint256 _decay_constant,\\n            uint256 _min_price,\\n            uint256 _registration_duration\\n    ) public onlyController returns (bool _success) {\\n        changeParametersInternal(\\n            _price_bump_numerator,\\n            _price_bump_denominator,\\n            _decay_constant,\\n            _min_price,\\n            _registration_duration\\n        );\\n        return true;\\n    }\\n\\n    function changeParametersInternal(\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator,\\n            uint256 _decay_constant,\\n            uint256 _min_price,\\n            uint256 _registration_duration\\n    ) internal {\\n        refreshPrice();\\n        setPriceBumpParameters(_price_bump_numerator, _price_bump_denominator);\\n        setMinPrice(_min_price);\\n        setDecayConstant(_decay_constant);\\n        setRegistrationDuration(_registration_duration);\\n    }\\n\\n    // Updates set_price to be currentPrice() and set_price_at to be now\\n    function refreshPrice() private {\\n        set_price = currentPrice();\\n        set_price_at = block.timestamp;\\n    }\\n\\n    function setPriceBumpParameters(\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator\\n    ) private {\\n        require(_price_bump_denominator > 0, \\\"divide by zero\\\");\\n        require(_price_bump_numerator >= _price_bump_denominator, \\\"price dump instead of bump\\\");\\n        require(_price_bump_numerator < 2 ** 40, \\\"price dump numerator is too big\\\");\\n        price_bump_numerator = _price_bump_numerator;\\n        price_bump_denominator = _price_bump_denominator;\\n    }\\n\\n    function setMinPrice(uint256 _min_price) private {\\n        // No checks.  Even allowing zero.\\n        min_price = _min_price;\\n        // No checks or modifications on set_price.\\n        // Even if set_price is smaller than min_price, currentPrice() function returns min_price.\\n    }\\n\\n    function setDecayConstant(uint256 _decay_constant) private {\\n        require(_decay_constant > 0, \\\"attempt to set zero decay constant\\\");\\n        require(_decay_constant < 2 ** 40, \\\"too big decay constant\\\");\\n        decay_constant = _decay_constant;\\n    }\\n\\n    function setRegistrationDuration(uint256 _registration_duration) private {\\n        // No checks.  Even allowing zero (when no new registrations are possible).\\n        registration_duration = _registration_duration;\\n    }\\n\\n\\n    /// @notice The amount to deposit for registration or extension\\n    /// Note: the price moves quickly depending on what other addresses do.\\n    /// The current price might change after you send a `deposit()` transaction\\n    /// before the transaction is executed.\\n    function currentPrice() public view returns (uint256) {\\n        require(block.timestamp >= set_price_at, \\\"An underflow in price computation\\\");\\n        uint256 seconds_passed = block.timestamp - set_price_at;\\n\\n        return decayedPrice(set_price, seconds_passed);\\n    }\\n\\n\\n    /// @notice Calculates the decreased price after a number of seconds\\n    /// @param _set_price The initial price\\n    /// @param _seconds_passed The number of seconds passed since the initial\\n    /// price was set\\n    function decayedPrice(uint256 _set_price, uint256 _seconds_passed) public\\n        view returns (uint256) {\\n        // We are here trying to approximate some exponential decay.\\n        // exp(- X / A) where\\n        //   X is the number of seconds since the last price change\\n        //   A is the decay constant (A = 200 days corresponds to 0.5% decrease per day)\\n\\n        // exp(- X / A) ~~ P / Q where\\n        //   P = 24 A^4\\n        //   Q = 24 A^4 + 24 A^3X + 12 A^2X^2 + 4 AX^3 + X^4\\n        // Note: swap P and Q, and then think about the Taylor expansion.\\n\\n        uint256 X = _seconds_passed;\\n\\n        if (X >= 2 ** 40) { // The computation below overflows.\\n            return min_price;\\n        }\\n\\n        uint256 A = decay_constant;\\n\\n        uint256 P = 24 * (A ** 4);\\n        uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;\\n\\n        // The multiplication below is not supposed to overflow because\\n        // _set_price should be at most 2 ** 90 and\\n        // P should be at most 24 * (2 ** 40).\\n        uint256 price = _set_price * P / Q;\\n\\n        // Not allowing a price smaller than min_price.\\n        // Once it's too low it's too low forever.\\n        if (price < min_price) {\\n            price = min_price;\\n        }\\n        return price;\\n    }\\n}\\n\\n\\ncontract Deposit {\\n    // This contract holds ERC20 tokens as deposit until a predetemined point of time.\\n\\n    // The ERC20 token contract that the deposit is about.\\n    Token public token;\\n\\n    // The address of ServiceRegistry contract that this deposit is associated with.\\n    // If the address has no code, service_registry.deprecated() call will fail.\\n    ServiceRegistryConfigurableParameters service_registry;\\n\\n    // The address that can withdraw the deposit after the release time.\\n    address public withdrawer;\\n\\n    // The timestamp after which the withdrawer can withdraw the deposit.\\n    uint256 public release_at;\\n\\n    /// @param _token The address of the ERC20 token contract where the deposit is accounted\\n    /// @param _release_at The timestap after which the withdrawer can withdraw the deposit\\n    /// @param _withdrawer The address that can withdraw the deposit after the release time\\n    /// @param _service_registry The address of ServiceRegistry whose deprecation enables immediate withdrawals\\n    constructor(\\n        Token _token,\\n        uint256 _release_at,\\n        address _withdrawer,\\n        ServiceRegistryConfigurableParameters _service_registry\\n    ) {\\n        token = _token;\\n        // Don't care even if it's in the past.\\n        release_at = _release_at;\\n        withdrawer = _withdrawer;\\n        service_registry = _service_registry;\\n    }\\n\\n    // In order to make a deposit, transfer the ERC20 token into this contract.\\n    // If you transfer a wrong kind of ERC20 token or ETH into this contract,\\n    // these tokens will be lost forever.\\n\\n    /// @notice Withdraws the tokens that have been deposited\\n    /// Only `withdrawer` can call this.\\n    /// @param _to The address where the withdrawn tokens should go\\n    function withdraw(address payable _to) external {\\n        uint256 balance = token.balanceOf(address(this));\\n        require(msg.sender == withdrawer, \\\"the caller is not the withdrawer\\\");\\n        require(block.timestamp >= release_at || service_registry.deprecated(), \\\"deposit not released yet\\\");\\n        require(balance > 0, \\\"nothing to withdraw\\\");\\n        require(token.transfer(_to, balance), \\\"token didn't transfer\\\");\\n        //selfdestruct(_to); // OVM does not support selfdestruct\\n    }\\n}\\n\\n\\ncontract ServiceRegistry is Utils, ServiceRegistryConfigurableParameters {\\n    Token public token;\\n\\n    mapping(address => uint256) public service_valid_till;\\n    mapping(address => string) public urls;  // URLs of services for HTTP access\\n\\n    // An append-only list of addresses that have ever made a deposit.\\n    // Starting from this list, all alive registrations can be figured out.\\n    address[] public ever_made_deposits;\\n\\n    // @param service The address of the registered service provider\\n    // @param valid_till The timestamp of the moment when the registration expires\\n    // @param deposit_amount The amount of deposit transferred\\n    // @param deposit The address of Deposit instance where the deposit is stored\\n    event RegisteredService(address indexed service, uint256 valid_till, uint256 deposit_amount, Deposit deposit_contract);\\n\\n    // @param _token_for_registration The address of the ERC20 token contract that services use for registration fees\\n    // @param _controller The address that can change parameters and deprecate the ServiceRegistry\\n    // @param _initial_price The amount of tokens needed initially for a slot\\n    // @param _price_bump_numerator The ratio of price bump after deposit is made (numerator)\\n    // @param _price_bump_denominator The ratio of price bump after deposit is made (denominator)\\n    // @param _decay_constant The number of seconds after which the price becomes roughly 1/e\\n    // @param _min_price The minimum amount of tokens needed for a slot\\n    // @param _registration_duration The number of seconds (roughly, barring block time & miners'\\n    // timestamp errors) of a slot gained for a successful deposit\\n    constructor(\\n            Token _token_for_registration,\\n            address _controller,\\n            uint256 _initial_price,\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator,\\n            uint256 _decay_constant,\\n            uint256 _min_price,\\n            uint256 _registration_duration\\n    ) {\\n        require(address(_token_for_registration) != address(0x0), \\\"token at address zero\\\");\\n        require(contractExists(address(_token_for_registration)), \\\"token has no code\\\");\\n        require(_initial_price >= min_price, \\\"initial price too low\\\");\\n        require(_initial_price <= 2 ** 90, \\\"intiial price too high\\\");\\n\\n        token = _token_for_registration;\\n        // Check if the contract is indeed a token contract\\n        require(token.totalSupply() > 0, \\\"total supply zero\\\");\\n        controller = _controller;\\n\\n        // Set up the price and the set price timestamp\\n        set_price = _initial_price;\\n        set_price_at = block.timestamp;\\n\\n        // Set the parameters\\n        changeParametersInternal(_price_bump_numerator, _price_bump_denominator, _decay_constant, _min_price, _registration_duration);\\n    }\\n\\n    // @notice Locks tokens and registers a service or extends the registration\\n    // @param _limit_amount The biggest amount of tokens that the caller is willing to deposit\\n    // The call fails if the current price is higher (this is always possible\\n    // when other parties have just called `deposit()`)\\n    function deposit(uint _limit_amount) public returns (bool _success) {\\n        require(! deprecated, \\\"this contract was deprecated\\\");\\n\\n        uint256 amount = currentPrice();\\n        require(_limit_amount >= amount, \\\"not enough limit\\\");\\n\\n        // Extend the service position.\\n        uint256 valid_till = service_valid_till[msg.sender];\\n        if (valid_till == 0) { // a first time joiner\\n            ever_made_deposits.push(msg.sender);\\n        }\\n        if (valid_till < block.timestamp) { // a first time joiner or an expired service.\\n            valid_till = block.timestamp;\\n        }\\n        // Check against overflow.\\n        require(valid_till < valid_till + registration_duration, \\\"overflow during extending the registration\\\");\\n        valid_till = valid_till + registration_duration;\\n        assert(valid_till > service_valid_till[msg.sender]);\\n        service_valid_till[msg.sender] = valid_till;\\n\\n        // Record the price\\n        set_price = amount * price_bump_numerator / price_bump_denominator;\\n        if (set_price > 2 ** 90) {\\n            set_price = 2 ** 90; // Preventing overflows.\\n        }\\n        set_price_at = block.timestamp;\\n\\n        // Move the deposit in a new Deposit contract.\\n        assert(block.timestamp < valid_till);\\n        Deposit depo = new Deposit(token, valid_till, msg.sender, this);\\n        require(token.transferFrom(msg.sender, address(depo), amount), \\\"Token transfer for deposit failed\\\");\\n\\n        // Fire event\\n        emit RegisteredService(msg.sender, valid_till, amount, depo);\\n\\n        return true;\\n    }\\n\\n    /// @notice Sets the URL used to access a service via HTTP\\n    /// Only a currently registered service can call this successfully\\n    /// @param new_url The new URL string to be stored\\n    function setURL(string memory new_url) public returns (bool _success) {\\n        require(hasValidRegistration(msg.sender), \\\"registration expired\\\");\\n        require(bytes(new_url).length != 0, \\\"new url is empty string\\\");\\n        urls[msg.sender] = new_url;\\n        return true;\\n    }\\n\\n    /// A getter function for seeing the length of ever_made_deposits array\\n    function everMadeDepositsLen() public view returns (uint256 _len) {\\n        return ever_made_deposits.length;\\n    }\\n\\n    function hasValidRegistration(address _address) public view returns (bool _has_registration) {\\n        return block.timestamp < service_valid_till[_address];\\n    }\\n}\\n\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\",\"keccak256\":\"0x5a967df24ca5e9bb01d0b5d550b6a420d6998831766e031686ca7bba11362bae\",\"license\":\"MIT\"},\"data/source/services/UserDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"../raiden/Token.sol\\\";\\nimport \\\"../raiden/Utils.sol\\\";\\n\\ncontract UserDeposit is Utils {\\n    uint constant public withdraw_delay = 100;  // time before withdraw is allowed in blocks\\n\\n    // Token to be used for the deposit\\n    Token public token;\\n\\n    // Trusted contracts (can execute `transfer`)\\n    address public msc_address;\\n    address public one_to_n_address;\\n\\n    // Total amount of tokens that have been deposited. This is monotonous and\\n    // doing a transfer or withdrawing tokens will not decrease total_deposit!\\n    mapping(address => uint256) public total_deposit;\\n    // Current user's balance, ignoring planned withdraws\\n    mapping(address => uint256) public balances;\\n    mapping(address => WithdrawPlan) public withdraw_plans;\\n\\n    // The sum of all balances\\n    uint256 public whole_balance = 0;\\n    // Deposit limit for this whole contract\\n    uint256 public whole_balance_limit;\\n\\n    /*\\n     *  Structs\\n     */\\n    struct WithdrawPlan {\\n        uint256 amount;\\n        uint256 withdraw_block;  // earliest block at which withdraw is allowed\\n    }\\n\\n    /*\\n     *  Events\\n     */\\n\\n    event BalanceReduced(address indexed owner, uint newBalance);\\n    event WithdrawPlanned(address indexed withdrawer, uint plannedBalance);\\n\\n    /*\\n     *  Modifiers\\n     */\\n\\n    modifier canTransfer() {\\n        require(msg.sender == msc_address || msg.sender == one_to_n_address, \\\"unknown caller\\\");\\n        _;\\n    }\\n\\n    /*\\n     *  Constructor\\n     */\\n\\n    /// @notice Set the default values for the smart contract\\n    /// @param _token_address The address of the token to use for rewards\\n    constructor(address _token_address, uint256 _whole_balance_limit)\\n    {\\n        // check token contract\\n        require(_token_address != address(0x0), \\\"token at address zero\\\");\\n        require(contractExists(_token_address), \\\"token has no code\\\");\\n        token = Token(_token_address);\\n        require(token.totalSupply() > 0, \\\"token has no total supply\\\"); // Check if the contract is indeed a token contract\\n        // check and set the whole balance limit\\n        require(_whole_balance_limit > 0, \\\"whole balance limit is zero\\\");\\n        whole_balance_limit = _whole_balance_limit;\\n    }\\n\\n    /// @notice Specify trusted contracts. This has to be done outside of the\\n    /// constructor to avoid cyclic dependencies.\\n    /// @param _msc_address Address of the MonitoringService contract\\n    /// @param _one_to_n_address Address of the OneToN contract\\n    function init(address _msc_address, address _one_to_n_address)\\n        external\\n    {\\n        // prevent changes of trusted contracts after initialization\\n        require(msc_address == address(0x0) && one_to_n_address == address(0x0), \\\"already initialized\\\");\\n\\n        // check monitoring service contract\\n        require(_msc_address != address(0x0), \\\"MS contract at address zero\\\");\\n        require(contractExists(_msc_address), \\\"MS contract has no code\\\");\\n        msc_address = _msc_address;\\n\\n        // check one to n contract\\n        require(_one_to_n_address != address(0x0), \\\"OneToN at address zero\\\");\\n        require(contractExists(_one_to_n_address), \\\"OneToN has no code\\\");\\n        one_to_n_address = _one_to_n_address;\\n    }\\n\\n    /// @notice Deposit tokens. The amount of transferred tokens will be\\n    /// `new_total_deposit - total_deposit[beneficiary]`. This makes the\\n    /// function behavior predictable and idempotent. Can be called several\\n    /// times and on behalf of other accounts.\\n    /// @param beneficiary The account benefiting from the deposit\\n    /// @param new_total_deposit The total sum of tokens that have been\\n    /// deposited by the user by calling this function.\\n    function deposit(address beneficiary, uint256 new_total_deposit)\\n        external\\n    {\\n        require(new_total_deposit > total_deposit[beneficiary], \\\"deposit not increasing\\\");\\n\\n        // Calculate the actual amount of tokens that will be transferred\\n        uint256 added_deposit = new_total_deposit - total_deposit[beneficiary];\\n\\n        balances[beneficiary] += added_deposit;\\n        total_deposit[beneficiary] += added_deposit;\\n\\n        // Update whole_balance, but take care against overflows.\\n        require(whole_balance + added_deposit >= whole_balance, \\\"overflowing deposit\\\");\\n        whole_balance += added_deposit;\\n\\n        // Decline deposit if the whole balance is bigger than the limit.\\n        require(whole_balance <= whole_balance_limit, \\\"too much deposit\\\");\\n\\n        // Actual transfer.\\n        require(token.transferFrom(msg.sender, address(this), added_deposit), \\\"tokens didn't transfer\\\");\\n    }\\n\\n    /// @notice Internally transfer deposits between two addresses.\\n    /// Sender and receiver must be different or the transaction will fail.\\n    /// @param sender Account from which the amount will be deducted\\n    /// @param receiver Account to which the amount will be credited\\n    /// @param amount Amount of tokens to be transferred\\n    /// @return success true if transfer has been done successfully, otherwise false\\n    function transfer(\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    )\\n        external\\n        canTransfer()\\n        returns (bool success)\\n    {\\n        require(sender != receiver, \\\"sender == receiver\\\");\\n        if (balances[sender] >= amount && amount > 0) {\\n            balances[sender] -= amount;\\n            balances[receiver] += amount;\\n            emit BalanceReduced(sender, balances[sender]);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice Announce intention to withdraw tokens.\\n    /// Sets the planned withdraw amount and resets the withdraw_block.\\n    /// There is only one planned withdrawal at a time, the old one gets overwritten.\\n    /// @param amount Maximum amount of tokens to be withdrawn\\n    function planWithdraw(uint256 amount)\\n        external\\n    {\\n        require(amount > 0, \\\"withdrawing zero\\\");\\n        require(balances[msg.sender] >= amount, \\\"withdrawing too much\\\");\\n\\n        withdraw_plans[msg.sender] = WithdrawPlan({\\n            amount: amount,\\n            withdraw_block: block.number + withdraw_delay\\n        });\\n        emit WithdrawPlanned(msg.sender, balances[msg.sender] - amount);\\n    }\\n\\n    /// @notice Execute a planned withdrawal\\n    /// Will only work after the withdraw_delay has expired.\\n    /// An amount lower or equal to the planned amount may be withdrawn.\\n    /// Removes the withdraw plan even if not the full amount has been\\n    /// withdrawn.\\n    /// @param amount Amount of tokens to be withdrawn\\n    function withdraw(uint256 amount)\\n        external\\n    {\\n        WithdrawPlan storage withdraw_plan = withdraw_plans[msg.sender];\\n        require(amount <= withdraw_plan.amount, \\\"withdrawing more than planned\\\");\\n        require(withdraw_plan.withdraw_block <= block.number, \\\"withdrawing too early\\\");\\n        uint256 withdrawable = min(amount, balances[msg.sender]);\\n        balances[msg.sender] -= withdrawable;\\n\\n        // Update whole_balance, but take care against underflows.\\n        require(whole_balance - withdrawable <= whole_balance, \\\"underflow in whole_balance\\\");\\n        whole_balance -= withdrawable;\\n\\n        emit BalanceReduced(msg.sender, balances[msg.sender]);\\n        delete withdraw_plans[msg.sender];\\n\\n        require(token.transfer(msg.sender, withdrawable), \\\"tokens didn't transfer\\\");\\n    }\\n\\n    /// @notice The owner's balance with planned withdrawals deducted\\n    /// @param owner Address for which the balance should be returned\\n    /// @return remaining_balance The remaining balance after planned withdrawals\\n    function effectiveBalance(address owner)\\n        external\\n        view\\n        returns (uint256 remaining_balance)\\n    {\\n        WithdrawPlan storage withdraw_plan = withdraw_plans[owner];\\n        if (withdraw_plan.amount > balances[owner]) {\\n            return 0;\\n        }\\n        return balances[owner] - withdraw_plan.amount;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        return a > b ? b : a;\\n    }\\n}\\n\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\",\"keccak256\":\"0x070b4f1949eec8099a1bc6e8a91789ba64853074e79b6a272d0bd8cc8f0e3053\",\"license\":\"MIT\"}},\"version\":1}"
        },
        "SecretRegistry": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "secrethash",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "secret",
                  "type": "bytes32"
                }
              ],
              "name": "SecretRevealed",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "secrethash",
                  "type": "bytes32"
                }
              ],
              "name": "getSecretRevealBlockHeight",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "secret",
                  "type": "bytes32"
                }
              ],
              "name": "registerSecret",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32[]",
                  "name": "secrets",
                  "type": "bytes32[]"
                }
              ],
              "name": "registerSecretBatch",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "bin": "60806040523480156100195760008061001661001f565b50505b5061008a565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561005757808601518282016040015260200161003c565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b610599806100996000396000f3fe60806040523480156100195760008061001661034f565b50505b506004361061004a5760003560e01c806312ad8bfc14610058578063bbe8a9b614610092578063c1f6294614610157575b60008061005561034f565b50505b61007e600480360360208110156100775760008061007461034f565b50505b503561018f565b604051901515815260200160405180910390f35b61007e600480360360208110156100b1576000806100ae61034f565b50505b810190602081018135600160201b8111156100d4576000806100d161034f565b50505b8201836020820111156100ef576000806100ec61034f565b50505b803590602001918460208302840111600160201b831117156101195760008061011661034f565b50505b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506102f0945050505050565b61017d600480360360208110156101765760008061017361034f565b50505b5035610333565b60405190815260200160405180910390f35b600080600283604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106101e35780518252601f1990920191602091820191016101c4565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855a61021b6103ba565b505050505015801561023a573d6000803e3d600061023761034f565b50505b5050506040513d60208110156102585760008061025561034f565b50505b810190808051600081815260208190529094509250604091508290502061027d6104a5565b111561028d5760009150506102eb565b5a610296610505565b600082815260208190526040902081906102ae61054b565b505050807fc8ee7ba45d0c5351df845eda156d523bd6865844a5f2c69df35b757e2f794fa18460405190815260200160405180910390a260019150505b919050565b60006001815b835181101561032c5761031b84828151811061030e57fe5b602002602001015161018f565b61032457600091505b6001016102f6565b5092915050565b60008181526020819052604081206103496104a5565b92915050565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561038757808601518282016040015260200161036c565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b638540661f598160e01b81526103eb565b8080831115610349575090919050565b8080831015610349575090919050565b836004820152846024820152606060448201528660648201526084810160005b8881101561042357808801518282015260200161040b565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af150596104788d3d6103db565b8c0161048481876103cb565b5b828110156104995760008152602001610485565b50929c50505050505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015610500576000828201526020016104e9565b505050565b635a98c361598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b805160008252935060206104e9565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b6000815260206104e956",
          "bin-runtime": "60806040523480156100195760008061001661034f565b50505b506004361061004a5760003560e01c806312ad8bfc14610058578063bbe8a9b614610092578063c1f6294614610157575b60008061005561034f565b50505b61007e600480360360208110156100775760008061007461034f565b50505b503561018f565b604051901515815260200160405180910390f35b61007e600480360360208110156100b1576000806100ae61034f565b50505b810190602081018135600160201b8111156100d4576000806100d161034f565b50505b8201836020820111156100ef576000806100ec61034f565b50505b803590602001918460208302840111600160201b831117156101195760008061011661034f565b50505b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506102f0945050505050565b61017d600480360360208110156101765760008061017361034f565b50505b5035610333565b60405190815260200160405180910390f35b600080600283604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106101e35780518252601f1990920191602091820191016101c4565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855a61021b6103ba565b505050505015801561023a573d6000803e3d600061023761034f565b50505b5050506040513d60208110156102585760008061025561034f565b50505b810190808051600081815260208190529094509250604091508290502061027d6104a5565b111561028d5760009150506102eb565b5a610296610505565b600082815260208190526040902081906102ae61054b565b505050807fc8ee7ba45d0c5351df845eda156d523bd6865844a5f2c69df35b757e2f794fa18460405190815260200160405180910390a260019150505b919050565b60006001815b835181101561032c5761031b84828151811061030e57fe5b602002602001015161018f565b61032457600091505b6001016102f6565b5092915050565b60008181526020819052604081206103496104a5565b92915050565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561038757808601518282016040015260200161036c565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b638540661f598160e01b81526103eb565b8080831115610349575090919050565b8080831015610349575090919050565b836004820152846024820152606060448201528660648201526084810160005b8881101561042357808801518282015260200161040b565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af150596104788d3d6103db565b8c0161048481876103cb565b5b828110156104995760008152602001610485565b50929c50505050505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015610500576000828201526020016104e9565b505050565b635a98c361598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b805160008252935060206104e9565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b6000815260206104e956",
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"secrethash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"SecretRevealed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secrethash\",\"type\":\"bytes32\"}],\"name\":\"getSecretRevealBlockHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"registerSecret\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"secrets\",\"type\":\"bytes32[]\"}],\"name\":\"registerSecretBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getSecretRevealBlockHeight(bytes32)\":{\"params\":{\"secrethash\":\"The hash of the registered secret `keccak256(secret)`\"},\"returns\":{\"_0\":\"The block number at which the secret was revealed\"}},\"registerSecret(bytes32)\":{\"params\":{\"secret\":\"The secret used to lock the hash time lock\"},\"returns\":{\"_0\":\"true if secret was registered, false if the secret was already registered\"}},\"registerSecretBatch(bytes32[])\":{\"params\":{\"secrets\":\"The array of secrets to be registered\"},\"returns\":{\"_0\":\"true if all secrets could be registered, false otherwise\"}}},\"title\":\"SecretRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getSecretRevealBlockHeight(bytes32)\":{\"notice\":\"Get the stored block number at which the secret was revealed\"},\"registerSecret(bytes32)\":{\"notice\":\"Registers a hash time lock secret and saves the block number. This allows the lock to be unlocked after the expiration block\"},\"registerSecretBatch(bytes32[])\":{\"notice\":\"Registers multiple hash time lock secrets and saves the block number\"}},\"notice\":\"SecretRegistry contract for registering secrets from Raiden Network clients.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/raiden/SecretRegistry.sol\":\"SecretRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/raiden/SecretRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @title SecretRegistry\\n/// @notice SecretRegistry contract for registering secrets from Raiden Network\\n/// clients.\\ncontract SecretRegistry {\\n    // sha256(secret) => block number at which the secret was revealed\\n    mapping(bytes32 => uint256) private secrethash_to_block;\\n\\n    event SecretRevealed(bytes32 indexed secrethash, bytes32 secret);\\n\\n    /// @notice Registers a hash time lock secret and saves the block number.\\n    /// This allows the lock to be unlocked after the expiration block\\n    /// @param secret The secret used to lock the hash time lock\\n    /// @return true if secret was registered, false if the secret was already\\n    /// registered\\n    function registerSecret(bytes32 secret) public returns (bool) {\\n        bytes32 secrethash = sha256(abi.encodePacked(secret));\\n        if (secrethash_to_block[secrethash] > 0) {\\n            return false;\\n        }\\n        secrethash_to_block[secrethash] = block.number;\\n        emit SecretRevealed(secrethash, secret);\\n        return true;\\n    }\\n\\n    /// @notice Registers multiple hash time lock secrets and saves the block\\n    /// number\\n    /// @param secrets The array of secrets to be registered\\n    /// @return true if all secrets could be registered, false otherwise\\n    function registerSecretBatch(bytes32[] memory secrets) public returns (bool) {\\n        bool completeSuccess = true;\\n        for(uint i = 0; i < secrets.length; i++) {\\n            if(!registerSecret(secrets[i])) {\\n                completeSuccess = false;\\n            }\\n        }\\n        return completeSuccess;\\n    }\\n\\n    /// @notice Get the stored block number at which the secret was revealed\\n    /// @param secrethash The hash of the registered secret `keccak256(secret)`\\n    /// @return The block number at which the secret was revealed\\n    function getSecretRevealBlockHeight(bytes32 secrethash) public view returns (uint256) {\\n        return secrethash_to_block[secrethash];\\n    }\\n}\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\",\"keccak256\":\"0x828dbf9a344f66cb982df97f677d10942d1b163287b890860be40230b236642e\",\"license\":\"MIT\"}},\"version\":1}"
        },
        "ServiceRegistry": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "contract Token",
                  "name": "_token_for_registration",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_controller",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_initial_price",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_price_bump_numerator",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_price_bump_denominator",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_decay_constant",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_min_price",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_registration_duration",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "service",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "valid_till",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "deposit_amount",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "contract Deposit",
                  "name": "deposit_contract",
                  "type": "address"
                }
              ],
              "name": "RegisteredService",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_price_bump_numerator",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_price_bump_denominator",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_decay_constant",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_min_price",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_registration_duration",
                  "type": "uint256"
                }
              ],
              "name": "changeParameters",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "_success",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "contract_address",
                  "type": "address"
                }
              ],
              "name": "contractExists",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "controller",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "currentPrice",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decay_constant",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_set_price",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_seconds_passed",
                  "type": "uint256"
                }
              ],
              "name": "decayedPrice",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_limit_amount",
                  "type": "uint256"
                }
              ],
              "name": "deposit",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "_success",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "deprecated",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "everMadeDepositsLen",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "_len",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "ever_made_deposits",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "hasValidRegistration",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "_has_registration",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "min_price",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "price_bump_denominator",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "price_bump_numerator",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "registration_duration",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "service_valid_till",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "setDeprecationSwitch",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "_success",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "new_url",
                  "type": "string"
                }
              ],
              "name": "setURL",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "_success",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "set_price",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "set_price_at",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "token",
              "outputs": [
                {
                  "internalType": "contract Token",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "urls",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "bin": "",
          "bin-runtime": "",
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"_token_for_registration\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initial_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price_bump_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price_bump_denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decay_constant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_registration_duration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valid_till\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract Deposit\",\"name\":\"deposit_contract\",\"type\":\"address\"}],\"name\":\"RegisteredService\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price_bump_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price_bump_denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decay_constant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_registration_duration\",\"type\":\"uint256\"}],\"name\":\"changeParameters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decay_constant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_set_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seconds_passed\",\"type\":\"uint256\"}],\"name\":\"decayedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"everMadeDepositsLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_len\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ever_made_deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasValidRegistration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_has_registration\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price_bump_denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price_bump_numerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registration_duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"service_valid_till\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDeprecationSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"new_url\",\"type\":\"string\"}],\"name\":\"setURL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"set_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"set_price_at\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"urls\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"contractExists(address)\":{\"params\":{\"contract_address\":\"The address to check whether a contract is deployed or not\"},\"returns\":{\"_0\":\"True if a contract exists, false otherwise\"}},\"decayedPrice(uint256,uint256)\":{\"params\":{\"_seconds_passed\":\"The number of seconds passed since the initial price was set\",\"_set_price\":\"The initial price\"}},\"setURL(string)\":{\"params\":{\"new_url\":\"The new URL string to be stored\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contractExists(address)\":{\"notice\":\"Check if a contract exists\"},\"currentPrice()\":{\"notice\":\"The amount to deposit for registration or extension Note: the price moves quickly depending on what other addresses do. The current price might change after you send a `deposit()` transaction before the transaction is executed.\"},\"decay_constant()\":{\"notice\":\"The amount of time (in seconds) till the price decreases to roughly 1/e.\"},\"decayedPrice(uint256,uint256)\":{\"notice\":\"Calculates the decreased price after a number of seconds\"},\"everMadeDepositsLen()\":{\"notice\":\"A getter function for seeing the length of ever_made_deposits array\"},\"setURL(string)\":{\"notice\":\"Sets the URL used to access a service via HTTP Only a currently registered service can call this successfully\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/services/ServiceRegistry.sol\":\"ServiceRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/raiden/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface Token {\\n\\n    /// @return supply total amount of tokens\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return balance The balance\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return success Whether the approval was successful or not\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return remaining Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    // Optionally implemented function to show the number of decimals for the token\\n    function decimals() external view returns (uint8 decimals);\\n}\\n\",\"keccak256\":\"0x5a8ccb9fa426228d9e213164f22a94b0ac57f1aa15ab76ce88a96177edd7b0b3\",\"license\":\"MIT\"},\"data/source/raiden/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @title Utils\\n/// @notice Utils contract for various helpers used by the Raiden Network smart\\n/// contracts.\\ncontract Utils {\\n    /// @notice Check if a contract exists\\n    /// @param contract_address The address to check whether a contract is\\n    /// deployed or not\\n    /// @return True if a contract exists, false otherwise\\n    function contractExists(address contract_address) public view returns (bool) {\\n        uint size;\\n\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            size := extcodesize(contract_address)\\n        }\\n\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x3fb4df9cdadd3711bffff81a451868c7a1ee8a2f3ff1a20a4343def15cb38e0f\",\"license\":\"MIT\"},\"data/source/services/ServiceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable indentation */\\n/* solium-disable security/no-block-members */\\npragma solidity 0.7.6;\\n\\nimport \\\"../raiden/Token.sol\\\";\\nimport \\\"../raiden/Utils.sol\\\";\\n\\ncontract ServiceRegistryConfigurableParameters {\\n    address public controller;\\n\\n    modifier onlyController() {\\n        require(msg.sender == controller, \\\"caller is not the controller\\\");\\n        _;\\n    }\\n\\n    // After a price is set to set_price at timestamp set_price_at,\\n    // the price decays according to decayedPrice().\\n    uint256 public set_price;\\n    uint256 public set_price_at;\\n\\n    /// The amount of time (in seconds) till the price decreases to roughly 1/e.\\n    uint256 public decay_constant = 200 days;\\n\\n    // Once the price is at min_price, it can't decay further.\\n    uint256 public min_price = 1000;\\n\\n    // Whenever a deposit comes in, the price is multiplied by numerator / denominator.\\n    uint256 public price_bump_numerator = 1;\\n    uint256 public price_bump_denominator = 1;\\n\\n    // The duration of service registration/extension in seconds\\n    uint256 public registration_duration = 180 days;\\n\\n    // If true, new deposits are no longer accepted.\\n    bool public deprecated = false;\\n\\n    function setDeprecationSwitch() public onlyController returns (bool _success) {\\n        deprecated = true;\\n        return true;\\n    }\\n\\n    function changeParameters(\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator,\\n            uint256 _decay_constant,\\n            uint256 _min_price,\\n            uint256 _registration_duration\\n    ) public onlyController returns (bool _success) {\\n        changeParametersInternal(\\n            _price_bump_numerator,\\n            _price_bump_denominator,\\n            _decay_constant,\\n            _min_price,\\n            _registration_duration\\n        );\\n        return true;\\n    }\\n\\n    function changeParametersInternal(\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator,\\n            uint256 _decay_constant,\\n            uint256 _min_price,\\n            uint256 _registration_duration\\n    ) internal {\\n        refreshPrice();\\n        setPriceBumpParameters(_price_bump_numerator, _price_bump_denominator);\\n        setMinPrice(_min_price);\\n        setDecayConstant(_decay_constant);\\n        setRegistrationDuration(_registration_duration);\\n    }\\n\\n    // Updates set_price to be currentPrice() and set_price_at to be now\\n    function refreshPrice() private {\\n        set_price = currentPrice();\\n        set_price_at = block.timestamp;\\n    }\\n\\n    function setPriceBumpParameters(\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator\\n    ) private {\\n        require(_price_bump_denominator > 0, \\\"divide by zero\\\");\\n        require(_price_bump_numerator >= _price_bump_denominator, \\\"price dump instead of bump\\\");\\n        require(_price_bump_numerator < 2 ** 40, \\\"price dump numerator is too big\\\");\\n        price_bump_numerator = _price_bump_numerator;\\n        price_bump_denominator = _price_bump_denominator;\\n    }\\n\\n    function setMinPrice(uint256 _min_price) private {\\n        // No checks.  Even allowing zero.\\n        min_price = _min_price;\\n        // No checks or modifications on set_price.\\n        // Even if set_price is smaller than min_price, currentPrice() function returns min_price.\\n    }\\n\\n    function setDecayConstant(uint256 _decay_constant) private {\\n        require(_decay_constant > 0, \\\"attempt to set zero decay constant\\\");\\n        require(_decay_constant < 2 ** 40, \\\"too big decay constant\\\");\\n        decay_constant = _decay_constant;\\n    }\\n\\n    function setRegistrationDuration(uint256 _registration_duration) private {\\n        // No checks.  Even allowing zero (when no new registrations are possible).\\n        registration_duration = _registration_duration;\\n    }\\n\\n\\n    /// @notice The amount to deposit for registration or extension\\n    /// Note: the price moves quickly depending on what other addresses do.\\n    /// The current price might change after you send a `deposit()` transaction\\n    /// before the transaction is executed.\\n    function currentPrice() public view returns (uint256) {\\n        require(block.timestamp >= set_price_at, \\\"An underflow in price computation\\\");\\n        uint256 seconds_passed = block.timestamp - set_price_at;\\n\\n        return decayedPrice(set_price, seconds_passed);\\n    }\\n\\n\\n    /// @notice Calculates the decreased price after a number of seconds\\n    /// @param _set_price The initial price\\n    /// @param _seconds_passed The number of seconds passed since the initial\\n    /// price was set\\n    function decayedPrice(uint256 _set_price, uint256 _seconds_passed) public\\n        view returns (uint256) {\\n        // We are here trying to approximate some exponential decay.\\n        // exp(- X / A) where\\n        //   X is the number of seconds since the last price change\\n        //   A is the decay constant (A = 200 days corresponds to 0.5% decrease per day)\\n\\n        // exp(- X / A) ~~ P / Q where\\n        //   P = 24 A^4\\n        //   Q = 24 A^4 + 24 A^3X + 12 A^2X^2 + 4 AX^3 + X^4\\n        // Note: swap P and Q, and then think about the Taylor expansion.\\n\\n        uint256 X = _seconds_passed;\\n\\n        if (X >= 2 ** 40) { // The computation below overflows.\\n            return min_price;\\n        }\\n\\n        uint256 A = decay_constant;\\n\\n        uint256 P = 24 * (A ** 4);\\n        uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;\\n\\n        // The multiplication below is not supposed to overflow because\\n        // _set_price should be at most 2 ** 90 and\\n        // P should be at most 24 * (2 ** 40).\\n        uint256 price = _set_price * P / Q;\\n\\n        // Not allowing a price smaller than min_price.\\n        // Once it's too low it's too low forever.\\n        if (price < min_price) {\\n            price = min_price;\\n        }\\n        return price;\\n    }\\n}\\n\\n\\ncontract Deposit {\\n    // This contract holds ERC20 tokens as deposit until a predetemined point of time.\\n\\n    // The ERC20 token contract that the deposit is about.\\n    Token public token;\\n\\n    // The address of ServiceRegistry contract that this deposit is associated with.\\n    // If the address has no code, service_registry.deprecated() call will fail.\\n    ServiceRegistryConfigurableParameters service_registry;\\n\\n    // The address that can withdraw the deposit after the release time.\\n    address public withdrawer;\\n\\n    // The timestamp after which the withdrawer can withdraw the deposit.\\n    uint256 public release_at;\\n\\n    /// @param _token The address of the ERC20 token contract where the deposit is accounted\\n    /// @param _release_at The timestap after which the withdrawer can withdraw the deposit\\n    /// @param _withdrawer The address that can withdraw the deposit after the release time\\n    /// @param _service_registry The address of ServiceRegistry whose deprecation enables immediate withdrawals\\n    constructor(\\n        Token _token,\\n        uint256 _release_at,\\n        address _withdrawer,\\n        ServiceRegistryConfigurableParameters _service_registry\\n    ) {\\n        token = _token;\\n        // Don't care even if it's in the past.\\n        release_at = _release_at;\\n        withdrawer = _withdrawer;\\n        service_registry = _service_registry;\\n    }\\n\\n    // In order to make a deposit, transfer the ERC20 token into this contract.\\n    // If you transfer a wrong kind of ERC20 token or ETH into this contract,\\n    // these tokens will be lost forever.\\n\\n    /// @notice Withdraws the tokens that have been deposited\\n    /// Only `withdrawer` can call this.\\n    /// @param _to The address where the withdrawn tokens should go\\n    function withdraw(address payable _to) external {\\n        uint256 balance = token.balanceOf(address(this));\\n        require(msg.sender == withdrawer, \\\"the caller is not the withdrawer\\\");\\n        require(block.timestamp >= release_at || service_registry.deprecated(), \\\"deposit not released yet\\\");\\n        require(balance > 0, \\\"nothing to withdraw\\\");\\n        require(token.transfer(_to, balance), \\\"token didn't transfer\\\");\\n        //selfdestruct(_to); // OVM does not support selfdestruct\\n    }\\n}\\n\\n\\ncontract ServiceRegistry is Utils, ServiceRegistryConfigurableParameters {\\n    Token public token;\\n\\n    mapping(address => uint256) public service_valid_till;\\n    mapping(address => string) public urls;  // URLs of services for HTTP access\\n\\n    // An append-only list of addresses that have ever made a deposit.\\n    // Starting from this list, all alive registrations can be figured out.\\n    address[] public ever_made_deposits;\\n\\n    // @param service The address of the registered service provider\\n    // @param valid_till The timestamp of the moment when the registration expires\\n    // @param deposit_amount The amount of deposit transferred\\n    // @param deposit The address of Deposit instance where the deposit is stored\\n    event RegisteredService(address indexed service, uint256 valid_till, uint256 deposit_amount, Deposit deposit_contract);\\n\\n    // @param _token_for_registration The address of the ERC20 token contract that services use for registration fees\\n    // @param _controller The address that can change parameters and deprecate the ServiceRegistry\\n    // @param _initial_price The amount of tokens needed initially for a slot\\n    // @param _price_bump_numerator The ratio of price bump after deposit is made (numerator)\\n    // @param _price_bump_denominator The ratio of price bump after deposit is made (denominator)\\n    // @param _decay_constant The number of seconds after which the price becomes roughly 1/e\\n    // @param _min_price The minimum amount of tokens needed for a slot\\n    // @param _registration_duration The number of seconds (roughly, barring block time & miners'\\n    // timestamp errors) of a slot gained for a successful deposit\\n    constructor(\\n            Token _token_for_registration,\\n            address _controller,\\n            uint256 _initial_price,\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator,\\n            uint256 _decay_constant,\\n            uint256 _min_price,\\n            uint256 _registration_duration\\n    ) {\\n        require(address(_token_for_registration) != address(0x0), \\\"token at address zero\\\");\\n        require(contractExists(address(_token_for_registration)), \\\"token has no code\\\");\\n        require(_initial_price >= min_price, \\\"initial price too low\\\");\\n        require(_initial_price <= 2 ** 90, \\\"intiial price too high\\\");\\n\\n        token = _token_for_registration;\\n        // Check if the contract is indeed a token contract\\n        require(token.totalSupply() > 0, \\\"total supply zero\\\");\\n        controller = _controller;\\n\\n        // Set up the price and the set price timestamp\\n        set_price = _initial_price;\\n        set_price_at = block.timestamp;\\n\\n        // Set the parameters\\n        changeParametersInternal(_price_bump_numerator, _price_bump_denominator, _decay_constant, _min_price, _registration_duration);\\n    }\\n\\n    // @notice Locks tokens and registers a service or extends the registration\\n    // @param _limit_amount The biggest amount of tokens that the caller is willing to deposit\\n    // The call fails if the current price is higher (this is always possible\\n    // when other parties have just called `deposit()`)\\n    function deposit(uint _limit_amount) public returns (bool _success) {\\n        require(! deprecated, \\\"this contract was deprecated\\\");\\n\\n        uint256 amount = currentPrice();\\n        require(_limit_amount >= amount, \\\"not enough limit\\\");\\n\\n        // Extend the service position.\\n        uint256 valid_till = service_valid_till[msg.sender];\\n        if (valid_till == 0) { // a first time joiner\\n            ever_made_deposits.push(msg.sender);\\n        }\\n        if (valid_till < block.timestamp) { // a first time joiner or an expired service.\\n            valid_till = block.timestamp;\\n        }\\n        // Check against overflow.\\n        require(valid_till < valid_till + registration_duration, \\\"overflow during extending the registration\\\");\\n        valid_till = valid_till + registration_duration;\\n        assert(valid_till > service_valid_till[msg.sender]);\\n        service_valid_till[msg.sender] = valid_till;\\n\\n        // Record the price\\n        set_price = amount * price_bump_numerator / price_bump_denominator;\\n        if (set_price > 2 ** 90) {\\n            set_price = 2 ** 90; // Preventing overflows.\\n        }\\n        set_price_at = block.timestamp;\\n\\n        // Move the deposit in a new Deposit contract.\\n        assert(block.timestamp < valid_till);\\n        Deposit depo = new Deposit(token, valid_till, msg.sender, this);\\n        require(token.transferFrom(msg.sender, address(depo), amount), \\\"Token transfer for deposit failed\\\");\\n\\n        // Fire event\\n        emit RegisteredService(msg.sender, valid_till, amount, depo);\\n\\n        return true;\\n    }\\n\\n    /// @notice Sets the URL used to access a service via HTTP\\n    /// Only a currently registered service can call this successfully\\n    /// @param new_url The new URL string to be stored\\n    function setURL(string memory new_url) public returns (bool _success) {\\n        require(hasValidRegistration(msg.sender), \\\"registration expired\\\");\\n        require(bytes(new_url).length != 0, \\\"new url is empty string\\\");\\n        urls[msg.sender] = new_url;\\n        return true;\\n    }\\n\\n    /// A getter function for seeing the length of ever_made_deposits array\\n    function everMadeDepositsLen() public view returns (uint256 _len) {\\n        return ever_made_deposits.length;\\n    }\\n\\n    function hasValidRegistration(address _address) public view returns (bool _has_registration) {\\n        return block.timestamp < service_valid_till[_address];\\n    }\\n}\\n\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\",\"keccak256\":\"0x5a967df24ca5e9bb01d0b5d550b6a420d6998831766e031686ca7bba11362bae\",\"license\":\"MIT\"}},\"version\":1}"
        },
        "ServiceRegistryConfigurableParameters": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_price_bump_numerator",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_price_bump_denominator",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_decay_constant",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_min_price",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_registration_duration",
                  "type": "uint256"
                }
              ],
              "name": "changeParameters",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "_success",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "controller",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "currentPrice",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decay_constant",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_set_price",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_seconds_passed",
                  "type": "uint256"
                }
              ],
              "name": "decayedPrice",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "deprecated",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "min_price",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "price_bump_denominator",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "price_bump_numerator",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "registration_duration",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "setDeprecationSwitch",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "_success",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "set_price",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "set_price_at",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "bin": "6080604052630107ac006003610013610093565b50506103e86004610022610093565b505060016005610030610093565b50506001600661003e610093565b505062ed4e00600761004e610093565b506000905060086001816100606100f5565b8160ff02191690831515021790610075610093565b50505034801561008d5760008061008a610141565b50505b506101ac565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b60005b60408110156100f0576000828201526020016100d9565b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b805160008252935060206100d9565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561017957808601518282016040015260200161015e565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b610911806101bb6000396000f3fe60806040523480156100195760008061001661072d565b50505b50600436106100b85760003560e01c8063077964ce146100c65780630e136b19146100e057806331000384146100fc5780634d48e3cd1461010457806351cc8599146101305780635236a4e61461016e5780638f43987c146101765780639d1b464a1461017e578063a4a7c9a414610186578063b8af7bca1461018e578063c3ab5fb414610196578063f77c47911461019e578063fdcbb02d146101c2575b6000806100c361072d565b50505b6100ce6101ca565b60405190815260200160405180910390f35b6100e86101d7565b604051901515815260200160405180910390f35b6100ce6101f0565b6100ce600480360360408110156101235760008061012061072d565b50505b50803590602001356101fa565b6100e8600480360360a081101561014f5760008061014c61072d565b50505b5080359060208101359060408101359060608101359060800135610299565b6100ce610342565b6100ce61034c565b6100ce610356565b6100ce6103e2565b6100e86103ec565b6100ce6104a9565b6101a66104b3565b6040516001600160a01b03909116815260200160405180910390f35b6100ce6104d1565b60066101d4610798565b81565b600060086101e3610798565b906101000a900460ff1681565b60016101d4610798565b600081600160281b811061021a576004610212610798565b915050610293565b60006003610226610798565b905060006004820a601802905060006004840a6003850a84600402026002860a6002860a600c0202866003870a60180202850101010190506000818389028161026b57fe5b0490506004610278610798565b81101561028c576004610289610798565b90505b9450505050505b92915050565b600080806102a5610798565b906101000a90046001600160a01b03166001600160a01b03165a6102c76107f3565b6001600160a01b0316146103295760405162461bcd60e51b815260206004820152601c60248201527b31b0b63632b91034b9903737ba103a34329031b7b73a3937b63632b960211b60448201526064016040518091039061032661072d565b50505b61033686868686866104db565b50600195945050505050565b60026101d4610798565b60036101d4610798565b60006002610362610798565b5a61036b610839565b10156103b15760405162461bcd60e51b81526004018080602001828103825260218152602001806108f060219139604001915050604051809103906103ae61072d565b50505b600060026103bd610798565b5a6103c6610839565b0390506103dc60016103d6610798565b826101fa565b91505090565b60076101d4610798565b600080806103f8610798565b906101000a90046001600160a01b03166001600160a01b03165a61041a6107f3565b6001600160a01b03161461047c5760405162461bcd60e51b815260206004820152601c60248201527b31b0b63632b91034b9903737ba103a34329031b7b73a3937b63632b960211b60448201526064016040518091039061047961072d565b50505b60016008818161048a610798565b8160ff0219169083151502179061049f61087f565b5050506001905090565b60046101d4610798565b6000806104be610798565b906101000a90046001600160a01b031681565b60056101d4610798565b6104e361050f565b6104ed858561053e565b6104f682610662565b6104ff83610674565b61050881610721565b5050505050565b610517610356565b80600161052261087f565b5050505a61052e610839565b80600261053961087f565b505050565b6000811161058c5760405162461bcd60e51b815260206004820152600e60248201526d646976696465206279207a65726f60901b60448201526064016040518091039061058961072d565b50505b808210156105e65760405162461bcd60e51b815260206004820152601a602482015279070726963652064756d7020696e7374656164206f662062756d760341b6044820152606401604051809103906105e361072d565b50505b600160281b82106106465760405162461bcd60e51b815260206004820152601f60248201527f70726963652064756d70206e756d657261746f7220697320746f6f206269670060448201526064016040518091039061064361072d565b50505b8180600561065261087f565b505050806006819061050861087f565b8080600461066e61087f565b50505050565b600081116106bc5760405162461bcd60e51b81526004018080602001828103825260228152602001806108ce60229139604001915050604051809103906106b961072d565b50505b600160281b81106107155760405162461bcd60e51b81526020600482015260166024820152751d1bdbc8189a59c8191958d85e4818dbdb9cdd185b9d60521b60448201526064016040518091039061071261072d565b50505b8080600361066e61087f565b8080600761066e61087f565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561076557808601518282016040015260200161074a565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015610539576000828201526020016107dc565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b805160008252935060206107dc565b63bdbf8c36598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b805160008252935060206107dc565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b6000815260206107dc56fe617474656d707420746f20736574207a65726f20646563617920636f6e7374616e74416e20756e646572666c6f7720696e20707269636520636f6d7075746174696f6e",
          "bin-runtime": "60806040523480156100195760008061001661072d565b50505b50600436106100b85760003560e01c8063077964ce146100c65780630e136b19146100e057806331000384146100fc5780634d48e3cd1461010457806351cc8599146101305780635236a4e61461016e5780638f43987c146101765780639d1b464a1461017e578063a4a7c9a414610186578063b8af7bca1461018e578063c3ab5fb414610196578063f77c47911461019e578063fdcbb02d146101c2575b6000806100c361072d565b50505b6100ce6101ca565b60405190815260200160405180910390f35b6100e86101d7565b604051901515815260200160405180910390f35b6100ce6101f0565b6100ce600480360360408110156101235760008061012061072d565b50505b50803590602001356101fa565b6100e8600480360360a081101561014f5760008061014c61072d565b50505b5080359060208101359060408101359060608101359060800135610299565b6100ce610342565b6100ce61034c565b6100ce610356565b6100ce6103e2565b6100e86103ec565b6100ce6104a9565b6101a66104b3565b6040516001600160a01b03909116815260200160405180910390f35b6100ce6104d1565b60066101d4610798565b81565b600060086101e3610798565b906101000a900460ff1681565b60016101d4610798565b600081600160281b811061021a576004610212610798565b915050610293565b60006003610226610798565b905060006004820a601802905060006004840a6003850a84600402026002860a6002860a600c0202866003870a60180202850101010190506000818389028161026b57fe5b0490506004610278610798565b81101561028c576004610289610798565b90505b9450505050505b92915050565b600080806102a5610798565b906101000a90046001600160a01b03166001600160a01b03165a6102c76107f3565b6001600160a01b0316146103295760405162461bcd60e51b815260206004820152601c60248201527b31b0b63632b91034b9903737ba103a34329031b7b73a3937b63632b960211b60448201526064016040518091039061032661072d565b50505b61033686868686866104db565b50600195945050505050565b60026101d4610798565b60036101d4610798565b60006002610362610798565b5a61036b610839565b10156103b15760405162461bcd60e51b81526004018080602001828103825260218152602001806108f060219139604001915050604051809103906103ae61072d565b50505b600060026103bd610798565b5a6103c6610839565b0390506103dc60016103d6610798565b826101fa565b91505090565b60076101d4610798565b600080806103f8610798565b906101000a90046001600160a01b03166001600160a01b03165a61041a6107f3565b6001600160a01b03161461047c5760405162461bcd60e51b815260206004820152601c60248201527b31b0b63632b91034b9903737ba103a34329031b7b73a3937b63632b960211b60448201526064016040518091039061047961072d565b50505b60016008818161048a610798565b8160ff0219169083151502179061049f61087f565b5050506001905090565b60046101d4610798565b6000806104be610798565b906101000a90046001600160a01b031681565b60056101d4610798565b6104e361050f565b6104ed858561053e565b6104f682610662565b6104ff83610674565b61050881610721565b5050505050565b610517610356565b80600161052261087f565b5050505a61052e610839565b80600261053961087f565b505050565b6000811161058c5760405162461bcd60e51b815260206004820152600e60248201526d646976696465206279207a65726f60901b60448201526064016040518091039061058961072d565b50505b808210156105e65760405162461bcd60e51b815260206004820152601a602482015279070726963652064756d7020696e7374656164206f662062756d760341b6044820152606401604051809103906105e361072d565b50505b600160281b82106106465760405162461bcd60e51b815260206004820152601f60248201527f70726963652064756d70206e756d657261746f7220697320746f6f206269670060448201526064016040518091039061064361072d565b50505b8180600561065261087f565b505050806006819061050861087f565b8080600461066e61087f565b50505050565b600081116106bc5760405162461bcd60e51b81526004018080602001828103825260228152602001806108ce60229139604001915050604051809103906106b961072d565b50505b600160281b81106107155760405162461bcd60e51b81526020600482015260166024820152751d1bdbc8189a59c8191958d85e4818dbdb9cdd185b9d60521b60448201526064016040518091039061071261072d565b50505b8080600361066e61087f565b8080600761066e61087f565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561076557808601518282016040015260200161074a565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015610539576000828201526020016107dc565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b805160008252935060206107dc565b63bdbf8c36598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b805160008252935060206107dc565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b6000815260206107dc56fe617474656d707420746f20736574207a65726f20646563617920636f6e7374616e74416e20756e646572666c6f7720696e20707269636520636f6d7075746174696f6e",
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price_bump_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price_bump_denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decay_constant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_registration_duration\",\"type\":\"uint256\"}],\"name\":\"changeParameters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decay_constant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_set_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seconds_passed\",\"type\":\"uint256\"}],\"name\":\"decayedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price_bump_denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price_bump_numerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registration_duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDeprecationSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"set_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"set_price_at\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decayedPrice(uint256,uint256)\":{\"params\":{\"_seconds_passed\":\"The number of seconds passed since the initial price was set\",\"_set_price\":\"The initial price\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"currentPrice()\":{\"notice\":\"The amount to deposit for registration or extension Note: the price moves quickly depending on what other addresses do. The current price might change after you send a `deposit()` transaction before the transaction is executed.\"},\"decay_constant()\":{\"notice\":\"The amount of time (in seconds) till the price decreases to roughly 1/e.\"},\"decayedPrice(uint256,uint256)\":{\"notice\":\"Calculates the decreased price after a number of seconds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/services/ServiceRegistry.sol\":\"ServiceRegistryConfigurableParameters\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":.=.\",\":lib=data/source/lib\",\":raiden=data/source/raiden\",\":services=data/source/services\",\":test=data/source/test\"]},\"sources\":{\"data/source/raiden/Token.sol\":{\"keccak256\":\"0x5a8ccb9fa426228d9e213164f22a94b0ac57f1aa15ab76ce88a96177edd7b0b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff1ddcfa729756503a156edda9aa65cbfd0522c449e0451ad3e5b5f72c2da256\",\"dweb:/ipfs/QmVQ4DeSBjo1W5obzasyT1re9jEQW2ydaMuj1GMa1cyKbV\"]},\"data/source/raiden/Utils.sol\":{\"keccak256\":\"0x3fb4df9cdadd3711bffff81a451868c7a1ee8a2f3ff1a20a4343def15cb38e0f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://67e2deac2f8ae6d3fc41d84474d2d7f2a098a9e1da70c60ae4590a05495c20c1\",\"dweb:/ipfs/QmRgqjDcKhG7dW68FRKZyYKhYULXx8keftggJFTfUoDGex\"]},\"data/source/services/ServiceRegistry.sol\":{\"keccak256\":\"0xd14ebdf3792e638f1bd6a4957cb0413c44beaaf41b4f56241f917d21e4a45d50\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f2bcde06e1e80dc2d4d8578fbd9502453c776e02fea1dc16634bf25e503820eb\",\"dweb:/ipfs/QmdpyNpBNNDvFAKqXhtpnB8RYaNHqRdQu8e1YjLE89LJUc\"]}},\"version\":1}"
        },
        "StandardToken": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "_owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "_from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "_to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "remaining",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "success",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "balances",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "supply",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "success",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "success",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "bin": "60806040523480156100195760008061001661001f565b50505b5061008a565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561005757808601518282016040015260200161003c565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b61083b806100996000396000f3fe6080604052348015610019576000806100166106bb565b50505b50600436106100815760003560e01c8063095ea7b31461008f57806318160ddd146100d857806323b872dd146100f257806327e235e314610131578063313ce5671461016057806370a082311461017e578063a9059cbb146101ad578063dd62ed3e146101e2575b60008061008c6106bb565b50505b6100c4600480360360408110156100ae576000806100ab6106bb565b50505b506001600160a01b038135169060200135610219565b604051901515815260200160405180910390f35b6100e06102c8565b60405190815260200160405180910390f35b6100c4600480360360608110156101115760008061010e6106bb565b50505b506001600160a01b038135811691602081013590911690604001356102d8565b6100e0600480360360208110156101505760008061014d6106bb565b50505b50356001600160a01b0316610528565b610168610543565b60405160ff909116815260200160405180910390f35b6100e06004803603602081101561019d5760008061019a6106bb565b50505b50356001600160a01b0316610548565b6100c4600480360360408110156101cc576000806101c96106bb565b50505b506001600160a01b038135169060200135610568565b6100e060048036036040811015610201576000806101fe6106bb565b50505b506001600160a01b0381358116916020013516610682565b600081600260005a610229610726565b6001600160a01b03166001600160a01b031681526020019081526020016000206001600160a01b038516600090815260209190915260409020819061026c610780565b505050826001600160a01b03165a610282610726565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405190815260200160405180910390a35060015b92915050565b6000806102d36107ce565b905090565b6001600160a01b0383166000908152600160205281604082206102f96107ce565b101561030d5760008061030a6106bb565b50505b6001600160a01b0384166000908152600260205282906040902060005a610332610726565b6001600160a01b03166001600160a01b0316815260200190815260200160002061035a6107ce565b101561036e5760008061036b6106bb565b50505b60008211610384576000806103816106bb565b50505b6001600160a01b038416600090815260016020528290604090206103a66107ce565b101580156103ff57506001600160a01b0384166000908152600260205282906040902060005a6103d4610726565b6001600160a01b03166001600160a01b031681526020019081526020016000206103fc6107ce565b10155b801561040b5750600082115b1561051d576001600160a01b03831660009081526001602052829060409020600082826104366107ce565b019250508190610444610780565b5050506001600160a01b038416600090815260016020528290604090206000828261046d6107ce565b03925050819061047b610780565b5050506001600160a01b0384166000908152600260205282906040902060005a6104a3610726565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082826104cf6107ce565b0392505081906104dd610780565b505050826001600160a01b0316846001600160a01b031660008051602061081b8339815191528460405190815260200160405180910390a3506001610521565b5060005b9392505050565b600160205280600052604060002090506105406107ce565b81565b601290565b6001600160a01b03811660009081526001602052604081206102c26107ce565b600081600160005a610578610726565b6001600160a01b03166001600160a01b031681526020019081526020016000206105a06107ce565b101580156105ae5750600082115b1561067a5781600160005a6105c1610726565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082826105ed6107ce565b0392505081906105fb610780565b5050506001600160a01b03831660009081526001602052829060409020600082826106246107ce565b019250508190610632610780565b505050826001600160a01b03165a610648610726565b6001600160a01b031660008051602061081b8339815191528460405190815260200160405180910390a35060016102c2565b5060006102c2565b6001600160a01b03821660009081526002602052604081206001600160a01b0383166000908152602091909152604090206105216107ce565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156106f35780860151828201604001526020016106d8565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b604081101561077b57600082820152602001610764565b505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020610764565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061076456feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "bin-runtime": "6080604052348015610019576000806100166106bb565b50505b50600436106100815760003560e01c8063095ea7b31461008f57806318160ddd146100d857806323b872dd146100f257806327e235e314610131578063313ce5671461016057806370a082311461017e578063a9059cbb146101ad578063dd62ed3e146101e2575b60008061008c6106bb565b50505b6100c4600480360360408110156100ae576000806100ab6106bb565b50505b506001600160a01b038135169060200135610219565b604051901515815260200160405180910390f35b6100e06102c8565b60405190815260200160405180910390f35b6100c4600480360360608110156101115760008061010e6106bb565b50505b506001600160a01b038135811691602081013590911690604001356102d8565b6100e0600480360360208110156101505760008061014d6106bb565b50505b50356001600160a01b0316610528565b610168610543565b60405160ff909116815260200160405180910390f35b6100e06004803603602081101561019d5760008061019a6106bb565b50505b50356001600160a01b0316610548565b6100c4600480360360408110156101cc576000806101c96106bb565b50505b506001600160a01b038135169060200135610568565b6100e060048036036040811015610201576000806101fe6106bb565b50505b506001600160a01b0381358116916020013516610682565b600081600260005a610229610726565b6001600160a01b03166001600160a01b031681526020019081526020016000206001600160a01b038516600090815260209190915260409020819061026c610780565b505050826001600160a01b03165a610282610726565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405190815260200160405180910390a35060015b92915050565b6000806102d36107ce565b905090565b6001600160a01b0383166000908152600160205281604082206102f96107ce565b101561030d5760008061030a6106bb565b50505b6001600160a01b0384166000908152600260205282906040902060005a610332610726565b6001600160a01b03166001600160a01b0316815260200190815260200160002061035a6107ce565b101561036e5760008061036b6106bb565b50505b60008211610384576000806103816106bb565b50505b6001600160a01b038416600090815260016020528290604090206103a66107ce565b101580156103ff57506001600160a01b0384166000908152600260205282906040902060005a6103d4610726565b6001600160a01b03166001600160a01b031681526020019081526020016000206103fc6107ce565b10155b801561040b5750600082115b1561051d576001600160a01b03831660009081526001602052829060409020600082826104366107ce565b019250508190610444610780565b5050506001600160a01b038416600090815260016020528290604090206000828261046d6107ce565b03925050819061047b610780565b5050506001600160a01b0384166000908152600260205282906040902060005a6104a3610726565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082826104cf6107ce565b0392505081906104dd610780565b505050826001600160a01b0316846001600160a01b031660008051602061081b8339815191528460405190815260200160405180910390a3506001610521565b5060005b9392505050565b600160205280600052604060002090506105406107ce565b81565b601290565b6001600160a01b03811660009081526001602052604081206102c26107ce565b600081600160005a610578610726565b6001600160a01b03166001600160a01b031681526020019081526020016000206105a06107ce565b101580156105ae5750600082115b1561067a5781600160005a6105c1610726565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082826105ed6107ce565b0392505081906105fb610780565b5050506001600160a01b03831660009081526001602052829060409020600082826106246107ce565b019250508190610632610780565b505050826001600160a01b03165a610648610726565b6001600160a01b031660008051602061081b8339815191528460405190815260200160405180910390a35060016102c2565b5060006102c2565b6001600160a01b03821660009081526002602052604081206001600160a01b0383166000908152602091909152604090206105216107ce565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156106f35780860151828201604001526020016106d8565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b604081101561077b57600082820152602001610764565b505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020610764565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061076456feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"_owner\":\"The address of the account owning tokens\",\"_spender\":\"The address of the account able to transfer the tokens\"},\"returns\":{\"remaining\":\"Amount of remaining tokens allowed to spent\"}},\"approve(address,uint256)\":{\"params\":{\"_spender\":\"The address of the account able to transfer the tokens\",\"_value\":\"The amount of wei to be approved for transfer\"},\"returns\":{\"success\":\"Whether the approval was successful or not\"}},\"balanceOf(address)\":{\"params\":{\"_owner\":\"The address from which the balance will be retrieved\"},\"returns\":{\"balance\":\"The balance\"}},\"totalSupply()\":{\"returns\":{\"supply\":\"total amount of tokens\"}},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"The address of the recipient\",\"_value\":\"The amount of token to be transferred\"},\"returns\":{\"success\":\"Whether the transfer was successful or not\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"_from\":\"The address of the sender\",\"_to\":\"The address of the recipient\",\"_value\":\"The amount of token to be transferred\"},\"returns\":{\"success\":\"Whether the transfer was successful or not\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"`msg.sender` approves `_spender` to spend `_value` tokens\"},\"transfer(address,uint256)\":{\"notice\":\"send `_value` token to `_to` from `msg.sender`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/test/StandardToken.sol\":\"StandardToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/raiden/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface Token {\\n\\n    /// @return supply total amount of tokens\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return balance The balance\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return success Whether the approval was successful or not\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return remaining Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    // Optionally implemented function to show the number of decimals for the token\\n    function decimals() external view returns (uint8 decimals);\\n}\\n\",\"keccak256\":\"0x5a8ccb9fa426228d9e213164f22a94b0ac57f1aa15ab76ce88a96177edd7b0b3\",\"license\":\"MIT\"},\"data/source/test/StandardToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable */\\npragma solidity 0.7.6;\\n\\nimport \\\"../raiden/Token.sol\\\";\\n\\n/*\\nThis implements ONLY the standard functions and NOTHING else.\\nFor a token like you would want to deploy in something like Mist, see HumanStandardToken.sol.\\nIf you deploy this, you won't have anything useful.\\nImplements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\\n.*/\\n\\ncontract StandardToken is Token {\\n    uint256 internal _total_supply;\\n    mapping (address => uint256) public balances;\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    function transfer(address _to, uint256 _value)\\n        public override\\n        returns (bool success)\\n    {\\n        //Default assumes totalSupply can't be over max (2^256 - 1).\\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\\n        //Replace the if with this one instead.\\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\\n        if (balances[msg.sender] >= _value && _value > 0) {\\n            balances[msg.sender] -= _value;\\n            balances[_to] += _value;\\n            emit Transfer(msg.sender, _to, _value);\\n            return true;\\n        } else { return false; }\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public override\\n        returns (bool success)\\n    {\\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\\n        require(balances[_from] >= _value);\\n        require(allowed[_from][msg.sender] >= _value);\\n        require(_value > 0);\\n        if ((balances[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (_value > 0)) {\\n            balances[_to] += _value;\\n            balances[_from] -= _value;\\n            allowed[_from][msg.sender] -= _value;\\n            emit Transfer(_from, _to, _value);\\n            return true;\\n        } else { return false; }\\n    }\\n\\n    function balanceOf(address _owner) public override view returns (uint256 balance) {\\n        return balances[_owner];\\n    }\\n\\n    function approve(address _spender, uint256 _value) public override returns (bool success) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) public override view returns (uint256 remaining) {\\n      return allowed[_owner][_spender];\\n    }\\n\\n    function totalSupply() public override view returns (uint256 supply) {\\n        return _total_supply;\\n    }\\n\\n    function decimals() public virtual override view returns (uint8 decimals) {\\n        return 18;\\n    }\\n}\",\"keccak256\":\"0xb9425f7bd3805c65f0a06c7cc10aa0db59f9f2bcd44fc4ef4db8b473fbb5f2d4\",\"license\":\"MIT\"}},\"version\":1}"
        },
        "Token": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "_owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "_from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "_to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "remaining",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "success",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "supply",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "success",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "success",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "bin": "",
          "bin-runtime": "",
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"_owner\":\"The address of the account owning tokens\",\"_spender\":\"The address of the account able to transfer the tokens\"},\"returns\":{\"remaining\":\"Amount of remaining tokens allowed to spent\"}},\"approve(address,uint256)\":{\"params\":{\"_spender\":\"The address of the account able to transfer the tokens\",\"_value\":\"The amount of wei to be approved for transfer\"},\"returns\":{\"success\":\"Whether the approval was successful or not\"}},\"balanceOf(address)\":{\"params\":{\"_owner\":\"The address from which the balance will be retrieved\"},\"returns\":{\"balance\":\"The balance\"}},\"totalSupply()\":{\"returns\":{\"supply\":\"total amount of tokens\"}},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"The address of the recipient\",\"_value\":\"The amount of token to be transferred\"},\"returns\":{\"success\":\"Whether the transfer was successful or not\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"_from\":\"The address of the sender\",\"_to\":\"The address of the recipient\",\"_value\":\"The amount of token to be transferred\"},\"returns\":{\"success\":\"Whether the transfer was successful or not\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"`msg.sender` approves `_spender` to spend `_value` tokens\"},\"transfer(address,uint256)\":{\"notice\":\"send `_value` token to `_to` from `msg.sender`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/raiden/Token.sol\":\"Token\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/raiden/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface Token {\\n\\n    /// @return supply total amount of tokens\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return balance The balance\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return success Whether the approval was successful or not\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return remaining Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    // Optionally implemented function to show the number of decimals for the token\\n    function decimals() external view returns (uint8 decimals);\\n}\\n\",\"keccak256\":\"0x5a8ccb9fa426228d9e213164f22a94b0ac57f1aa15ab76ce88a96177edd7b0b3\",\"license\":\"MIT\"}},\"version\":1}"
        },
        "TokenNetwork": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_token_address",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_secret_registry",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_chain_id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_settlement_timeout_min",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_settlement_timeout_max",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_deprecation_executor",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_channel_participant_deposit_limit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_token_network_deposit_limit",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "closing_participant",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "balance_hash",
                  "type": "bytes32"
                }
              ],
              "name": "ChannelClosed",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "participant",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "total_deposit",
                  "type": "uint256"
                }
              ],
              "name": "ChannelNewDeposit",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "participant1",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "participant2",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "settle_timeout",
                  "type": "uint256"
                }
              ],
              "name": "ChannelOpened",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "participant1_amount",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "participant1_locksroot",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "participant2_amount",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "participant2_locksroot",
                  "type": "bytes32"
                }
              ],
              "name": "ChannelSettled",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "locksroot",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "unlocked_amount",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "returned_tokens",
                  "type": "uint256"
                }
              ],
              "name": "ChannelUnlocked",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "participant",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "total_withdraw",
                  "type": "uint256"
                }
              ],
              "name": "ChannelWithdraw",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "new_value",
                  "type": "bool"
                }
              ],
              "name": "DeprecationSwitch",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "closing_participant",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "balance_hash",
                  "type": "bytes32"
                }
              ],
              "name": "NonClosingBalanceProofUpdated",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "MAX_SAFE_UINT256",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "chain_id",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "channel_counter",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "channel_participant_deposit_limit",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "channels",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "settle_block_number",
                  "type": "uint256"
                },
                {
                  "internalType": "enum TokenNetwork.ChannelState",
                  "name": "state",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "non_closing_participant",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "closing_participant",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "balance_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "additional_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "non_closing_signature",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "closing_signature",
                  "type": "bytes"
                }
              ],
              "name": "closeChannel",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "contract_address",
                  "type": "address"
                }
              ],
              "name": "contractExists",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "deprecate",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "deprecation_executor",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "participant",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "partner",
                  "type": "address"
                }
              ],
              "name": "getChannelIdentifier",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "participant1",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "participant2",
                  "type": "address"
                }
              ],
              "name": "getChannelInfo",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                },
                {
                  "internalType": "enum TokenNetwork.ChannelState",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "participant",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "partner",
                  "type": "address"
                }
              ],
              "name": "getChannelParticipantInfo",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "participant",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "partner",
                  "type": "address"
                }
              ],
              "name": "getParticipantsHash",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "name": "getUnlockIdentifier",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "participant1",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "participant2",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "settle_timeout",
                  "type": "uint256"
                }
              ],
              "name": "openChannel",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "name": "participants_hash_to_channel_identifier",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "safety_deprecation_switch",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "secret_registry",
              "outputs": [
                {
                  "internalType": "contract SecretRegistry",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "participant",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "total_deposit",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "partner",
                  "type": "address"
                }
              ],
              "name": "setTotalDeposit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "participant",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "total_withdraw",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expiration_block",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "participant_signature",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "partner_signature",
                  "type": "bytes"
                }
              ],
              "name": "setTotalWithdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "participant1",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "participant1_transferred_amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "participant1_locked_amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "participant1_locksroot",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "participant2",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "participant2_transferred_amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "participant2_locked_amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "participant2_locksroot",
                  "type": "bytes32"
                }
              ],
              "name": "settleChannel",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "participant",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "transferred_amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "locked_amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "locksroot",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct TokenNetwork.SettleInput",
                  "name": "participant1_settlement",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "participant",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "transferred_amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "locked_amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "locksroot",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct TokenNetwork.SettleInput",
                  "name": "participant2_settlement",
                  "type": "tuple"
                }
              ],
              "name": "settleChannel2",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "settlement_timeout_max",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "settlement_timeout_min",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "token",
              "outputs": [
                {
                  "internalType": "contract Token",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "token_network_deposit_limit",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "locks",
                  "type": "bytes"
                }
              ],
              "name": "unlock",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "channel_identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "closing_participant",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "non_closing_participant",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "balance_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "additional_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "closing_signature",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "non_closing_signature",
                  "type": "bytes"
                }
              ],
              "name": "updateNonClosingBalanceProof",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "bin": "",
          "bin-runtime": "608060405234801561001957600080610016612c5c565b50505b506004361061015d5760003560e01c806303d9d2531461016b5780630a798f24146101805780630fcc0c28146101a9578063224df42f146101b157806323aa8174146101b957806324d73a93146101ce5780633af973b1146101d65780634845be76146101de578063524bef8a146101e65780635d6e441b146101f957806363ea014314610201578063679b37631461021457806371e759921461021c5780637709bc78146102245780637c4734f41461024457806382fd779514610257578063838d6e051461026a578063938bcd671461028b5780639cadb1591461029e5780639e67ca5f146102b1578063b7506d70146102c4578063b8378f75146102cc578063ca463cce146102d4578063e5949b5d146102e7578063ee4516d9146102fa578063fadc554b14610320578063fc0c546a14610333578063fe49ba1c1461033b575b600080610168612c5c565b50505b61017e61017936600461348e565b61034e565b005b61019361018e3660046131f5565b610685565b6040516101a0919061377e565b60405180910390f35b61017e610984565b610193610a72565b6101c1610a7f565b6040516101a09190613722565b6101c1610a9e565b610193610aaa565b610193610ab4565b6101936101f4366004613271565b610abe565b610193610ad6565b61017e61020f366004613505565b610ae0565b610193610f3b565b610193610f45565b610237610232366004613197565b610f4b565b6040516101a09190613773565b6101936102523660046131ba565b610f62565b61017e6102653660046133cb565b611027565b61027d6102783660046132b5565b611221565b6040516101a09291906137a2565b6101936102993660046131ba565b61130c565b61017e6102ac366004613553565b61139b565b61017e6102bf3660046135d2565b611403565b6102376117d5565b6101936117ee565b61017e6102e2366004613686565b6117f8565b61027d6102f5366004613271565b611ccf565b61030d6103083660046132b5565b611d06565b6040516101a097969594939291906137c0565b61017e61032e3660046132f9565b611dd0565b6101c161204e565b6101936103493660046132b5565b612059565b610358838361130c565b84141561036d5760008061036a612c5c565b50505b6000848152600960205260408120600101600090610389612cc7565b906101000a900460ff16600481111561039e57fe5b146103b1576000806103ae612c5c565b50505b60008060008060006103c2866120b6565b90945092506103d289888a612059565b6000818152600b602052909550604081209050806001016103f1612cc7565b925084816103fd612cc7565b146104105760008061040d612c5c565b50505b6000831161042657600080610423612c5c565b50505b6104308484612117565b6000878152600b60205290945084840392506040902060008082610452612d22565b505060018201600090610463612d22565b50505050876001600160a01b0316896001600160a01b03168b7f8c03cf01b3d4e6068cc494e6fe02aa9e3d4af069d37c32ecc3b241af5c37e6c08888876040516104af9392919061370c565b60405180910390a4831561058e576000806104c8612cc7565b906101000a90046001600160a01b03166001600160a01b031663a9059cbb8a866040518363ffffffff1660e01b815260040161050592919061375a565b6020604051808303816000878061051a612d70565b15801561052f5760008061052c612c5c565b50505b505a610539612dbc565b505050505050158015610559573d6000803e3d6000610556612c5c565b50505b50505050604051601f3d908101601f1916820160405261057c9190810190613239565b61058e5760008061058b612c5c565b50505b81156106655760008061059f612cc7565b906101000a90046001600160a01b03166001600160a01b031663a9059cbb89846040518363ffffffff1660e01b81526004016105dc92919061375a565b602060405180830381600087806105f1612d70565b15801561060657600080610603612c5c565b50505b505a610610612dbc565b505050505050158015610630573d6000803e3d600061062d612c5c565b50505b50505050604051601f3d908101601f191682016040526106539190810190613239565b61066557600080610662612c5c565b50505b8183101561066f57fe5b8383101561067957fe5b50505050505050505050565b600060146008610693612cc7565b60ff6101009290920a900416156106b2576000806106af612c5c565b50505b8160036106bd612cc7565b8110156106d2576000806106cf612c5c565b50505b60046106dc612cc7565b8111156106f1576000806106ee612c5c565b50505b60008060066106fe612cc7565b600080610709612cc7565b906101000a90046001600160a01b03166001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b604081101561077d57600082820152602001610766565b5050506040518263ffffffff1660e01b815260040161079c9190613722565b60206040518083038186806107af612d70565b1580156107c4576000806107c1612c5c565b50505b505a6107ce612ea7565b50505050501580156107ed573d6000803e3d60006107ea612c5c565b50505b50505050604051601f3d908101601f191682016040526108109190810190613292565b1061082357600080610820612c5c565b50505b6001600760008282610833612cc7565b019250508190610841612d22565b505050600761084e612cc7565b905061085a8787610f62565b6000818152600a60205290925060409020610873612cc7565b1561088657600080610883612c5c565b50505b6000828152600a60205281906040902081906108a0612d22565b50505060008181526009602052604081209050806108bc612cc7565b156108c357fe5b600080600183016108d2612cc7565b906101000a900460ff1660048111156108e757fe5b146108ee57fe5b8580826108f9612d22565b506001915050818101818161090c612cc7565b8160ff0219169083600481111561091f57fe5b02179061092a612d22565b505050866001600160a01b0316886001600160a01b0316837f669a4b0ac0b9994c0f82ed4dbe07bb421fe74e5951725af4f139c7443ebf049d89604051610971919061377e565b60405180910390a4509695505050505050565b60146008610990612cc7565b60ff6101009290920a900416156109af576000806109ac612c5c565b50505b600060086109bb612cc7565b906101000a90046001600160a01b03166001600160a01b03165a6109dd612f6d565b6001600160a01b0316146109f9576000806109f6612c5c565b50505b60016008600160a01b81610a0b612cc7565b8160ff02191690831515021790610a20612d22565b5050507f6151930a846a85f5e64d2dd1cc5deeafb010c63eec4b600458158edd0e33f15d6008601490610a51612cc7565b906101000a900460ff16604051610a689190613773565b60405180910390a1565b6004610a7c612cc7565b81565b60006008610a8b612cc7565b906101000a90046001600160a01b031681565b60006001610a8b612cc7565b6002610a7c612cc7565b6006610a7c612cc7565b600a6020528060005260406000209050610a7c612cc7565b6005610a7c612cc7565b60146008610aec612cc7565b60ff6101009290920a90041615610b0b57600080610b08612c5c565b50505b8360016000828152600960205260409020600101600090610b2a612cc7565b906101000a900460ff166004811115610b3f57fe5b14610b5257600080610b4f612c5c565b50505b610b5c848361130c565b8514610b7057600080610b6d612c5c565b50505b60008311610b8657600080610b83612c5c565b50505b6005610b90612cc7565b831115610ba557600080610ba2612c5c565b50505b600085815260096020528080604081206001600160a01b038816600090815260028201602052909150604081206001600160a01b03871660009081526002840160205290915060408120905081610bfa612cc7565b8803945060008511610c1457600080610c11612c5c565b50505b87851115610c2a57600080610c27612c5c565b50505b878583610c35612cc7565b0114610c3d57fe5b6006610c47612cc7565b85600080610c53612cc7565b906101000a90046001600160a01b03166001600160a01b03166370a082315a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015610cc757600082820152602001610cb0565b5050506040518263ffffffff1660e01b8152600401610ce69190613722565b6020604051808303818680610cf9612d70565b158015610d0e57600080610d0b612c5c565b50505b505a610d18612ea7565b5050505050158015610d37573d6000803e3d6000610d34612c5c565b50505b50505050604051601f3d908101601f19168201604052610d5a9190810190613292565b011115610d6f57600080610d6c612c5c565b50505b878083610d7a612d22565b50505080600001610d89612cc7565b82610d92612cc7565b01935081610d9e612cc7565b841015610db357600080610db0612c5c565b50505b6001600160a01b0389168a7f2b55547a3b586ab51f65ee9ce4927fa6d25191388299988e89e059a02f9dd44584610de8612cc7565b604051610df5919061377e565b60405180910390a3600080610e08612cc7565b906101000a90046001600160a01b03166001600160a01b03166323b872dd5a610e2f612f6d565b5a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015610e8557600082820152602001610e6e565b505050886040518463ffffffff1660e01b8152600401610ea793929190613736565b60206040518083038160008780610ebc612d70565b158015610ed157600080610ece612c5c565b50505b505a610edb612dbc565b505050505050158015610efb573d6000803e3d6000610ef8612c5c565b50505b50505050604051601f3d908101601f19168201604052610f1e9190810190613239565b61067957600080610f2d612c5c565b505050505050505050505050565b6007610a7c612cc7565b60001981565b60008082610f57612d70565b15159150505b919050565b60006001600160a01b038316610f8057600080610f7d612c5c565b50505b6001600160a01b038216610f9c57600080610f99612c5c565b50505b816001600160a01b0316836001600160a01b03161415610fc457600080610fc1612c5c565b50505b816001600160a01b0316836001600160a01b0316101561100e578282604051602001610ff19291906136c4565b604051602081830303815290604052805190602001209050611021565b8183604051602001610ff19291906136c4565b92915050565b8760016000828152600960205260409020600101600090611046612cc7565b906101000a900460ff16600481111561105b57fe5b1461106e5760008061106b612c5c565b50505b611078878961130c565b891461108c57600080611089612c5c565b50505b60008981526009602052806040812090506002600180830190816110ae612cc7565b8160ff021916908360048111156110c157fe5b0217906110cc612d22565b5050506001600160a01b038916600090815260028201602052600190604090206002016001816110fa612cc7565b8160ff0219169083151502179061110f612d22565b5050505a61111b612fb3565b8160008282611128612cc7565b019250508190611136612d22565b50505060006111556001600261114a612cc7565b8e8c8c8c8c8c61212f565b9050806001600160a01b03168a6001600160a01b03161461117e5760008061117b612c5c565b50505b87156111d05761119b6002611191612cc7565b8d8b8b8b8b61233f565b9250826001600160a01b03168b6001600160a01b0316146111c4576000806111c1612c5c565b50505b6111d082848a8c6124f7565b878a6001600160a01b03168d7f09d2f946e008c38931cd739dd20e35146deff8ab3134caee6d54fe50816a81b88c60405161120b919061377e565b60405180910390a4505050505050505050505050565b600083815260096020528080808060408120905060008060018301611244612cc7565b60ff6101009290920a9004169050600081600481111561126057fe5b14801561126d5750600089115b80156112825750600761127e612cc7565b8911155b156112f557506003611295898989612059565b6000818152600b6020529094506040812090506112b38a898b612059565b6000818152600b602052909450604081209050816001016112d2612cc7565b1580156112e85750806001016112e6612cc7565b155b156112f257600492505b50505b816112fe612cc7565b999098509650505050505050565b60006001600160a01b03831661132a57600080611327612c5c565b50505b6001600160a01b03821661134657600080611343612c5c565b50505b816001600160a01b0316836001600160a01b0316141561136e5760008061136b612c5c565b50505b600061137a8484610f62565b6000818152600a60205290915060409020611393612cc7565b949350505050565b6113f88960405180608001604052808b6001600160a01b031681526020018a8152602001898152602001888152506040518060800160405280886001600160a01b03168152602001878152602001868152602001858152506117f8565b505050505050505050565b8760016000828152600960205260409020600101600090611422612cc7565b906101000a900460ff16600481111561143757fe5b1461144a57600080611447612c5c565b50505b6000806000808a1161146457600080611461612c5c565b50505b885a61146e612fb3565b106114815760008061147e612c5c565b50505b6114cd600261148e612cc7565b8d8d8d8d8d8d8080601f016020809104026020016040519081016040528181529291906020840183838082843760009201919091525061255d92505050565b6001600160a01b03168b6001600160a01b0316146114f3576000806114f0612c5c565b50505b61153f6002611500612cc7565b8d8d8d8d8b8b8080601f016020809104026020016040519081016040528181529291906020840183838082843760009201919091525061255d92505050565b905061154b8b8261130c565b8c1461155f5760008061155c612c5c565b50505b60008c81526009602052604081206001600160a01b038d16600090815260028201602052909150604081206001600160a01b038416600090815260028401602052909150604081209050806115b2612cc7565b826115bb612cc7565b01955085816001016115cb612cc7565b8e0111156115e1576000806115de612c5c565b50505b806001016115ed612cc7565b8d018d111561160457600080611601612c5c565b50505b81600101611610612cc7565b8d0394508c85111561162a57600080611627612c5c565b50505b600085116116405760008061163d612c5c565b50505b8c858360010161164e612cc7565b011461165657fe5b8d6001600160a01b03168f7f98ed0357b86b313fa9f968de5c9d2bcf591432355b34aa1ab7e3e9e92f4284088f604051611690919061377e565b60405180910390a38c80600184016116a6612d22565b5050506000806116b4612cc7565b906101000a90046001600160a01b03166001600160a01b031663a9059cbb8f876040518363ffffffff1660e01b81526004016116f192919061375a565b60206040518083038160008780611706612d70565b15801561171b57600080611718612c5c565b50505b505a611725612dbc565b505050505050158015611745573d6000803e3d6000611742612c5c565b50505b50505050604051601f3d908101601f191682016040526117689190810190613239565b61177a57600080611777612c5c565b50505b81611783612cc7565b86101561178c57fe5b80611795612cc7565b86101561179e57fe5b816004016117aa612cc7565b156117b157fe5b806004016117bd612cc7565b156117c457fe5b505050505050505050505050505050565b601460086117e1612cc7565b906101000a900460ff1681565b6003610a7c612cc7565b60008251905060008251905061180e828261130c565b85146118225760008061181f612c5c565b50505b600061182e8383610f62565b600087815260096020529091506040812090506002600060018301611851612cc7565b906101000a900460ff16600481111561186657fe5b1461187957600080611876612c5c565b50505b5a611882612fb3565b8161188b612cc7565b1061189e5760008061189b612c5c565b50505b6001600160a01b038416600090815260028201602052604081206001600160a01b0385166000908152600284016020529091506040812090506118e18289612714565b6118f3576000806118f0612c5c565b50505b6118fd8188612714565b61190f5760008061190c612c5c565b50505b61192d8289602001518a60400151848b602001518c60400151612797565b6040808c0191909152808c019190915260208a810192909252818b01929092526001600160a01b0388166000908152600286019091522060008082611970612d22565b505060018201600090611981612d22565b505060028201600181611992612cc7565b9060ff021916906119a1612d22565b5050600382016000906119b2612d22565b5050600482016000906119c3612d22565b5050506001600160a01b0386166000908152600285016020526040915020600080826119ed612d22565b5050600182016000906119fe612d22565b505060028201600181611a0f612cc7565b9060ff02191690611a1e612d22565b505060038201600090611a2f612d22565b505060048201600090611a40612d22565b50505060008a81526009602052604091502060008082611a5e612d22565b505060018281019081611a6f612cc7565b9060ff02191690611a7e612d22565b5050506000858152600a6020526040915020600090611a9b612d22565b5050611aa8898987612885565b611ab3898888612885565b887f8db0e7d323ca765ce9ab550780131837e4942ccfea3be2b635ec1084c81f726289602001518a606001518a602001518b60600151604051611af99493929190613787565b60405180910390a2600088602001511115611be357600080611b19612cc7565b906101000a90046001600160a01b03166001600160a01b031663a9059cbb878a602001516040518363ffffffff1660e01b8152600401611b5a92919061375a565b60206040518083038160008780611b6f612d70565b158015611b8457600080611b81612c5c565b50505b505a611b8e612dbc565b505050505050158015611bae573d6000803e3d6000611bab612c5c565b50505b50505050604051601f3d908101601f19168201604052611bd19190810190613239565b611be357600080611be0612c5c565b50505b6000876020015111156113f857600080611bfb612cc7565b906101000a90046001600160a01b03166001600160a01b031663a9059cbb8689602001516040518363ffffffff1660e01b8152600401611c3c92919061375a565b60206040518083038160008780611c51612d70565b158015611c6657600080611c63612c5c565b50505b505a611c70612dbc565b505050505050158015611c90573d6000803e3d6000611c8d612c5c565b50505b50505050604051601f3d908101601f19168201604052611cb39190810190613239565b6113f857600080611cc2612c5c565b5050505050505050505050565b6009602052806000526040600020905080611ce8612cc7565b90600060018201611cf7612cc7565b906101000a900460ff16905082565b600083815260096020528080808080808080604081206001600160a01b038c166000908152600291909101602052604090209050611d458c8c8c612059565b6000818152600b60205290925060408120905081611d61612cc7565b82600101611d6d612cc7565b600060028501611d7b612cc7565b906101000a900460ff1684600301611d91612cc7565b85600401611d9d612cc7565b85611da6612cc7565b86600101611db2612cc7565b99509950995099509950995099505050509397509397509397909450565b611dda898961130c565b8a14611dee57600080611deb612c5c565b50505b86611e0157600080611dfe612c5c565b50505b60008611611e1757600080611e14612c5c565b50505b60008a8152600960205280806040812090506002600060018301611e39612cc7565b906101000a900460ff166004811115611e4e57fe5b14611e6157600080611e5e612c5c565b50505b5a611e6a612fb3565b81611e73612cc7565b1015611e8757600080611e84612c5c565b50505b611f0b600280611e95612cc7565b8f8d8d8d8d8d8080601f01602080910402602001604051908101604052818152929190602084018383808284376000920191909152508f92508e91508190506020601f82018190048102016040519081016040528181529291906020840183838082843760009201919091525061212f92505050565b9250826001600160a01b03168b6001600160a01b031614611f3457600080611f31612c5c565b50505b611f806002611f41612cc7565b8e8c8c8c8c8c8080601f016020809104026020016040519081016040528181529291906020840183838082843760009201919091525061233f92505050565b9150816001600160a01b03168c6001600160a01b031614611fa957600080611fa6612c5c565b50505b6001600160a01b038c16600090815260028201602052604081209050600060028201611fd3612cc7565b906101000a900460ff16611fef57600080611fec612c5c565b50505b611ffb828e8c8e6124f7565b898d6001600160a01b03168f7f6fc5b4f4f9e65bfdc4c45456373906876cee8832b605478e281902468875eaed8e604051612036919061377e565b60405180910390a45050505050505050505050505050565b600080610a8b612cc7565b6000816001600160a01b0316836001600160a01b0316141561208357600080612080612c5c565b50505b838383604051602001612098939291906136e6565b60405160208183030381529060405280519060200120949350505050565b60008060008351905060608106156120d6576000806120d3612c5c565b50505b6020600080805b84841015612101576120ef88856128dd565b915081830192506060840193506120dd565b8780519060200120965091945050505050915091565b60008183116121265782612128565b815b9392505050565b6000806040518060400160405280600381526020016232373760e81b8152509050600060405160408082019052601a81526000805160206137f18339815191526020820152825a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156121cb576000828201526020016121b4565b5050508c8e60068111156121db57fe5b8d8d8d8d8d604051602001808b805190602001908083835b602083106122125780518252601f1990920191602091820191016121f3565b6001836020036101000a03801982511681845116179092525050509190910190508a805190602001908083835b6020831061225e5780518252601f19909201916020918201910161223f565b6001836020036101000a038019825116818451168082178552505050505050905001896001600160a01b031660601b815260140188815260200187815260200186815260200185815260200184815260200183815260200182805190602001908083835b602083106122e15780518252601f1990920191602091820191016122c2565b6001836020036101000a0380198251168184511617909252505050919091019b5060409a50505050505050505050505160208183030381529060405280519060200120905061233081856129f1565b9b9a5050505050505050505050565b6000806040518060400160405280600381526020016219189960e91b8152509050600060405160408082019052601a81526000805160206137f18339815191526020820152825a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156123db576000828201526020016123c4565b508d9150600190508c8c8c8c604051602001808a805190602001908083835b602083106124195780518252601f1990920191602091820191016123fa565b6001836020036101000a038019825116818451161790925250505091909101905089805190602001908083835b602083106124655780518252601f199092019160209182019101612446565b6001836020036101000a038019825116818451168082178552505050505050905001886001600160a01b031660601b815260140187815260200186815260200185815260200184815260200183815260200182815260200199505050505050505050506040516020818303038152906040528051906020012090506124ea81856129f1565b9998505050505050505050565b6001600160a01b0383166000908152600285016020526040812090508060040161251f612cc7565b831161253357600080612530612c5c565b50505b828060048301612541612d22565b50505081816003018190612553612d22565b5050505050505050565b6000806040518060400160405280600381526020016203230360ec1b8152509050600060405160408082019052601a81526000805160206137f18339815191526020820152825a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156125f9576000828201526020016125e2565b508d9150600390508c8c8c8c604051602001808a805190602001908083835b602083106126375780518252601f199092019160209182019101612618565b6001836020036101000a038019825116818451161790925250505091909101905089805190602001908083835b602083106126835780518252601f199092019160209182019101612664565b6001836020036101000a038019825116818451168082178552505050505050905001886001600160a01b031660601b8152601401878152602001868152602001858152602001846001600160a01b031660601b815260140183815260200182815260200199505050505050505050506040516020818303038152906040528051906020012090506124ea81856129f1565b600082600301612722612cc7565b15801561273157508160200151155b801561273f57508160400151155b1561274c57506001611021565b81602001518260400151836060015160405160200161276d9392919061370c565b604051602081830303815290604052805190602001208360030161278f612cc7565b149392505050565b60008060008060008060006127aa612ff9565b6127b2612ff9565b8e6127bb612cc7565b825260018f016127c9612cc7565b6020830152604082018e9052606082018d90528b6127e5612cc7565b815260018c016127f3612cc7565b6020820152604081018b9052606081018a90526128108f8d612afb565b925061281c8282612b31565b94506128288584612117565b94508483039350612839858b612b5d565b9a509450612847848e612b5d565b9d5093508285111561285557fe5b8284111561285f57fe5b898d8587010101831461286e57fe5b50929d919c50999a50959850949650505050505050565b8160400151612893576128d8565b60006128a184845184612059565b6000818152600b602052909150604081209050836060015180826128c3612d22565b50505083604001518060018301612553612d22565b505050565b6000806000806000858751116128fa576000945050505050611021565b8587015193506020860187015192506040860187015190506000600161291e612cc7565b906101000a90046001600160a01b03166001600160a01b031663c1f62946826040518263ffffffff1660e01b8152600401612959919061377e565b602060405180830381868061296c612d70565b1580156129815760008061297e612c5c565b50505b505a61298b612ea7565b50505050501580156129aa573d6000803e3d60006129a7612c5c565b50505b50505050604051601f3d908101601f191682016040526129cd9190810190613292565b91508115806129dc5750818411155b156129e657600092505b509095945050505050565b60008151604114612a0a57600080612a07612c5c565b50505b60008060006020850151925060408501519150606085015160001a9050601b811015612a3457601b015b8060ff16601b1480612a4957508060ff16601c145b612a5b57600080612a58612c5c565b50505b60018682858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855a612aab612ea7565b5050505050158015612aca573d6000803e3d6000612ac7612c5c565b50505b5050506020604051035193506001600160a01b038416612af257600080612aef612c5c565b50505b50505092915050565b600081600101612b09612cc7565b83600101612b15612cc7565b83612b1e612cc7565b85612b27612cc7565b0103039392505050565b600061212883518460200151856040015186606001518651876020015188604001518960600151612b80565b600080828411612b6f57600084612b74565b828403835b915091505b9250929050565b6000806000806000612b928b8b612c3b565b9350612b9e8787612c3b565b925083831015612bfa5760405162461bcd60e51b815260206004820152601a6024820152791513954e881d1c985b9cd9995c9cc81b9bdd081bdc99195c995960321b604482015260640160405180910390612bf7612c5c565b50505b8a841015612c0457fe5b86831015612c0e57fe5b8383039150612c1d828e612c3b565b9050612c29818d612b5d565b509d9c50505050505050505050505050565b600060001983830184811015612c515781612c53565b805b95945050505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015612c94578086015182820160400152602001612c79565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b60408110156128d857600082820152602001612d0b565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020612d0b565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020612d0b565b6385979f76598160e01b8152612ded565b8080831115611021575090919050565b8080831015611021575090919050565b836004820152846024820152606060448201528760648201526084810160005b89811015612e25578089015182820152602001612e0d565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af15059612e7a8e3d612ddd565b8d01612e868187612dcd565b5b82811015612e9b5760008152602001612e87565b50929d50505050505050565b638540661f598160e01b8152836004820152846024820152606060448201528660648201526084810160005b88811015612eeb578088015182820152602001612ed3565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af15059612f408d3d612ddd565b8c01612f4c8187612dcd565b5b82811015612f615760008152602001612f4d565b50929c50505050505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020612d0b565b635a98c361598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020612d0b565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b80356001600160a01b0381168114610f5d5760008061303e612c5c565b5050919050565b60008083601f84011261305f57818261305c612c5c565b50505b5081356001600160401b0381111561307e57818261307b612c5c565b50505b602083019150836020828501011115612b795760008061309c612c5c565b50509250929050565b600082601f8301126130be5780816130bb612c5c565b50505b81356001600160401b03808211156130d257fe5b604051601f8301601f1916810160200182811182821017156130f057fe5b60405282815284830160200186101561311057838461310d612c5c565b50505b82602086016020830137918201602001929092529392505050565b600060808284031215613145578081613142612c5c565b50505b604051608081016001600160401b038111828210171561316157fe5b60405290508061317083613021565b81526020830135602082015260408301356040820152606083013560608201525092915050565b6000602082840312156131b15780816131ae612c5c565b50505b61212882613021565b600080604083850312156131d55780816131d2612c5c565b50505b6131de83613021565b91506131ec60208401613021565b90509250929050565b60008060006060848603121561321257808161320f612c5c565b50505b61321b84613021565b925061322960208501613021565b9150604084013590509250925092565b600060208284031215613253578081613250612c5c565b50505b81518015158114612128578182613268612c5c565b50509392505050565b60006020828403121561328b578081613288612c5c565b50505b5035919050565b6000602082840312156132ac5780816132a9612c5c565b50505b81519392505050565b6000806000606084860312156132d25782836132cf612c5c565b50505b833592506132e260208501613021565b91506132f060408501613021565b90509250925092565b6000806000806000806000806000806101008b8d03121561332157858661331e612c5c565b50505b8a35995061333160208c01613021565b985061333f60408c01613021565b975060608b0135965060808b0135955060a08b0135945060c08b01356001600160401b0380821115613378578586613375612c5c565b50505b6133848e838f01613045565b909650945060e08d01359150808211156133a55783846133a2612c5c565b50505b506133b28d828e01613045565b915080935050809150509295989b9194979a5092959850565b600080600080600080600080610100898b0312156133f05783846133ed612c5c565b50505b8835975061340060208a01613021565b965061340e60408a01613021565b9550606089013594506080890135935060a0890135925060c08901356001600160401b0380821115613447578384613444612c5c565b50505b6134538c838d016130a5565b935060e08b013591508082111561347157828361346e612c5c565b50505b5061347e8b828c016130a5565b9150509295985092959890939650565b600080600080608085870312156134ac5781826134a9612c5c565b50505b843593506134bc60208601613021565b92506134ca60408601613021565b915060608501356001600160401b038111156134ed5781826134ea612c5c565b50505b6134f9878288016130a5565b91505092959194509250565b60008060008060808587031215613523578182613520612c5c565b50505b8435935061353360208601613021565b92506040850135915061354860608601613021565b905092959194509250565b60008060008060008060008060006101208a8c03121561357a578283613577612c5c565b50505b8935985061358a60208b01613021565b975060408a0135965060608a0135955060808a013594506135ad60a08b01613021565b935060c08a0135925060e08a013591506101008a013590509295985092959850929598565b60008060008060008060008060c0898b0312156135f65781826135f3612c5c565b50505b8835975061360660208a01613021565b9650604089013595506060890135945060808901356001600160401b0380821115613638578384613635612c5c565b50505b6136448c838d01613045565b909650945060a08b0135915080821115613665578384613662612c5c565b50505b506136728b828c01613045565b999c989b5096995094979396929594505050565b600080600061012084860312156136a45780816136a1612c5c565b50505b833592506136b5856020860161312b565b91506132f08560a0860161312b565b6001600160601b0319606093841b811682529190921b16601482015260280190565b9283526001600160601b0319606092831b81166020850152911b16603482015260480190565b9283526020830191909152604082015260600190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b93845260208401929092526040830152606082015260800190565b82815260408101600583106137b357fe5b8260208301529392505050565b968752602087019590955292151560408601526060850191909152608084015260a083015260c082015260e0019056fe19457468657265756d205369676e6564204d6573736167653a0a000000000000",
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secret_registry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settlement_timeout_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settlement_timeout_max\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_deprecation_executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_channel_participant_deposit_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token_network_deposit_limit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"closing_participant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"balance_hash\",\"type\":\"bytes32\"}],\"name\":\"ChannelClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total_deposit\",\"type\":\"uint256\"}],\"name\":\"ChannelNewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settle_timeout\",\"type\":\"uint256\"}],\"name\":\"ChannelOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"participant1_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"participant1_locksroot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"participant2_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"participant2_locksroot\",\"type\":\"bytes32\"}],\"name\":\"ChannelSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"locksroot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlocked_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returned_tokens\",\"type\":\"uint256\"}],\"name\":\"ChannelUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total_withdraw\",\"type\":\"uint256\"}],\"name\":\"ChannelWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"new_value\",\"type\":\"bool\"}],\"name\":\"DeprecationSwitch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"closing_participant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"balance_hash\",\"type\":\"bytes32\"}],\"name\":\"NonClosingBalanceProofUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SAFE_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chain_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"channel_counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"channel_participant_deposit_limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"channels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"settle_block_number\",\"type\":\"uint256\"},{\"internalType\":\"enum TokenNetwork.ChannelState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"non_closing_participant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"closing_participant\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"balance_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"additional_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"non_closing_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"closing_signature\",\"type\":\"bytes\"}],\"name\":\"closeChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecation_executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"getChannelIdentifier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"participant2\",\"type\":\"address\"}],\"name\":\"getChannelInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum TokenNetwork.ChannelState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"getChannelParticipantInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"getParticipantsHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getUnlockIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"participant2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"settle_timeout\",\"type\":\"uint256\"}],\"name\":\"openChannel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"participants_hash_to_channel_identifier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safety_deprecation_switch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secret_registry\",\"outputs\":[{\"internalType\":\"contract SecretRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total_deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"setTotalDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration_block\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"participant_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"partner_signature\",\"type\":\"bytes\"}],\"name\":\"setTotalWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"participant1_transferred_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participant1_locked_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"participant1_locksroot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"participant2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"participant2_transferred_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participant2_locked_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"participant2_locksroot\",\"type\":\"bytes32\"}],\"name\":\"settleChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferred_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"locksroot\",\"type\":\"bytes32\"}],\"internalType\":\"struct TokenNetwork.SettleInput\",\"name\":\"participant1_settlement\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferred_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"locksroot\",\"type\":\"bytes32\"}],\"internalType\":\"struct TokenNetwork.SettleInput\",\"name\":\"participant2_settlement\",\"type\":\"tuple\"}],\"name\":\"settleChannel2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlement_timeout_max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlement_timeout_min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_network_deposit_limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"locks\",\"type\":\"bytes\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"channel_identifier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"closing_participant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"non_closing_participant\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"balance_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"additional_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"closing_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"non_closing_signature\",\"type\":\"bytes\"}],\"name\":\"updateNonClosingBalanceProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"closeChannel(uint256,address,address,bytes32,uint256,bytes32,bytes,bytes)\":{\"params\":{\"additional_hash\":\"Computed from the message. Used for message authentication\",\"balance_hash\":\"Hash of (transferred_amount, locked_amount, locksroot)\",\"channel_identifier\":\"Identifier for the channel on which this operation takes place\",\"closing_participant\":\"Channel participant who closes the channel\",\"closing_signature\":\"Closing participant's signature of the balance proof data\",\"non_closing_participant\":\"Channel partner of the `closing_participant`, who provided the balance proof\",\"non_closing_signature\":\"Non-closing participant's signature of the balance proof data\",\"nonce\":\"Strictly monotonic value used to order transfers\"}},\"constructor\":{\"params\":{\"_chain_id\":\"EIP-155 Chain ID of the blockchain where this instance is being deployed\",\"_channel_participant_deposit_limit\":\"The maximum amount of tokens that can be deposited by each participant of each channel. MAX_SAFE_UINT256 means no limits\",\"_deprecation_executor\":\"The Ethereum address that can disable new deposits and channel creation\",\"_secret_registry\":\"The address of SecretRegistry contract that witnesses the onchain secret reveals\",\"_settlement_timeout_max\":\"The longest settlement period (in number of blocks) that can be chosen at the channel opening\",\"_settlement_timeout_min\":\"The shortest settlement period (in number of blocks) that can be chosen at the channel opening\",\"_token_address\":\"The address of the ERC20 token contract\",\"_token_network_deposit_limit\":\"The maximum amount of tokens that this contract can hold MAX_SAFE_UINT256 means no limits\"}},\"contractExists(address)\":{\"params\":{\"contract_address\":\"The address to check whether a contract is deployed or not\"},\"returns\":{\"_0\":\"True if a contract exists, false otherwise\"}},\"getChannelIdentifier(address,address)\":{\"params\":{\"participant\":\"Address of a channel participant\",\"partner\":\"Address of the other channel participant\"},\"returns\":{\"_0\":\"Unique identifier for the channel. It can be 0 if channel does not exist\"}},\"getChannelInfo(uint256,address,address)\":{\"details\":\"Returns the channel specific data.\",\"params\":{\"channel_identifier\":\"Identifier for the channel on which this operation takes place\",\"participant1\":\"Address of a channel participant\",\"participant2\":\"Address of the other channel participant\"},\"returns\":{\"_0\":\"Channel settle_block_number and state\"}},\"getChannelParticipantInfo(uint256,address,address)\":{\"details\":\"Returns the channel specific data.\",\"params\":{\"channel_identifier\":\"Identifier for the channel on which this operation takes place\",\"participant\":\"Address of the channel participant whose data will be returned\",\"partner\":\"Address of the channel partner\"},\"returns\":{\"_0\":\"Participant's deposit, withdrawn_amount, whether the participant has called `closeChannel` or not, balance_hash, nonce, locksroot, locked_amount\"}},\"getParticipantsHash(address,address)\":{\"details\":\"Get the hash of the participant addresses, ordered lexicographically\",\"params\":{\"participant\":\"Address of a channel participant\",\"partner\":\"Address of the other channel participant\"}},\"getUnlockIdentifier(uint256,address,address)\":{\"details\":\"Get the hash of the channel identifier and the participant addresses (whose ordering matters). The hash might be useful for the receiver to look up the appropriate UnlockData to claim\",\"params\":{\"channel_identifier\":\"Identifier for the channel which the UnlockData is about\",\"receiver\":\"Receiver of the pending transfers that the UnlockData represents\",\"sender\":\"Sender of the pending transfers that the UnlockData represents\"}},\"openChannel(address,address,uint256)\":{\"params\":{\"participant1\":\"Ethereum address of a channel participant\",\"participant2\":\"Ethereum address of the other channel participant\",\"settle_timeout\":\"Number of blocks that need to be mined between a call to closeChannel and settleChannel\"}},\"setTotalDeposit(uint256,address,uint256,address)\":{\"params\":{\"channel_identifier\":\"Identifier for the channel on which this operation takes place\",\"participant\":\"Channel participant whose deposit is being set\",\"partner\":\"Channel partner address, needed to compute the total channel deposit\",\"total_deposit\":\"The total amount of tokens that the participant will have as a deposit\"}},\"setTotalWithdraw(uint256,address,uint256,uint256,bytes,bytes)\":{\"params\":{\"channel_identifier\":\"Identifier for the channel on which this operation takes place\",\"participant\":\"Channel participant, who will receive the withdrawn amount\",\"participant_signature\":\"Participant's signature on the withdraw data\",\"partner_signature\":\"Partner's signature on the withdraw data\",\"total_withdraw\":\"Total amount of tokens that are marked as withdrawn from the channel during the channel lifecycle\"}},\"settleChannel(uint256,address,uint256,uint256,bytes32,address,uint256,uint256,bytes32)\":{\"params\":{\"channel_identifier\":\"Identifier for the channel on which this operation takes place\",\"participant1\":\"Channel participant\",\"participant1_locked_amount\":\"Amount of tokens owed by `participant1` to `participant2`, contained in locked transfers that will be retrieved by calling `unlock` after the channel is settled\",\"participant1_locksroot\":\"The latest known hash of the pending hash-time locks of `participant1`, used to validate the unlocked proofs. If no balance_hash has been submitted, locksroot is ignored\",\"participant1_transferred_amount\":\"The latest known amount of tokens transferred from `participant1` to `participant2`\",\"participant2\":\"Other channel participant\",\"participant2_locked_amount\":\"Amount of tokens owed by `participant2` to `participant1`, contained in locked transfers that will be retrieved by calling `unlock` after the channel is settled\",\"participant2_locksroot\":\"The latest known hash of the pending hash-time locks of `participant2`, used to validate the unlocked proofs. If no balance_hash has been submitted, locksroot is ignored\",\"participant2_transferred_amount\":\"The latest known amount of tokens transferred from `participant2` to `participant1`\"}},\"unlock(uint256,address,address,bytes)\":{\"params\":{\"channel_identifier\":\"Identifier for the channel on which this operation takes place\",\"locks\":\"All pending locks concatenated in order of creation that `sender` sent to `receiver`\",\"receiver\":\"Address who will receive the claimable unlocked tokens\",\"sender\":\"Address who sent the pending transfers and will receive the unclaimable unlocked tokens\"}},\"updateNonClosingBalanceProof(uint256,address,address,bytes32,uint256,bytes32,bytes,bytes)\":{\"params\":{\"additional_hash\":\"Computed from the message. Used for message authentication\",\"balance_hash\":\"Hash of (transferred_amount, locked_amount, locksroot)\",\"channel_identifier\":\"Identifier for the channel on which this operation takes place\",\"closing_participant\":\"Channel participant who closed the channel\",\"closing_signature\":\"Closing participant's signature of the balance proof data\",\"non_closing_participant\":\"Channel participant who needs to update the balance proof\",\"non_closing_signature\":\"Non-closing participant signature of the balance proof data\",\"nonce\":\"Strictly monotonic value used to order transfers\"}}},\"title\":\"TokenNetwork\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"closeChannel(uint256,address,address,bytes32,uint256,bytes32,bytes,bytes)\":{\"notice\":\"Close the channel defined by the two participant addresses. Anybody can call this function on behalf of a participant (called the closing participant), providing a balance proof signed by both parties. Callable only once\"},\"contractExists(address)\":{\"notice\":\"Check if a contract exists\"},\"getChannelIdentifier(address,address)\":{\"notice\":\"Returns the unique identifier for the channel given by the contract\"},\"getChannelInfo(uint256,address,address)\":{\"notice\":\"The contract cannot really distinguish Settled and Removed states, especially when wrong participants are given as input. The contract does not remember the participants of the channel\"},\"openChannel(address,address,uint256)\":{\"notice\":\"Opens a new channel between `participant1` and `participant2`. Can be called by anyone\"},\"setTotalDeposit(uint256,address,uint256,address)\":{\"notice\":\"Sets the channel participant total deposit value. Can be called by anyone.\"},\"setTotalWithdraw(uint256,address,uint256,uint256,bytes,bytes)\":{\"notice\":\"Allows `participant` to withdraw tokens from the channel that he has with `partner`, without closing it. Can be called by anyone. Can only be called once per each signed withdraw message\"},\"settleChannel(uint256,address,uint256,uint256,bytes32,address,uint256,uint256,bytes32)\":{\"notice\":\"Settles the balance between the two parties. Note that arguments order counts: `participant1_transferred_amount + participant1_locked_amount` <= `participant2_transferred_amount + participant2_locked_amount`\"},\"unlock(uint256,address,address,bytes)\":{\"notice\":\"Unlocks all pending off-chain transfers from `sender` to `receiver` and sends the locked tokens corresponding to locks with secrets registered on-chain to the `receiver`. Locked tokens corresponding to locks where the secret was not revealed on-chain will return to the `sender`. Anyone can call unlock.\"},\"updateNonClosingBalanceProof(uint256,address,address,bytes32,uint256,bytes32,bytes,bytes)\":{\"notice\":\"Called on a closed channel, the function allows the non-closing participant to provide the last balance proof, which modifies the closing participant's state. Can be called multiple times by anyone.\"}},\"notice\":\"Stores and manages all the Raiden Network channels that use the token specified in this TokenNetwork contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/raiden/TokenNetwork.sol\":\"TokenNetwork\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/lib/ECVerify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nlibrary ECVerify {\\n\\n    function ecverify(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address signature_address)\\n    {\\n        require(signature.length == 65);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // The signature format is a compact form of:\\n        //   {bytes32 r}{bytes32 s}{uint8 v}\\n        // Compact means, uint8 is not padded to 32 bytes.\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n\\n            // Here we are loading the last 32 bytes, including 31 bytes following the signature.\\n            v := byte(0, mload(add(signature, 96)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        require(v == 27 || v == 28);\\n\\n        signature_address = ecrecover(hash, v, r, s);\\n\\n        // ecrecover returns zero on error\\n        require(signature_address != address(0x0));\\n\\n        return signature_address;\\n    }\\n}\\n\",\"keccak256\":\"0xeced41e7578af77042e00fc68e482b754cd355da872bfdda95a0b74e3dbd90e0\",\"license\":\"MIT\"},\"data/source/lib/MessageType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nlibrary MessageType {\\n\\n    enum MessageTypeId {\\n        None,\\n        BalanceProof,\\n        BalanceProofUpdate,\\n        Withdraw,\\n        CooperativeSettle,\\n        IOU,\\n        MSReward\\n    }\\n}\\n\",\"keccak256\":\"0xe4a3d54220ba19024c03fac9f8b3338245f2c4aa266627e6cdb5e97a2adcdee4\",\"license\":\"MIT\"},\"data/source/lib/TokenNetworkUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable indentation */\\npragma solidity 0.7.6;\\n\\nimport \\\"./ECVerify.sol\\\";\\nimport \\\"./MessageType.sol\\\";\\n\\nlibrary TokenNetworkUtils {\\n    string internal constant signature_prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n\\\";\\n\\n    function getMaxPossibleReceivableAmount(\\n        uint256 participant1_deposit,\\n        uint256 participant1_withdrawn,\\n        uint256 participant1_transferred,\\n        uint256 participant1_locked,\\n        uint256 participant2_deposit,\\n        uint256 participant2_withdrawn,\\n        uint256 participant2_transferred,\\n        uint256 participant2_locked\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 participant1_max_transferred;\\n        uint256 participant2_max_transferred;\\n        uint256 participant1_net_max_received;\\n        uint256 participant1_max_amount;\\n\\n        // This is the maximum possible amount that participant1 could transfer\\n        // to participant2, if all the pending lock secrets have been\\n        // registered\\n        participant1_max_transferred = failsafe_addition(\\n            participant1_transferred,\\n            participant1_locked\\n        );\\n\\n        // This is the maximum possible amount that participant2 could transfer\\n        // to participant1, if all the pending lock secrets have been\\n        // registered\\n        participant2_max_transferred = failsafe_addition(\\n            participant2_transferred,\\n            participant2_locked\\n        );\\n\\n        // We enforce this check artificially, in order to get rid of hard\\n        // to deal with over/underflows. Settlement balance calculation is\\n        // symmetric (we can calculate either RmaxP1 and RmaxP2 first, order does\\n        // not affect result). This means settleChannel must be called with\\n        // ordered values.\\n        require(participant2_max_transferred >= participant1_max_transferred, \\\"TNU: transfers not ordered\\\");\\n\\n        assert(participant1_max_transferred >= participant1_transferred);\\n        assert(participant2_max_transferred >= participant2_transferred);\\n\\n        // This is the maximum amount that participant1 can receive at settlement time\\n        participant1_net_max_received = (\\n            participant2_max_transferred -\\n            participant1_max_transferred\\n        );\\n\\n        // Next, we add the participant1's deposit and subtract the already\\n        // withdrawn amount\\n        participant1_max_amount = failsafe_addition(\\n            participant1_net_max_received,\\n            participant1_deposit\\n        );\\n\\n        // Subtract already withdrawn amount\\n        (participant1_max_amount, ) = failsafe_subtract(\\n            participant1_max_amount,\\n            participant1_withdrawn\\n        );\\n        return participant1_max_amount;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        return a > b ? b : a;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        return a > b ? a : b;\\n    }\\n\\n    /// @dev Special subtraction function that does not fail when underflowing.\\n    /// @param a Minuend\\n    /// @param b Subtrahend\\n    /// @return Minimum between the result of the subtraction and 0, the maximum\\n    /// subtrahend for which no underflow occurs\\n    function failsafe_subtract(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        return a > b ? (a - b, b) : (0, a);\\n    }\\n\\n    /// @dev Special addition function that does not fail when overflowing.\\n    /// @param a Addend\\n    /// @param b Addend\\n    /// @return Maximum between the result of the addition or the maximum\\n    /// uint256 value\\n    function failsafe_addition(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 MAX_SAFE_UINT256 = (\\n            115792089237316195423570985008687907853269984665640564039457584007913129639935\\n        );\\n        uint256 sum = a + b;\\n        return sum >= a ? sum : MAX_SAFE_UINT256;\\n    }\\n\\n    function recoverAddressFromBalanceProof(\\n        uint256 chain_id,\\n        uint256 channel_identifier,\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes memory signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 32 + 32 + 32\\n        string memory message_length = \\\"212\\\";\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(MessageType.MessageTypeId.BalanceProof),\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, signature);\\n    }\\n\\n    function recoverAddressFromBalanceProofCounterSignature(\\n        MessageType.MessageTypeId message_type_id,\\n        uint256 chain_id,\\n        uint256 channel_identifier,\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes memory closing_signature,\\n        bytes memory non_closing_signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 32 + 32 + 32 + 65\\n        string memory message_length = \\\"277\\\";\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(message_type_id),\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            closing_signature\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, non_closing_signature);\\n    }\\n\\n    /* function recoverAddressFromCooperativeSettleSignature(\\n        uint256 channel_identifier,\\n        address participant1,\\n        uint256 participant1_balance,\\n        address participant2,\\n        uint256 participant2_balance,\\n        bytes signature\\n    )\\n        view\\n        internal\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 20 + 32 + 20 + 32\\n        string memory message_length = '220';\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(MessageTypeId.CooperativeSettle),\\n            channel_identifier,\\n            participant1,\\n            participant1_balance,\\n            participant2,\\n            participant2_balance\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, signature);\\n    } */\\n\\n    function recoverAddressFromWithdrawMessage(\\n        uint256 chain_id,\\n        uint256 channel_identifier,\\n        address participant,\\n        uint256 total_withdraw,\\n        uint256 expiration_block,\\n        bytes memory signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 20 + 32 + 32\\n        string memory message_length = \\\"200\\\";\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(MessageType.MessageTypeId.Withdraw),\\n            channel_identifier,\\n            participant,\\n            total_withdraw,\\n            expiration_block\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, signature);\\n    }\\n}\\n\",\"keccak256\":\"0x115640f1f605878e1d55e5e5e3c3e0f24e55eb435d8e618405d4bf2f14a99f59\",\"license\":\"MIT\"},\"data/source/raiden/SecretRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @title SecretRegistry\\n/// @notice SecretRegistry contract for registering secrets from Raiden Network\\n/// clients.\\ncontract SecretRegistry {\\n    // sha256(secret) => block number at which the secret was revealed\\n    mapping(bytes32 => uint256) private secrethash_to_block;\\n\\n    event SecretRevealed(bytes32 indexed secrethash, bytes32 secret);\\n\\n    /// @notice Registers a hash time lock secret and saves the block number.\\n    /// This allows the lock to be unlocked after the expiration block\\n    /// @param secret The secret used to lock the hash time lock\\n    /// @return true if secret was registered, false if the secret was already\\n    /// registered\\n    function registerSecret(bytes32 secret) public returns (bool) {\\n        bytes32 secrethash = sha256(abi.encodePacked(secret));\\n        if (secrethash_to_block[secrethash] > 0) {\\n            return false;\\n        }\\n        secrethash_to_block[secrethash] = block.number;\\n        emit SecretRevealed(secrethash, secret);\\n        return true;\\n    }\\n\\n    /// @notice Registers multiple hash time lock secrets and saves the block\\n    /// number\\n    /// @param secrets The array of secrets to be registered\\n    /// @return true if all secrets could be registered, false otherwise\\n    function registerSecretBatch(bytes32[] memory secrets) public returns (bool) {\\n        bool completeSuccess = true;\\n        for(uint i = 0; i < secrets.length; i++) {\\n            if(!registerSecret(secrets[i])) {\\n                completeSuccess = false;\\n            }\\n        }\\n        return completeSuccess;\\n    }\\n\\n    /// @notice Get the stored block number at which the secret was revealed\\n    /// @param secrethash The hash of the registered secret `keccak256(secret)`\\n    /// @return The block number at which the secret was revealed\\n    function getSecretRevealBlockHeight(bytes32 secrethash) public view returns (uint256) {\\n        return secrethash_to_block[secrethash];\\n    }\\n}\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\",\"keccak256\":\"0x828dbf9a344f66cb982df97f677d10942d1b163287b890860be40230b236642e\",\"license\":\"MIT\"},\"data/source/raiden/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface Token {\\n\\n    /// @return supply total amount of tokens\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return balance The balance\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return success Whether the approval was successful or not\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return remaining Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    // Optionally implemented function to show the number of decimals for the token\\n    function decimals() external view returns (uint8 decimals);\\n}\\n\",\"keccak256\":\"0x5a8ccb9fa426228d9e213164f22a94b0ac57f1aa15ab76ce88a96177edd7b0b3\",\"license\":\"MIT\"},\"data/source/raiden/TokenNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\n/* solium-disable indentation */\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../lib/ECVerify.sol\\\";\\nimport \\\"../lib/MessageType.sol\\\";\\nimport \\\"../lib/TokenNetworkUtils.sol\\\";\\nimport \\\"./Token.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"./SecretRegistry.sol\\\";\\n\\n/// @title TokenNetwork\\n/// @notice Stores and manages all the Raiden Network channels that use the\\n/// token specified in this TokenNetwork contract.\\ncontract TokenNetwork is Utils {\\n    // Instance of the token used by the channels\\n    Token public token;\\n\\n    // Instance of SecretRegistry used for storing secrets revealed in a\\n    // mediating transfer.\\n    SecretRegistry public secret_registry;\\n\\n    // Chain ID as specified by EIP155 used in balance proof signatures to\\n    // avoid replay attacks\\n    uint256 public chain_id;\\n\\n    uint256 public settlement_timeout_min;\\n    uint256 public settlement_timeout_max;\\n\\n    uint256 constant public MAX_SAFE_UINT256 = (\\n        115792089237316195423570985008687907853269984665640564039457584007913129639935\\n    );\\n\\n    // The deposit limit per channel per participant.\\n    uint256 public channel_participant_deposit_limit;\\n    // The total combined deposit of all channels across the whole network\\n    uint256 public token_network_deposit_limit;\\n\\n    // Global, monotonically increasing counter that keeps track of all the\\n    // opened channels in this contract\\n    uint256 public channel_counter;\\n\\n    // Only for the limited Red Eyes release\\n    address public deprecation_executor;\\n    bool public safety_deprecation_switch = false;\\n\\n    // channel_identifier => Channel\\n    // channel identifier is the channel_counter value at the time of opening\\n    // the channel\\n    mapping (uint256 => Channel) public channels;\\n\\n    // This is needed to enforce one channel per pair of participants\\n    // The key is keccak256(participant1_address, participant2_address)\\n    mapping (bytes32 => uint256) public participants_hash_to_channel_identifier;\\n\\n    // We keep the unlock data in a separate mapping to allow channel data\\n    // structures to be removed when settling uncooperatively. If there are\\n    // locked pending transfers, we need to store data needed to unlock them at\\n    // a later time.\\n    // The key is `keccak256(uint256 channel_identifier, address participant,\\n    // address partner)` Where `participant` is the participant that sent the\\n    // pending transfers We need `partner` for knowing where to send the\\n    // claimable tokens\\n    mapping(bytes32 => UnlockData) private unlock_identifier_to_unlock_data;\\n\\n    struct Participant {\\n        // Total amount of tokens transferred to this smart contract through\\n        // the `setTotalDeposit` function, for a specific channel, in the\\n        // participant's benefit.\\n        // This is a strictly monotonic value. Note that direct token transfer\\n        // into the contract cannot be tracked and will be stuck.\\n        uint256 deposit;\\n\\n        // Total amount of tokens withdrawn by the participant during the\\n        // lifecycle of this channel.\\n        // This is a strictly monotonic value.\\n        uint256 withdrawn_amount;\\n\\n        // This is a value set to true after the channel has been closed, only\\n        // if this is the participant who closed the channel.\\n        bool is_the_closer;\\n\\n        // keccak256 of the balance data provided after a closeChannel or an\\n        // updateNonClosingBalanceProof call\\n        bytes32 balance_hash;\\n\\n        // Monotonically increasing counter of the off-chain transfers,\\n        // provided along with the balance_hash\\n        uint256 nonce;\\n    }\\n\\n    enum ChannelState {\\n        NonExistent, // 0\\n        Opened,      // 1\\n        Closed,      // 2\\n        Settled,     // 3; Note: The channel has at least one pending unlock\\n        Removed      // 4; Note: Channel data is removed, there are no pending unlocks\\n    }\\n\\n    struct Channel {\\n        // After opening the channel this value represents the settlement\\n        // window. This is the number of blocks that need to be mined between\\n        // closing the channel uncooperatively and settling the channel.\\n        // After the channel has been uncooperatively closed, this value\\n        // represents the block number after which settleChannel can be called.\\n        uint256 settle_block_number;\\n\\n        ChannelState state;\\n\\n        mapping(address => Participant) participants;\\n    }\\n\\n    struct SettlementData {\\n        uint256 deposit;\\n        uint256 withdrawn;\\n        uint256 transferred;\\n        uint256 locked;\\n    }\\n\\n    struct UnlockData {\\n        // keccak256 hash of the pending locks from the Raiden client\\n        bytes32 locksroot;\\n        // Total amount of tokens locked in the pending locks corresponding\\n        // to the `locksroot`\\n        uint256 locked_amount;\\n    }\\n\\n    struct SettleInput {\\n        address participant;\\n        uint256 transferred_amount;\\n        uint256 locked_amount;\\n        bytes32 locksroot;\\n    }\\n\\n    event ChannelOpened(\\n        uint256 indexed channel_identifier,\\n        address indexed participant1,\\n        address indexed participant2,\\n        uint256 settle_timeout\\n    );\\n\\n    event ChannelNewDeposit(\\n        uint256 indexed channel_identifier,\\n        address indexed participant,\\n        uint256 total_deposit\\n    );\\n\\n    // Fires when the deprecation_switch's value changes\\n    event DeprecationSwitch(bool new_value);\\n\\n    // total_withdraw is how much the participant has withdrawn during the\\n    // lifetime of the channel. The actual amount which the participant withdrew\\n    // is `total_withdraw - total_withdraw_from_previous_event_or_zero`\\n    event ChannelWithdraw(\\n        uint256 indexed channel_identifier,\\n        address indexed participant,\\n        uint256 total_withdraw\\n    );\\n\\n    event ChannelClosed(\\n        uint256 indexed channel_identifier,\\n        address indexed closing_participant,\\n        uint256 indexed nonce,\\n        bytes32 balance_hash\\n    );\\n\\n    event ChannelUnlocked(\\n        uint256 indexed channel_identifier,\\n        address indexed receiver,\\n        address indexed sender,\\n        bytes32 locksroot,\\n        uint256 unlocked_amount,\\n        uint256 returned_tokens\\n    );\\n\\n    event NonClosingBalanceProofUpdated(\\n        uint256 indexed channel_identifier,\\n        address indexed closing_participant,\\n        uint256 indexed nonce,\\n        bytes32 balance_hash\\n    );\\n\\n    event ChannelSettled(\\n        uint256 indexed channel_identifier,\\n        uint256 participant1_amount,\\n        bytes32 participant1_locksroot,\\n        uint256 participant2_amount,\\n        bytes32 participant2_locksroot\\n    );\\n\\n    modifier onlyDeprecationExecutor() {\\n        require(msg.sender == deprecation_executor);\\n        _;\\n    }\\n\\n    modifier isSafe() {\\n        require(safety_deprecation_switch == false);\\n        _;\\n    }\\n\\n    modifier isOpen(uint256 channel_identifier) {\\n        require(channels[channel_identifier].state == ChannelState.Opened);\\n        _;\\n    }\\n\\n    modifier settleTimeoutValid(uint256 timeout) {\\n        require(timeout >= settlement_timeout_min);\\n        require(timeout <= settlement_timeout_max);\\n        _;\\n    }\\n\\n    /// @param _token_address The address of the ERC20 token contract\\n    /// @param _secret_registry The address of SecretRegistry contract that witnesses the onchain secret reveals\\n    /// @param _chain_id EIP-155 Chain ID of the blockchain where this instance is being deployed\\n    /// @param _settlement_timeout_min The shortest settlement period (in number of blocks)\\n    /// that can be chosen at the channel opening\\n    /// @param _settlement_timeout_max The longest settlement period (in number of blocks)\\n    /// that can be chosen at the channel opening\\n    /// @param _deprecation_executor The Ethereum address that can disable new deposits and channel creation\\n    /// @param _channel_participant_deposit_limit The maximum amount of tokens that can be deposited by each\\n    /// participant of each channel. MAX_SAFE_UINT256 means no limits\\n    /// @param _token_network_deposit_limit The maximum amount of tokens that this contract can hold\\n    /// MAX_SAFE_UINT256 means no limits\\n    constructor(\\n        address _token_address,\\n        address _secret_registry,\\n        uint256 _chain_id,\\n        uint256 _settlement_timeout_min,\\n        uint256 _settlement_timeout_max,\\n        address _deprecation_executor,\\n        uint256 _channel_participant_deposit_limit,\\n        uint256 _token_network_deposit_limit\\n    ) {\\n        require(_token_address != address(0x0));\\n        require(_secret_registry != address(0x0));\\n        require(_deprecation_executor != address(0x0));\\n        require(_chain_id > 0);\\n        require(_settlement_timeout_min > 0);\\n        require(_settlement_timeout_max > _settlement_timeout_min);\\n        require(contractExists(_token_address));\\n        require(contractExists(_secret_registry));\\n        require(_channel_participant_deposit_limit > 0);\\n        require(_token_network_deposit_limit > 0);\\n        require(_token_network_deposit_limit >= _channel_participant_deposit_limit);\\n\\n        token = Token(_token_address);\\n\\n        secret_registry = SecretRegistry(_secret_registry);\\n        chain_id = _chain_id;\\n        settlement_timeout_min = _settlement_timeout_min;\\n        settlement_timeout_max = _settlement_timeout_max;\\n\\n        // Make sure the contract is indeed a token contract\\n        require(token.totalSupply() > 0);\\n\\n        deprecation_executor = _deprecation_executor;\\n        channel_participant_deposit_limit = _channel_participant_deposit_limit;\\n        token_network_deposit_limit = _token_network_deposit_limit;\\n    }\\n\\n    function deprecate() public isSafe onlyDeprecationExecutor {\\n        safety_deprecation_switch = true;\\n        emit DeprecationSwitch(safety_deprecation_switch);\\n    }\\n\\n    /// @notice Opens a new channel between `participant1` and `participant2`.\\n    /// Can be called by anyone\\n    /// @param participant1 Ethereum address of a channel participant\\n    /// @param participant2 Ethereum address of the other channel participant\\n    /// @param settle_timeout Number of blocks that need to be mined between a\\n    /// call to closeChannel and settleChannel\\n    function openChannel(address participant1, address participant2, uint256 settle_timeout)\\n        public\\n        isSafe\\n        settleTimeoutValid(settle_timeout)\\n        returns (uint256)\\n    {\\n        bytes32 pair_hash;\\n        uint256 channel_identifier;\\n\\n        // Red Eyes release token network limit\\n        require(token.balanceOf(address(this)) < token_network_deposit_limit);\\n\\n        // First increment the counter\\n        // There will never be a channel with channel_identifier == 0\\n        channel_counter += 1;\\n        channel_identifier = channel_counter;\\n\\n        pair_hash = getParticipantsHash(participant1, participant2);\\n\\n        // There must only be one channel opened between two participants at\\n        // any moment in time.\\n        require(participants_hash_to_channel_identifier[pair_hash] == 0);\\n        participants_hash_to_channel_identifier[pair_hash] = channel_identifier;\\n\\n        Channel storage channel = channels[channel_identifier];\\n\\n        // We always increase the channel counter, therefore no channel data can already exist,\\n        // corresponding to this channel_identifier. This check must never fail.\\n        assert(channel.settle_block_number == 0);\\n        assert(channel.state == ChannelState.NonExistent);\\n\\n        // Store channel information\\n        channel.settle_block_number = settle_timeout;\\n        channel.state = ChannelState.Opened;\\n\\n        emit ChannelOpened(\\n            channel_identifier,\\n            participant1,\\n            participant2,\\n            settle_timeout\\n        );\\n\\n        return channel_identifier;\\n    }\\n\\n    /// @notice Sets the channel participant total deposit value.\\n    /// Can be called by anyone.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant Channel participant whose deposit is being set\\n    /// @param total_deposit The total amount of tokens that the participant\\n    /// will have as a deposit\\n    /// @param partner Channel partner address, needed to compute the total\\n    /// channel deposit\\n    function setTotalDeposit(\\n        uint256 channel_identifier,\\n        address participant,\\n        uint256 total_deposit,\\n        address partner\\n    )\\n        public\\n        isSafe\\n        isOpen(channel_identifier)\\n    {\\n        require(channel_identifier == getChannelIdentifier(participant, partner));\\n        require(total_deposit > 0);\\n        require(total_deposit <= channel_participant_deposit_limit);\\n\\n        uint256 added_deposit;\\n        uint256 channel_deposit;\\n\\n        Channel storage channel = channels[channel_identifier];\\n        Participant storage participant_state = channel.participants[participant];\\n        Participant storage partner_state = channel.participants[partner];\\n\\n        // Calculate the actual amount of tokens that will be transferred\\n        added_deposit = total_deposit - participant_state.deposit;\\n\\n        // The actual amount of tokens that will be transferred must be > 0\\n        require(added_deposit > 0);\\n\\n        // Underflow check; we use <= because added_deposit == total_deposit for the first deposit\\n\\n        require(added_deposit <= total_deposit);\\n\\n        // This should never fail at this point. Added check for security, because we directly set\\n        // the participant_state.deposit = total_deposit, while we transfer `added_deposit` tokens\\n        assert(participant_state.deposit + added_deposit == total_deposit);\\n\\n        // Red Eyes release token network limit\\n        require(token.balanceOf(address(this)) + added_deposit <= token_network_deposit_limit);\\n\\n        // Update the participant's channel deposit\\n        participant_state.deposit = total_deposit;\\n\\n        // Calculate the entire channel deposit, to avoid overflow\\n        channel_deposit = participant_state.deposit + partner_state.deposit;\\n        // Overflow check\\n        require(channel_deposit >= participant_state.deposit);\\n\\n        emit ChannelNewDeposit(\\n            channel_identifier,\\n            participant,\\n            participant_state.deposit\\n        );\\n\\n        // Do the transfer\\n        require(token.transferFrom(msg.sender, address(this), added_deposit));\\n    }\\n\\n    /// @notice Allows `participant` to withdraw tokens from the channel that he\\n    /// has with `partner`, without closing it. Can be called by anyone. Can\\n    /// only be called once per each signed withdraw message\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant Channel participant, who will receive the withdrawn\\n    /// amount\\n    /// @param total_withdraw Total amount of tokens that are marked as\\n    /// withdrawn from the channel during the channel lifecycle\\n    /// @param participant_signature Participant's signature on the withdraw\\n    /// data\\n    /// @param partner_signature Partner's signature on the withdraw data\\n    function setTotalWithdraw(\\n        uint256 channel_identifier,\\n        address participant,\\n        uint256 total_withdraw,\\n        uint256 expiration_block,\\n        bytes calldata participant_signature,\\n        bytes calldata partner_signature\\n    )\\n        external\\n        isOpen(channel_identifier)\\n    {\\n        uint256 total_deposit;\\n        uint256 current_withdraw;\\n        address partner;\\n\\n        require(total_withdraw > 0);\\n        require(block.number < expiration_block);\\n\\n        // Authenticate both channel partners via their signatures.\\n        // `participant` is a part of the signed message, so given in the calldata.\\n        require(participant == TokenNetworkUtils.recoverAddressFromWithdrawMessage(\\n            chain_id,\\n            channel_identifier,\\n            participant,\\n            total_withdraw,\\n            expiration_block,\\n            participant_signature\\n        ));\\n        partner = TokenNetworkUtils.recoverAddressFromWithdrawMessage(\\n            chain_id,\\n            channel_identifier,\\n            participant,\\n            total_withdraw,\\n            expiration_block,\\n            partner_signature\\n        );\\n\\n        // Validate that authenticated partners and the channel identifier match\\n        require(channel_identifier == getChannelIdentifier(participant, partner));\\n\\n        // Read channel state after validating the function input\\n        Channel storage channel = channels[channel_identifier];\\n        Participant storage participant_state = channel.participants[participant];\\n        Participant storage partner_state = channel.participants[partner];\\n\\n        total_deposit = participant_state.deposit + partner_state.deposit;\\n\\n        // Entire withdrawn amount must not be bigger than the current channel deposit\\n        require((total_withdraw + partner_state.withdrawn_amount) <= total_deposit);\\n        require(total_withdraw <= (total_withdraw + partner_state.withdrawn_amount));\\n\\n        // Using the total_withdraw (monotonically increasing) in the signed\\n        // message ensures that we do not allow replay attack to happen, by\\n        // using the same withdraw proof twice.\\n        // Next two lines enforce the monotonicity of total_withdraw and check for an underflow:\\n        // (we use <= because current_withdraw == total_withdraw for the first withdraw)\\n        current_withdraw = total_withdraw - participant_state.withdrawn_amount;\\n        require(current_withdraw <= total_withdraw);\\n\\n        // The actual amount of tokens that will be transferred must be > 0 to disable the reuse of\\n        // withdraw messages completely.\\n        require(current_withdraw > 0);\\n\\n        // This should never fail at this point. Added check for security, because we directly set\\n        // the participant_state.withdrawn_amount = total_withdraw,\\n        // while we transfer `current_withdraw` tokens.\\n        assert(participant_state.withdrawn_amount + current_withdraw == total_withdraw);\\n\\n        emit ChannelWithdraw(\\n            channel_identifier,\\n            participant,\\n            total_withdraw\\n        );\\n\\n        // Do the state change and tokens transfer\\n        participant_state.withdrawn_amount = total_withdraw;\\n        require(token.transfer(participant, current_withdraw));\\n\\n        // This should never happen, as we have an overflow check in setTotalDeposit\\n        assert(total_deposit >= participant_state.deposit);\\n        assert(total_deposit >= partner_state.deposit);\\n\\n        // A withdraw should never happen if a participant already has a\\n        // balance proof in storage. This should never fail as we use isOpen.\\n        assert(participant_state.nonce == 0);\\n        assert(partner_state.nonce == 0);\\n\\n    }\\n\\n    /// @notice Close the channel defined by the two participant addresses.\\n    /// Anybody can call this function on behalf of a participant (called\\n    /// the closing participant), providing a balance proof signed by\\n    /// both parties. Callable only once\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param closing_participant Channel participant who closes the channel\\n    /// @param non_closing_participant Channel partner of the `closing_participant`,\\n    /// who provided the balance proof\\n    /// @param balance_hash Hash of (transferred_amount, locked_amount,\\n    /// locksroot)\\n    /// @param additional_hash Computed from the message. Used for message\\n    /// authentication\\n    /// @param nonce Strictly monotonic value used to order transfers\\n    /// @param non_closing_signature Non-closing participant's signature of the balance proof data\\n    /// @param closing_signature Closing participant's signature of the balance\\n    /// proof data\\n    function closeChannel(\\n        uint256 channel_identifier,\\n        address non_closing_participant,\\n        address closing_participant,\\n        // The next four arguments form a balance proof.\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes memory non_closing_signature,\\n        bytes memory closing_signature\\n    )\\n        public\\n        isOpen(channel_identifier)\\n    {\\n        require(channel_identifier == getChannelIdentifier(closing_participant, non_closing_participant));\\n\\n        address recovered_non_closing_participant_address;\\n\\n        Channel storage channel = channels[channel_identifier];\\n\\n        channel.state = ChannelState.Closed;\\n        channel.participants[closing_participant].is_the_closer = true;\\n\\n        // This is the block number at which the channel can be settled.\\n        channel.settle_block_number += uint256(block.number);\\n\\n        // The closing participant must have signed the balance proof.\\n        address recovered_closing_participant_address = TokenNetworkUtils.recoverAddressFromBalanceProofCounterSignature(\\n            MessageType.MessageTypeId.BalanceProof,\\n            chain_id,\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            non_closing_signature,\\n            closing_signature\\n        );\\n        require(closing_participant == recovered_closing_participant_address);\\n\\n        // Nonce 0 means that the closer never received a transfer, therefore\\n        // never received a balance proof, or he is intentionally not providing\\n        // the latest transfer, in which case the closing party is going to\\n        // lose the tokens that were transferred to him.\\n        if (nonce > 0) {\\n            recovered_non_closing_participant_address = TokenNetworkUtils.recoverAddressFromBalanceProof(\\n                chain_id,\\n                channel_identifier,\\n                balance_hash,\\n                nonce,\\n                additional_hash,\\n                non_closing_signature\\n            );\\n            // Signature must be from the channel partner\\n            require(non_closing_participant == recovered_non_closing_participant_address);\\n\\n            updateBalanceProofData(\\n                channel,\\n                recovered_non_closing_participant_address,\\n                nonce,\\n                balance_hash\\n            );\\n        }\\n\\n        emit ChannelClosed(channel_identifier, closing_participant, nonce, balance_hash);\\n    }\\n\\n    /// @notice Called on a closed channel, the function allows the non-closing\\n    /// participant to provide the last balance proof, which modifies the\\n    /// closing participant's state. Can be called multiple times by anyone.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param closing_participant Channel participant who closed the channel\\n    /// @param non_closing_participant Channel participant who needs to update\\n    /// the balance proof\\n    /// @param balance_hash Hash of (transferred_amount, locked_amount,\\n    /// locksroot)\\n    /// @param additional_hash Computed from the message. Used for message\\n    /// authentication\\n    /// @param nonce Strictly monotonic value used to order transfers\\n    /// @param closing_signature Closing participant's signature of the balance\\n    /// proof data\\n    /// @param non_closing_signature Non-closing participant signature of the\\n    /// balance proof data\\n    function updateNonClosingBalanceProof(\\n        uint256 channel_identifier,\\n        address closing_participant,\\n        address non_closing_participant,\\n        // The next four arguments form a balance proof\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes calldata closing_signature,\\n        bytes calldata non_closing_signature\\n    )\\n        external\\n    {\\n        require(channel_identifier == getChannelIdentifier(\\n            closing_participant,\\n            non_closing_participant\\n        ));\\n        require(balance_hash != bytes32(0x0));\\n        require(nonce > 0);\\n\\n        address recovered_non_closing_participant;\\n        address recovered_closing_participant;\\n\\n        Channel storage channel = channels[channel_identifier];\\n\\n        require(channel.state == ChannelState.Closed);\\n\\n        // Calling this function after the settlement window is forbidden to\\n        // fix the following race condition:\\n        //\\n        // 1 A badly configured node A, that doesn't have a monitoring service\\n        //   and is temporarily offline does not call update during the\\n        //   settlement window.\\n        // 2 The well behaved partner B, who called close, sees the\\n        //   settlement window is over and calls settle. At this point the B's\\n        //   balance proofs which should be provided by A is missing, so B will\\n        //   call settle with its balance proof zeroed out.\\n        // 3 A restarts and calls update, which will change B's balance\\n        //   proof.\\n        // 4 At this point, the transactions from 2 and 3 are racing, and one\\n        //   of them will fail.\\n        //\\n        // To avoid the above race condition, which would require special\\n        // handling on both nodes, the call to update is forbidden after the\\n        // settlement window. This does not affect safety, since we assume the\\n        // nodes are always properly configured and have a monitoring service\\n        // available to call update on the user's behalf.\\n        require(channel.settle_block_number >= block.number);\\n\\n        // We need the signature from the non-closing participant to allow\\n        // anyone to make this transaction. E.g. a monitoring service.\\n        recovered_non_closing_participant = TokenNetworkUtils.recoverAddressFromBalanceProofCounterSignature(\\n            MessageType.MessageTypeId.BalanceProofUpdate,\\n            chain_id,\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            closing_signature,\\n            non_closing_signature\\n        );\\n        require(non_closing_participant == recovered_non_closing_participant);\\n\\n        recovered_closing_participant = TokenNetworkUtils.recoverAddressFromBalanceProof(\\n            chain_id,\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            closing_signature\\n        );\\n        require(closing_participant == recovered_closing_participant);\\n\\n        Participant storage closing_participant_state = channel.participants[closing_participant];\\n        // Make sure the first signature is from the closing participant\\n        require(closing_participant_state.is_the_closer);\\n\\n        // Update the balance proof data for the closing_participant\\n        updateBalanceProofData(channel, closing_participant, nonce, balance_hash);\\n\\n        emit NonClosingBalanceProofUpdated(\\n            channel_identifier,\\n            closing_participant,\\n            nonce,\\n            balance_hash\\n        );\\n    }\\n\\n    /// @notice Settles the balance between the two parties. Note that arguments\\n    /// order counts: `participant1_transferred_amount +\\n    /// participant1_locked_amount` <= `participant2_transferred_amount +\\n    /// participant2_locked_amount`\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant1 Channel participant\\n    /// @param participant1_transferred_amount The latest known amount of tokens\\n    /// transferred from `participant1` to `participant2`\\n    /// @param participant1_locked_amount Amount of tokens owed by\\n    /// `participant1` to `participant2`, contained in locked transfers that\\n    /// will be retrieved by calling `unlock` after the channel is settled\\n    /// @param participant1_locksroot The latest known hash of the\\n    /// pending hash-time locks of `participant1`, used to validate the unlocked\\n    /// proofs. If no balance_hash has been submitted, locksroot is ignored\\n    /// @param participant2 Other channel participant\\n    /// @param participant2_transferred_amount The latest known amount of tokens\\n    /// transferred from `participant2` to `participant1`\\n    /// @param participant2_locked_amount Amount of tokens owed by\\n    /// `participant2` to `participant1`, contained in locked transfers that\\n    /// will be retrieved by calling `unlock` after the channel is settled\\n    /// @param participant2_locksroot The latest known hash of the\\n    /// pending hash-time locks of `participant2`, used to validate the unlocked\\n    /// proofs. If no balance_hash has been submitted, locksroot is ignored\\n    function settleChannel(\\n        uint256 channel_identifier,\\n        address participant1,\\n        uint256 participant1_transferred_amount,\\n        uint256 participant1_locked_amount,\\n        bytes32 participant1_locksroot,\\n        address participant2,\\n        uint256 participant2_transferred_amount,\\n        uint256 participant2_locked_amount,\\n        bytes32 participant2_locksroot\\n    )\\n        public\\n    {\\n        settleChannel2(\\n            channel_identifier,\\n            SettleInput({\\n                participant: participant1,\\n                transferred_amount: participant1_transferred_amount,\\n                locked_amount: participant1_locked_amount,\\n                locksroot: participant1_locksroot\\n            }),\\n            SettleInput({\\n                participant: participant2,\\n                transferred_amount: participant2_transferred_amount,\\n                locked_amount: participant2_locked_amount,\\n                locksroot: participant2_locksroot\\n            })\\n        );\\n    }\\n\\n    function settleChannel2(\\n        uint256 channel_identifier,\\n        SettleInput memory participant1_settlement,\\n        SettleInput memory participant2_settlement\\n    )\\n        public\\n    {\\n        // There are several requirements that this function MUST enforce:\\n        // - it MUST never fail; therefore, any overflows or underflows must be\\n        // handled gracefully\\n        // - it MUST ensure that if participants use the latest valid balance proofs,\\n        // provided by the official Raiden client, the participants will be able\\n        // to receive correct final balances at the end of the channel lifecycle\\n        // - it MUST ensure that the participants cannot cheat by providing an\\n        // old, valid balance proof of their partner; meaning that their partner MUST\\n        // receive at least the amount of tokens that he would have received if\\n        // the latest valid balance proofs are used.\\n        // - the contract cannot determine if a balance proof is invalid (values\\n        // are not within the constraints enforced by the official Raiden client),\\n        // therefore it cannot ensure correctness. Users MUST use the official\\n        // Raiden clients for signing balance proofs.\\n\\n        address participant1 = participant1_settlement.participant;\\n        address participant2 = participant2_settlement.participant;\\n        require(channel_identifier == getChannelIdentifier(participant1, participant2));\\n\\n        bytes32 pair_hash;\\n\\n        pair_hash = getParticipantsHash(participant1, participant2);\\n        Channel storage channel = channels[channel_identifier];\\n\\n        require(channel.state == ChannelState.Closed);\\n\\n        // Settlement window must be over\\n        require(channel.settle_block_number < block.number);\\n\\n        Participant storage participant1_state = channel.participants[participant1];\\n        Participant storage participant2_state = channel.participants[participant2];\\n\\n        require(verifyBalanceHashData(\\n            participant1_state,\\n            participant1_settlement\\n        ));\\n\\n        require(verifyBalanceHashData(\\n            participant2_state,\\n            participant2_settlement\\n        ));\\n\\n        // We are calculating the final token amounts that need to be\\n        // transferred to the participants now and the amount of tokens that\\n        // need to remain locked in the contract. These tokens can be unlocked\\n        // by calling `unlock`.\\n        // participant1_transferred_amount = the amount of tokens that\\n        //   participant1 will receive in this transaction.\\n        // participant2_transferred_amount = the amount of tokens that\\n        //   participant2 will receive in this transaction.\\n        // participant1_locked_amount = the amount of tokens remaining in the\\n        //   contract, representing pending transfers from participant1 to participant2.\\n        // participant2_locked_amount = the amount of tokens remaining in the\\n        //   contract, representing pending transfers from participant2 to participant1.\\n        // We are reusing variables due to the local variables number limit.\\n        // For better readability this can be refactored further.\\n        (\\n            participant1_settlement.transferred_amount,\\n            participant2_settlement.transferred_amount,\\n            participant1_settlement.locked_amount,\\n            participant2_settlement.locked_amount\\n        ) = getSettleTransferAmounts(\\n            participant1_state,\\n            participant1_settlement.transferred_amount,\\n            participant1_settlement.locked_amount,\\n            participant2_state,\\n            participant2_settlement.transferred_amount,\\n            participant2_settlement.locked_amount\\n        );\\n\\n        // Remove the channel data from storage\\n        delete channel.participants[participant1];\\n        delete channel.participants[participant2];\\n        delete channels[channel_identifier];\\n\\n        // Remove the pair's channel counter\\n        delete participants_hash_to_channel_identifier[pair_hash];\\n\\n        // Store balance data needed for `unlock`, including the calculated\\n        // locked amounts remaining in the contract.\\n        storeUnlockData(\\n            channel_identifier,\\n            participant1_settlement,\\n            participant2\\n        );\\n        storeUnlockData(\\n            channel_identifier,\\n            participant2_settlement,\\n            participant1\\n        );\\n\\n        emit ChannelSettled(\\n            channel_identifier,\\n            participant1_settlement.transferred_amount,\\n            participant1_settlement.locksroot,\\n            participant2_settlement.transferred_amount,\\n            participant2_settlement.locksroot\\n        );\\n\\n        // Do the actual token transfers\\n        if (participant1_settlement.transferred_amount > 0) {\\n            require(token.transfer(participant1, participant1_settlement.transferred_amount));\\n        }\\n\\n        if (participant2_settlement.transferred_amount > 0) {\\n            require(token.transfer(participant2, participant2_settlement.transferred_amount));\\n        }\\n    }\\n\\n    /// @notice Unlocks all pending off-chain transfers from `sender` to\\n    /// `receiver` and sends the locked tokens corresponding to locks with\\n    /// secrets registered on-chain to the `receiver`. Locked tokens\\n    /// corresponding to locks where the secret was not revealed on-chain will\\n    /// return to the `sender`. Anyone can call unlock.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param receiver Address who will receive the claimable unlocked\\n    /// tokens\\n    /// @param sender Address who sent the pending transfers and will receive\\n    /// the unclaimable unlocked tokens\\n    /// @param locks All pending locks concatenated in order of creation\\n    /// that `sender` sent to `receiver`\\n    function unlock(\\n        uint256 channel_identifier,\\n        address receiver,\\n        address sender,\\n        bytes memory locks\\n    )\\n        public\\n    {\\n        // Channel represented by channel_identifier must be settled and\\n        // channel data deleted\\n        require(channel_identifier != getChannelIdentifier(receiver, sender));\\n\\n        // After the channel is settled the storage is cleared, therefore the\\n        // value will be NonExistent and not Settled. The value Settled is used\\n        // for the external APIs\\n        require(channels[channel_identifier].state == ChannelState.NonExistent);\\n\\n        bytes32 unlock_key;\\n        bytes32 computed_locksroot;\\n        uint256 unlocked_amount;\\n        uint256 locked_amount;\\n        uint256 returned_tokens;\\n\\n        // Calculate the locksroot for the pending transfers and the amount of\\n        // tokens corresponding to the locked transfers with secrets revealed\\n        // on chain.\\n        (computed_locksroot, unlocked_amount) = getHashAndUnlockedAmount(\\n            locks\\n        );\\n\\n        // The sender must have a non-empty locksroot on-chain that must be\\n        // the same as the computed locksroot.\\n        // Get the amount of tokens that have been left in the contract, to\\n        // account for the pending transfers `sender` -> `receiver`.\\n        unlock_key = getUnlockIdentifier(channel_identifier, sender, receiver);\\n        UnlockData storage unlock_data = unlock_identifier_to_unlock_data[unlock_key];\\n        locked_amount = unlock_data.locked_amount;\\n\\n        // Locksroot must be the same as the computed locksroot\\n        require(unlock_data.locksroot == computed_locksroot);\\n\\n        // There are no pending transfers if the locked_amount is 0.\\n        // Transaction must fail\\n        require(locked_amount > 0);\\n\\n        // Make sure we don't transfer more tokens than previously reserved in\\n        // the smart contract.\\n        unlocked_amount = TokenNetworkUtils.min(unlocked_amount, locked_amount);\\n\\n        // Transfer the rest of the tokens back to the sender\\n        returned_tokens = locked_amount - unlocked_amount;\\n\\n        // Remove sender's unlock data\\n        delete unlock_identifier_to_unlock_data[unlock_key];\\n\\n        emit ChannelUnlocked(\\n            channel_identifier,\\n            receiver,\\n            sender,\\n            computed_locksroot,\\n            unlocked_amount,\\n            returned_tokens\\n        );\\n\\n        // Transfer the unlocked tokens to the receiver. unlocked_amount can\\n        // be 0\\n        if (unlocked_amount > 0) {\\n            require(token.transfer(receiver, unlocked_amount));\\n        }\\n\\n        // Transfer the rest of the tokens back to the sender\\n        if (returned_tokens > 0) {\\n            require(token.transfer(sender, returned_tokens));\\n        }\\n\\n        // At this point, this should always be true\\n        assert(locked_amount >= returned_tokens);\\n        assert(locked_amount >= unlocked_amount);\\n    }\\n\\n    /* /// @notice Cooperatively settles the balances between the two channel\\n    /// participants and transfers the agreed upon token amounts to the\\n    /// participants. After this the channel lifecycle has ended and no more\\n    /// operations can be done on it.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant1_address Address of channel participant\\n    /// @param participant1_balance Amount of tokens that `participant1_address`\\n    /// must receive when the channel is settled and removed\\n    /// @param participant2_address Address of the other channel participant\\n    /// @param participant2_balance Amount of tokens that `participant2_address`\\n    /// must receive when the channel is settled and removed\\n    /// @param participant1_signature Signature of `participant1_address` on the\\n    /// cooperative settle message\\n    /// @param participant2_signature Signature of `participant2_address` on the\\n    /// cooperative settle message\\n    function cooperativeSettle(\\n        uint256 channel_identifier,\\n        address participant1_address,\\n        uint256 participant1_balance,\\n        address participant2_address,\\n        uint256 participant2_balance,\\n        bytes participant1_signature,\\n        bytes participant2_signature\\n    )\\n        public\\n    {\\n        require(channel_identifier == getChannelIdentifier(\\n            participant1_address,\\n            participant2_address\\n        ));\\n        bytes32 pair_hash;\\n        address participant1;\\n        address participant2;\\n        uint256 total_available_deposit;\\n\\n        pair_hash = getParticipantsHash(participant1_address, participant2_address);\\n        Channel storage channel = channels[channel_identifier];\\n\\n        require(channel.state == ChannelState.Opened);\\n\\n        participant1 = TokenNetworkUtils.recoverAddressFromCooperativeSettleSignature(\\n            channel_identifier,\\n            participant1_address,\\n            participant1_balance,\\n            participant2_address,\\n            participant2_balance,\\n            participant1_signature\\n        );\\n        // The provided address must be the same as the recovered one\\n        require(participant1 == participant1_address);\\n\\n        participant2 = TokenNetworkUtils.recoverAddressFromCooperativeSettleSignature(\\n            channel_identifier,\\n            participant1_address,\\n            participant1_balance,\\n            participant2_address,\\n            participant2_balance,\\n            participant2_signature\\n        );\\n        // The provided address must be the same as the recovered one\\n        require(participant2 == participant2_address);\\n\\n        Participant storage participant1_state = channel.participants[participant1];\\n        Participant storage participant2_state = channel.participants[participant2];\\n\\n        total_available_deposit = getChannelAvailableDeposit(\\n            participant1_state,\\n            participant2_state\\n        );\\n        // The sum of the provided balances must be equal to the total\\n        // available deposit\\n        require(total_available_deposit == (participant1_balance + participant2_balance));\\n        // Overflow check for the balances addition from the above check.\\n        // This overflow should never happen if the token.transfer function is implemented\\n        // correctly. We do not control the token implementation, therefore we add this\\n        // check for safety.\\n        require(participant1_balance <= participant1_balance + participant2_balance);\\n\\n        // Remove channel data from storage before doing the token transfers\\n        delete channel.participants[participant1];\\n        delete channel.participants[participant2];\\n        delete channels[channel_identifier];\\n\\n        // Remove the pair's channel counter\\n        delete participants_hash_to_channel_identifier[pair_hash];\\n\\n        emit ChannelSettled(channel_identifier, participant1_balance, participant2_balance);\\n\\n        // Do the token transfers\\n        if (participant1_balance > 0) {\\n            require(token.transfer(participant1, participant1_balance));\\n        }\\n\\n        if (participant2_balance > 0) {\\n            require(token.transfer(participant2, participant2_balance));\\n        }\\n    } */\\n\\n    /// @notice Returns the unique identifier for the channel given by the\\n    /// contract\\n    /// @param participant Address of a channel participant\\n    /// @param partner Address of the other channel participant\\n    /// @return Unique identifier for the channel. It can be 0 if channel does\\n    /// not exist\\n    function getChannelIdentifier(address participant, address partner)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(participant != address(0x0));\\n        require(partner != address(0x0));\\n        require(participant != partner);\\n\\n        bytes32 pair_hash = getParticipantsHash(participant, partner);\\n        return participants_hash_to_channel_identifier[pair_hash];\\n    }\\n\\n    /// @dev Returns the channel specific data.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant1 Address of a channel participant\\n    /// @param participant2 Address of the other channel participant\\n    /// @return Channel settle_block_number and state\\n    /// @notice The contract cannot really distinguish Settled and Removed\\n    /// states, especially when wrong participants are given as input.\\n    /// The contract does not remember the participants of the channel\\n    function getChannelInfo(\\n        uint256 channel_identifier,\\n        address participant1,\\n        address participant2\\n    )\\n        external\\n        view\\n        returns (uint256, ChannelState)\\n    {\\n        bytes32 unlock_key1;\\n        bytes32 unlock_key2;\\n\\n        Channel storage channel = channels[channel_identifier];\\n        ChannelState state = channel.state;  // This must **not** update the storage\\n\\n        if (state == ChannelState.NonExistent &&\\n            channel_identifier > 0 &&\\n            channel_identifier <= channel_counter\\n        ) {\\n            // The channel has been settled, channel data is removed Therefore,\\n            // the channel state in storage is actually `0`, or `NonExistent`\\n            // However, for this view function, we return `Settled`, in order\\n            // to provide a consistent external API\\n            state = ChannelState.Settled;\\n\\n            // We might still have data stored for future unlock operations\\n            // Only if we do not, we can consider the channel as `Removed`\\n            unlock_key1 = getUnlockIdentifier(channel_identifier, participant1, participant2);\\n            UnlockData storage unlock_data1 = unlock_identifier_to_unlock_data[unlock_key1];\\n\\n            unlock_key2 = getUnlockIdentifier(channel_identifier, participant2, participant1);\\n            UnlockData storage unlock_data2 = unlock_identifier_to_unlock_data[unlock_key2];\\n\\n            if (unlock_data1.locked_amount == 0 && unlock_data2.locked_amount == 0) {\\n                state = ChannelState.Removed;\\n            }\\n        }\\n\\n        return (\\n            channel.settle_block_number,\\n            state\\n        );\\n    }\\n\\n    /// @dev Returns the channel specific data.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant Address of the channel participant whose data will be\\n    /// returned\\n    /// @param partner Address of the channel partner\\n    /// @return Participant's deposit, withdrawn_amount, whether the participant\\n    /// has called `closeChannel` or not, balance_hash, nonce, locksroot,\\n    /// locked_amount\\n    function getChannelParticipantInfo(\\n            uint256 channel_identifier,\\n            address participant,\\n            address partner\\n    )\\n        external\\n        view\\n        returns (uint256, uint256, bool, bytes32, uint256, bytes32, uint256)\\n    {\\n        bytes32 unlock_key;\\n\\n        Participant storage participant_state = channels[channel_identifier].participants[\\n            participant\\n        ];\\n        unlock_key = getUnlockIdentifier(channel_identifier, participant, partner);\\n        UnlockData storage unlock_data = unlock_identifier_to_unlock_data[unlock_key];\\n\\n        return (\\n            participant_state.deposit,\\n            participant_state.withdrawn_amount,\\n            participant_state.is_the_closer,\\n            participant_state.balance_hash,\\n            participant_state.nonce,\\n            unlock_data.locksroot,\\n            unlock_data.locked_amount\\n        );\\n    }\\n\\n    /// @dev Get the hash of the participant addresses, ordered\\n    /// lexicographically\\n    /// @param participant Address of a channel participant\\n    /// @param partner Address of the other channel participant\\n    function getParticipantsHash(address participant, address partner)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        require(participant != address(0x0));\\n        require(partner != address(0x0));\\n        require(participant != partner);\\n\\n        if (participant < partner) {\\n            return keccak256(abi.encodePacked(participant, partner));\\n        } else {\\n            return keccak256(abi.encodePacked(partner, participant));\\n        }\\n    }\\n\\n    /// @dev Get the hash of the channel identifier and the participant\\n    /// addresses (whose ordering matters). The hash might be useful for\\n    /// the receiver to look up the appropriate UnlockData to claim\\n    /// @param channel_identifier Identifier for the channel which the\\n    /// UnlockData is about\\n    /// @param sender Sender of the pending transfers that the UnlockData\\n    /// represents\\n    /// @param receiver Receiver of the pending transfers that the UnlockData\\n    /// represents\\n    function getUnlockIdentifier(\\n        uint256 channel_identifier,\\n        address sender,\\n        address receiver\\n    )\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        require(sender != receiver);\\n        return keccak256(abi.encodePacked(channel_identifier, sender, receiver));\\n    }\\n\\n    function updateBalanceProofData(\\n        Channel storage channel,\\n        address participant,\\n        uint256 nonce,\\n        bytes32 balance_hash\\n    )\\n        internal\\n    {\\n        Participant storage participant_state = channel.participants[participant];\\n\\n        // Multiple calls to updateNonClosingBalanceProof can be made and we\\n        // need to store the last known balance proof data.\\n        // This line prevents Monitoring Services from getting rewards\\n        // again and again using the same reward proof.\\n        require(nonce > participant_state.nonce);\\n\\n        participant_state.nonce = nonce;\\n        participant_state.balance_hash = balance_hash;\\n    }\\n\\n    function storeUnlockData(\\n        uint256 channel_identifier,\\n        SettleInput memory settle_input,\\n        address receiver\\n    )\\n        internal\\n    {\\n        // If there are transfers to unlock, store the locksroot and total\\n        // amount of tokens\\n        if (settle_input.locked_amount == 0) {\\n            return;\\n        }\\n\\n        bytes32 key = getUnlockIdentifier(channel_identifier, settle_input.participant, receiver);\\n        UnlockData storage unlock_data = unlock_identifier_to_unlock_data[key];\\n        unlock_data.locksroot = settle_input.locksroot;\\n        unlock_data.locked_amount = settle_input.locked_amount;\\n    }\\n\\n    function getChannelAvailableDeposit(\\n        Participant storage participant1_state,\\n        Participant storage participant2_state\\n    )\\n        internal\\n        view\\n        returns (uint256 total_available_deposit)\\n    {\\n        total_available_deposit = (\\n            participant1_state.deposit +\\n            participant2_state.deposit -\\n            participant1_state.withdrawn_amount -\\n            participant2_state.withdrawn_amount\\n        );\\n    }\\n\\n    /// @dev Function that calculates the amount of tokens that the participants\\n    /// will receive when calling settleChannel.\\n    /// Check https://github.com/raiden-network/raiden-contracts/issues/188 for the settlement\\n    /// algorithm analysis and explanations.\\n    function getSettleTransferAmounts(\\n        Participant storage participant1_state,\\n        uint256 participant1_transferred_amount,\\n        uint256 participant1_locked_amount,\\n        Participant storage participant2_state,\\n        uint256 participant2_transferred_amount,\\n        uint256 participant2_locked_amount\\n    )\\n        private\\n        view\\n        returns (uint256, uint256, uint256, uint256)\\n    {\\n        // The scope of this function is to compute the settlement amounts that\\n        // the two channel participants will receive when calling settleChannel\\n        // and the locked amounts that remain in the contract, to account for\\n        // the pending, not finalized transfers, that will be received by the\\n        // participants when calling `unlock`.\\n\\n        // The amount of tokens that participant1 MUST receive at the end of\\n        // the channel lifecycle (after settleChannel and unlock) is:\\n        // B1 = D1 - W1 + T2 - T1 + Lc2 - Lc1\\n\\n        // The amount of tokens that participant2 MUST receive at the end of\\n        // the channel lifecycle (after settleChannel and unlock) is:\\n        // B2 = D2 - W2 + T1 - T2 + Lc1 - Lc2\\n\\n        // B1 + B2 = TAD = D1 + D2 - W1 - W2\\n        // TAD = total available deposit at settlement time\\n\\n        // L1 = Lc1 + Lu1\\n        // L2 = Lc2 + Lu2\\n\\n        // where:\\n        // B1 = final balance of participant1 after the channel is removed\\n        // D1 = total amount deposited by participant1 into the channel\\n        // W1 = total amount withdrawn by participant1 from the channel\\n        // T2 = total amount transferred by participant2 to participant1 (finalized transfers)\\n        // T1 = total amount transferred by participant1 to participant2 (finalized transfers)\\n        // L1 = total amount of tokens locked in pending transfers, sent by\\n        //   participant1 to participant2\\n        // L2 = total amount of tokens locked in pending transfers, sent by\\n        //   participant2 to participant1\\n        // Lc2 = the amount that can be claimed by participant1 from the pending\\n        //   transfers (that have not been finalized off-chain), sent by\\n        //   participant2 to participant1. These are part of the locked amount\\n        //   value from participant2's balance proof. They are considered claimed\\n        //   if the secret corresponding to these locked transfers was registered\\n        //   on-chain, in the SecretRegistry contract, before the lock's expiration.\\n        // Lu1 = unclaimable locked amount from L1\\n        // Lc1 = the amount that can be claimed by participant2 from the pending\\n        //   transfers (that have not been finalized off-chain),\\n        //   sent by participant1 to participant2\\n        // Lu2 = unclaimable locked amount from L2\\n\\n        // Notes:\\n        // 1) The unclaimble tokens from a locked amount will return to the sender.\\n        // At the time of calling settleChannel, the TokenNetwork contract does\\n        // not know what locked amounts are claimable or unclaimable.\\n        // 2) There are some Solidity constraints that make the calculations\\n        // more difficult: attention to overflows and underflows, that MUST be\\n        // handled without throwing.\\n\\n        // Cases that require attention:\\n        // case1. If participant1 does NOT provide a balance proof or provides\\n        // an old balance proof.  participant2_transferred_amount can be [0,\\n        // real_participant2_transferred_amount) We MUST NOT punish\\n        // participant2.\\n        // case2. If participant2 does NOT provide a balance proof or provides\\n        // an old balance proof.  participant1_transferred_amount can be [0,\\n        // real_participant1_transferred_amount) We MUST NOT punish\\n        // participant1.\\n        // case3. If neither participants provide a balance proof, we just\\n        // subtract their withdrawn amounts from their deposits.\\n\\n        // This is why, the algorithm implemented in Solidity is:\\n        // (explained at each step, below)\\n        // RmaxP1 = (T2 + L2) - (T1 + L1) + D1 - W1\\n        // RmaxP1 = min(TAD, RmaxP1)\\n        // RmaxP2 = TAD - RmaxP1\\n        // SL2 = min(RmaxP1, L2)\\n        // S1 = RmaxP1 - SL2\\n        // SL1 = min(RmaxP2, L1)\\n        // S2 = RmaxP2 - SL1\\n\\n        // where:\\n        // RmaxP1 = due to possible over/underflows that only appear when using\\n        //    old balance proofs & the fact that settlement balance calculation\\n        //    is symmetric (we can calculate either RmaxP1 and RmaxP2 first,\\n        //    order does not affect result), this is a convention used to determine\\n        //    the maximum receivable amount of participant1 at settlement time\\n        // S1 = amount received by participant1 when calling settleChannel\\n        // SL1 = the maximum amount from L1 that can be locked in the\\n        //   TokenNetwork contract when calling settleChannel (due to overflows\\n        //   that only happen when using old balance proofs)\\n        // S2 = amount received by participant2 when calling settleChannel\\n        // SL2 = the maximum amount from L2 that can be locked in the\\n        //   TokenNetwork contract when calling settleChannel (due to overflows\\n        //   that only happen when using old balance proofs)\\n\\n        uint256 participant1_amount;\\n        uint256 participant2_amount;\\n        uint256 total_available_deposit;\\n\\n        SettlementData memory participant1_settlement;\\n        SettlementData memory participant2_settlement;\\n\\n        participant1_settlement.deposit = participant1_state.deposit;\\n        participant1_settlement.withdrawn = participant1_state.withdrawn_amount;\\n        participant1_settlement.transferred = participant1_transferred_amount;\\n        participant1_settlement.locked = participant1_locked_amount;\\n\\n        participant2_settlement.deposit = participant2_state.deposit;\\n        participant2_settlement.withdrawn = participant2_state.withdrawn_amount;\\n        participant2_settlement.transferred = participant2_transferred_amount;\\n        participant2_settlement.locked = participant2_locked_amount;\\n\\n        // TAD = D1 + D2 - W1 - W2 = total available deposit at settlement time\\n        total_available_deposit = getChannelAvailableDeposit(\\n            participant1_state,\\n            participant2_state\\n        );\\n\\n        // RmaxP1 = (T2 + L2) - (T1 + L1) + D1 - W1\\n        // This amount is the maximum possible amount that participant1 can\\n        // receive at settlement time and also contains the entire locked amount\\n        //  of the pending transfers from participant2 to participant1.\\n        participant1_amount = getMaxPossibleReceivableAmount(\\n            participant1_settlement,\\n            participant2_settlement\\n        );\\n\\n        // RmaxP1 = min(TAD, RmaxP1)\\n        // We need to bound this to the available channel deposit in order to\\n        // not send tokens from other channels. The only case where TAD is\\n        // smaller than RmaxP1 is when at least one balance proof is old.\\n        participant1_amount = TokenNetworkUtils.min(participant1_amount, total_available_deposit);\\n\\n        // RmaxP2 = TAD - RmaxP1\\n        // Now it is safe to subtract without underflow\\n        participant2_amount = total_available_deposit - participant1_amount;\\n\\n        // SL2 = min(RmaxP1, L2)\\n        // S1 = RmaxP1 - SL2\\n        // Both operations are done by failsafe_subtract\\n        // We take out participant2's pending transfers locked amount, bounding\\n        // it by the maximum receivable amount of participant1\\n        (participant1_amount, participant2_locked_amount) = TokenNetworkUtils.failsafe_subtract(\\n            participant1_amount,\\n            participant2_locked_amount\\n        );\\n\\n        // SL1 = min(RmaxP2, L1)\\n        // S2 = RmaxP2 - SL1\\n        // Both operations are done by failsafe_subtract\\n        // We take out participant1's pending transfers locked amount, bounding\\n        // it by the maximum receivable amount of participant2\\n        (participant2_amount, participant1_locked_amount) = TokenNetworkUtils.failsafe_subtract(\\n            participant2_amount,\\n            participant1_locked_amount\\n        );\\n\\n        // This should never throw:\\n        // S1 and S2 MUST be smaller than TAD\\n        assert(participant1_amount <= total_available_deposit);\\n        assert(participant2_amount <= total_available_deposit);\\n        // S1 + S2 + SL1 + SL2 == TAD\\n        assert(total_available_deposit == (\\n            participant1_amount +\\n            participant2_amount +\\n            participant1_locked_amount +\\n            participant2_locked_amount\\n        ));\\n\\n        return (\\n            participant1_amount,\\n            participant2_amount,\\n            participant1_locked_amount,\\n            participant2_locked_amount\\n        );\\n    }\\n\\n    function getMaxPossibleReceivableAmount(\\n        SettlementData memory participant1_settlement,\\n        SettlementData memory participant2_settlement\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return TokenNetworkUtils.getMaxPossibleReceivableAmount(\\n            participant1_settlement.deposit,\\n            participant1_settlement.withdrawn,\\n            participant1_settlement.transferred,\\n            participant1_settlement.locked,\\n            participant2_settlement.deposit,\\n            participant2_settlement.withdrawn,\\n            participant2_settlement.transferred,\\n            participant2_settlement.locked\\n        );\\n    }\\n\\n    function verifyBalanceHashData(\\n        Participant storage participant,\\n        SettleInput memory settle_input\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // When no balance proof has been provided, we need to check this\\n        // separately because hashing values of 0 outputs a value != 0\\n        if (participant.balance_hash == 0 &&\\n            settle_input.transferred_amount == 0 &&\\n            settle_input.locked_amount == 0\\n            /* locksroot is ignored. */\\n        ) {\\n            return true;\\n        }\\n\\n        // Make sure the hash of the provided state is the same as the stored\\n        // balance_hash\\n        return participant.balance_hash == keccak256(abi.encodePacked(\\n            settle_input.transferred_amount,\\n            settle_input.locked_amount,\\n            settle_input.locksroot\\n        ));\\n    }\\n\\n    /// @dev Calculates the hash of the pending transfers data and\\n    /// calculates the amount of tokens that can be unlocked because the secret\\n    /// was registered on-chain.\\n    function getHashAndUnlockedAmount(bytes memory locks)\\n        internal\\n        view\\n        returns (bytes32, uint256)\\n    {\\n        uint256 length = locks.length;\\n\\n        // each lock has this form:\\n        // (locked_amount || expiration_block || secrethash) = 3 * 32 bytes\\n        require(length % 96 == 0);\\n\\n        uint256 i;\\n        uint256 total_unlocked_amount;\\n        uint256 unlocked_amount;\\n        bytes32 total_hash;\\n\\n        for (i = 32; i < length; i += 96) {\\n            unlocked_amount = getLockedAmountFromLock(locks, i);\\n            total_unlocked_amount += unlocked_amount;\\n        }\\n\\n        total_hash = keccak256(locks);\\n\\n        return (total_hash, total_unlocked_amount);\\n    }\\n\\n    function getLockedAmountFromLock(bytes memory locks, uint256 offset)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 expiration_block;\\n        uint256 locked_amount;\\n        uint256 reveal_block;\\n        bytes32 secrethash;\\n\\n        if (locks.length <= offset) {\\n            return 0;\\n        }\\n\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            expiration_block := mload(add(locks, offset))\\n            locked_amount := mload(add(locks, add(offset, 32)))\\n            secrethash := mload(add(locks, add(offset, 64)))\\n        }\\n\\n        // Check if the lock's secret was revealed in the SecretRegistry The\\n        // secret must have been revealed in the SecretRegistry contract before\\n        // the lock's expiration_block in order for the hash time lock transfer\\n        // to be successful.\\n        reveal_block = secret_registry.getSecretRevealBlockHeight(secrethash);\\n        if (reveal_block == 0 || expiration_block <= reveal_block) {\\n            locked_amount = 0;\\n        }\\n\\n        return locked_amount;\\n    }\\n}\\n\",\"keccak256\":\"0xef9c79f097264092c65b322d121b8ffc6aeb2d7302d47c438fe1fc4bc53f1ad5\",\"license\":\"MIT\"},\"data/source/raiden/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @title Utils\\n/// @notice Utils contract for various helpers used by the Raiden Network smart\\n/// contracts.\\ncontract Utils {\\n    /// @notice Check if a contract exists\\n    /// @param contract_address The address to check whether a contract is\\n    /// deployed or not\\n    /// @return True if a contract exists, false otherwise\\n    function contractExists(address contract_address) public view returns (bool) {\\n        uint size;\\n\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            size := extcodesize(contract_address)\\n        }\\n\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x3fb4df9cdadd3711bffff81a451868c7a1ee8a2f3ff1a20a4343def15cb38e0f\",\"license\":\"MIT\"}},\"version\":1}"
        },
        "TokenNetworkRegistry": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_secret_registry_address",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_chain_id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_settlement_timeout_min",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_settlement_timeout_max",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_max_token_networks",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "token_address",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "token_network_address",
                  "type": "address"
                }
              ],
              "name": "TokenNetworkCreated",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "chain_id",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "contract_address",
                  "type": "address"
                }
              ],
              "name": "contractExists",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_token_address",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_channel_participant_deposit_limit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_token_network_deposit_limit",
                  "type": "uint256"
                }
              ],
              "name": "createERC20TokenNetwork",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "token_network_address",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "deprecation_executor",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "max_token_networks",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "secret_registry_address",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "settlement_timeout_max",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "settlement_timeout_min",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "token_network_created",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "token_to_token_networks",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "bin": "",
          "bin-runtime": "",
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_secret_registry_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settlement_timeout_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settlement_timeout_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max_token_networks\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token_network_address\",\"type\":\"address\"}],\"name\":\"TokenNetworkCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chain_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_channel_participant_deposit_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token_network_deposit_limit\",\"type\":\"uint256\"}],\"name\":\"createERC20TokenNetwork\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token_network_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecation_executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_token_networks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secret_registry_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlement_timeout_max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlement_timeout_min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_network_created\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"token_to_token_networks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_chain_id\":\"EIP-155 Chain-ID of the chain where this contract is deployed\",\"_max_token_networks\":\"the number of tokens that can be registered MAX_UINT256 means no limits\",\"_secret_registry_address\":\"The address of SecretRegistry that's used by all TokenNetworks created by this contract\",\"_settlement_timeout_max\":\"The longest settlement period (in number of blocks) that can be chosen at the channel opening\",\"_settlement_timeout_min\":\"The shortest settlement period (in number of blocks) that can be chosen at the channel opening\"}},\"contractExists(address)\":{\"params\":{\"contract_address\":\"The address to check whether a contract is deployed or not\"},\"returns\":{\"_0\":\"True if a contract exists, false otherwise\"}},\"createERC20TokenNetwork(address,uint256,uint256)\":{\"params\":{\"_token_address\":\"Ethereum address of an already deployed token, to be used in the new TokenNetwork contract\"}}},\"title\":\"TokenNetworkRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contractExists(address)\":{\"notice\":\"Check if a contract exists\"},\"createERC20TokenNetwork(address,uint256,uint256)\":{\"notice\":\"Deploy a new TokenNetwork contract for the Token deployed at `_token_address`\"}},\"notice\":\"The TokenNetwork Registry deploys new TokenNetwork contracts for the Raiden Network protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/raiden/TokenNetworkRegistry.sol\":\"TokenNetworkRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/lib/ECVerify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nlibrary ECVerify {\\n\\n    function ecverify(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address signature_address)\\n    {\\n        require(signature.length == 65);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // The signature format is a compact form of:\\n        //   {bytes32 r}{bytes32 s}{uint8 v}\\n        // Compact means, uint8 is not padded to 32 bytes.\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n\\n            // Here we are loading the last 32 bytes, including 31 bytes following the signature.\\n            v := byte(0, mload(add(signature, 96)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        require(v == 27 || v == 28);\\n\\n        signature_address = ecrecover(hash, v, r, s);\\n\\n        // ecrecover returns zero on error\\n        require(signature_address != address(0x0));\\n\\n        return signature_address;\\n    }\\n}\\n\",\"keccak256\":\"0xeced41e7578af77042e00fc68e482b754cd355da872bfdda95a0b74e3dbd90e0\",\"license\":\"MIT\"},\"data/source/lib/MessageType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nlibrary MessageType {\\n\\n    enum MessageTypeId {\\n        None,\\n        BalanceProof,\\n        BalanceProofUpdate,\\n        Withdraw,\\n        CooperativeSettle,\\n        IOU,\\n        MSReward\\n    }\\n}\\n\",\"keccak256\":\"0xe4a3d54220ba19024c03fac9f8b3338245f2c4aa266627e6cdb5e97a2adcdee4\",\"license\":\"MIT\"},\"data/source/lib/TokenNetworkUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable indentation */\\npragma solidity 0.7.6;\\n\\nimport \\\"./ECVerify.sol\\\";\\nimport \\\"./MessageType.sol\\\";\\n\\nlibrary TokenNetworkUtils {\\n    string internal constant signature_prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n\\\";\\n\\n    function getMaxPossibleReceivableAmount(\\n        uint256 participant1_deposit,\\n        uint256 participant1_withdrawn,\\n        uint256 participant1_transferred,\\n        uint256 participant1_locked,\\n        uint256 participant2_deposit,\\n        uint256 participant2_withdrawn,\\n        uint256 participant2_transferred,\\n        uint256 participant2_locked\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 participant1_max_transferred;\\n        uint256 participant2_max_transferred;\\n        uint256 participant1_net_max_received;\\n        uint256 participant1_max_amount;\\n\\n        // This is the maximum possible amount that participant1 could transfer\\n        // to participant2, if all the pending lock secrets have been\\n        // registered\\n        participant1_max_transferred = failsafe_addition(\\n            participant1_transferred,\\n            participant1_locked\\n        );\\n\\n        // This is the maximum possible amount that participant2 could transfer\\n        // to participant1, if all the pending lock secrets have been\\n        // registered\\n        participant2_max_transferred = failsafe_addition(\\n            participant2_transferred,\\n            participant2_locked\\n        );\\n\\n        // We enforce this check artificially, in order to get rid of hard\\n        // to deal with over/underflows. Settlement balance calculation is\\n        // symmetric (we can calculate either RmaxP1 and RmaxP2 first, order does\\n        // not affect result). This means settleChannel must be called with\\n        // ordered values.\\n        require(participant2_max_transferred >= participant1_max_transferred, \\\"TNU: transfers not ordered\\\");\\n\\n        assert(participant1_max_transferred >= participant1_transferred);\\n        assert(participant2_max_transferred >= participant2_transferred);\\n\\n        // This is the maximum amount that participant1 can receive at settlement time\\n        participant1_net_max_received = (\\n            participant2_max_transferred -\\n            participant1_max_transferred\\n        );\\n\\n        // Next, we add the participant1's deposit and subtract the already\\n        // withdrawn amount\\n        participant1_max_amount = failsafe_addition(\\n            participant1_net_max_received,\\n            participant1_deposit\\n        );\\n\\n        // Subtract already withdrawn amount\\n        (participant1_max_amount, ) = failsafe_subtract(\\n            participant1_max_amount,\\n            participant1_withdrawn\\n        );\\n        return participant1_max_amount;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        return a > b ? b : a;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        return a > b ? a : b;\\n    }\\n\\n    /// @dev Special subtraction function that does not fail when underflowing.\\n    /// @param a Minuend\\n    /// @param b Subtrahend\\n    /// @return Minimum between the result of the subtraction and 0, the maximum\\n    /// subtrahend for which no underflow occurs\\n    function failsafe_subtract(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        return a > b ? (a - b, b) : (0, a);\\n    }\\n\\n    /// @dev Special addition function that does not fail when overflowing.\\n    /// @param a Addend\\n    /// @param b Addend\\n    /// @return Maximum between the result of the addition or the maximum\\n    /// uint256 value\\n    function failsafe_addition(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 MAX_SAFE_UINT256 = (\\n            115792089237316195423570985008687907853269984665640564039457584007913129639935\\n        );\\n        uint256 sum = a + b;\\n        return sum >= a ? sum : MAX_SAFE_UINT256;\\n    }\\n\\n    function recoverAddressFromBalanceProof(\\n        uint256 chain_id,\\n        uint256 channel_identifier,\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes memory signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 32 + 32 + 32\\n        string memory message_length = \\\"212\\\";\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(MessageType.MessageTypeId.BalanceProof),\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, signature);\\n    }\\n\\n    function recoverAddressFromBalanceProofCounterSignature(\\n        MessageType.MessageTypeId message_type_id,\\n        uint256 chain_id,\\n        uint256 channel_identifier,\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes memory closing_signature,\\n        bytes memory non_closing_signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 32 + 32 + 32 + 65\\n        string memory message_length = \\\"277\\\";\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(message_type_id),\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            closing_signature\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, non_closing_signature);\\n    }\\n\\n    /* function recoverAddressFromCooperativeSettleSignature(\\n        uint256 channel_identifier,\\n        address participant1,\\n        uint256 participant1_balance,\\n        address participant2,\\n        uint256 participant2_balance,\\n        bytes signature\\n    )\\n        view\\n        internal\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 20 + 32 + 20 + 32\\n        string memory message_length = '220';\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(MessageTypeId.CooperativeSettle),\\n            channel_identifier,\\n            participant1,\\n            participant1_balance,\\n            participant2,\\n            participant2_balance\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, signature);\\n    } */\\n\\n    function recoverAddressFromWithdrawMessage(\\n        uint256 chain_id,\\n        uint256 channel_identifier,\\n        address participant,\\n        uint256 total_withdraw,\\n        uint256 expiration_block,\\n        bytes memory signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 20 + 32 + 32\\n        string memory message_length = \\\"200\\\";\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(MessageType.MessageTypeId.Withdraw),\\n            channel_identifier,\\n            participant,\\n            total_withdraw,\\n            expiration_block\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, signature);\\n    }\\n}\\n\",\"keccak256\":\"0x115640f1f605878e1d55e5e5e3c3e0f24e55eb435d8e618405d4bf2f14a99f59\",\"license\":\"MIT\"},\"data/source/raiden/SecretRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @title SecretRegistry\\n/// @notice SecretRegistry contract for registering secrets from Raiden Network\\n/// clients.\\ncontract SecretRegistry {\\n    // sha256(secret) => block number at which the secret was revealed\\n    mapping(bytes32 => uint256) private secrethash_to_block;\\n\\n    event SecretRevealed(bytes32 indexed secrethash, bytes32 secret);\\n\\n    /// @notice Registers a hash time lock secret and saves the block number.\\n    /// This allows the lock to be unlocked after the expiration block\\n    /// @param secret The secret used to lock the hash time lock\\n    /// @return true if secret was registered, false if the secret was already\\n    /// registered\\n    function registerSecret(bytes32 secret) public returns (bool) {\\n        bytes32 secrethash = sha256(abi.encodePacked(secret));\\n        if (secrethash_to_block[secrethash] > 0) {\\n            return false;\\n        }\\n        secrethash_to_block[secrethash] = block.number;\\n        emit SecretRevealed(secrethash, secret);\\n        return true;\\n    }\\n\\n    /// @notice Registers multiple hash time lock secrets and saves the block\\n    /// number\\n    /// @param secrets The array of secrets to be registered\\n    /// @return true if all secrets could be registered, false otherwise\\n    function registerSecretBatch(bytes32[] memory secrets) public returns (bool) {\\n        bool completeSuccess = true;\\n        for(uint i = 0; i < secrets.length; i++) {\\n            if(!registerSecret(secrets[i])) {\\n                completeSuccess = false;\\n            }\\n        }\\n        return completeSuccess;\\n    }\\n\\n    /// @notice Get the stored block number at which the secret was revealed\\n    /// @param secrethash The hash of the registered secret `keccak256(secret)`\\n    /// @return The block number at which the secret was revealed\\n    function getSecretRevealBlockHeight(bytes32 secrethash) public view returns (uint256) {\\n        return secrethash_to_block[secrethash];\\n    }\\n}\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\",\"keccak256\":\"0x828dbf9a344f66cb982df97f677d10942d1b163287b890860be40230b236642e\",\"license\":\"MIT\"},\"data/source/raiden/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface Token {\\n\\n    /// @return supply total amount of tokens\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return balance The balance\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return success Whether the approval was successful or not\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return remaining Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    // Optionally implemented function to show the number of decimals for the token\\n    function decimals() external view returns (uint8 decimals);\\n}\\n\",\"keccak256\":\"0x5a8ccb9fa426228d9e213164f22a94b0ac57f1aa15ab76ce88a96177edd7b0b3\",\"license\":\"MIT\"},\"data/source/raiden/TokenNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\n/* solium-disable indentation */\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../lib/ECVerify.sol\\\";\\nimport \\\"../lib/MessageType.sol\\\";\\nimport \\\"../lib/TokenNetworkUtils.sol\\\";\\nimport \\\"./Token.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"./SecretRegistry.sol\\\";\\n\\n/// @title TokenNetwork\\n/// @notice Stores and manages all the Raiden Network channels that use the\\n/// token specified in this TokenNetwork contract.\\ncontract TokenNetwork is Utils {\\n    // Instance of the token used by the channels\\n    Token public token;\\n\\n    // Instance of SecretRegistry used for storing secrets revealed in a\\n    // mediating transfer.\\n    SecretRegistry public secret_registry;\\n\\n    // Chain ID as specified by EIP155 used in balance proof signatures to\\n    // avoid replay attacks\\n    uint256 public chain_id;\\n\\n    uint256 public settlement_timeout_min;\\n    uint256 public settlement_timeout_max;\\n\\n    uint256 constant public MAX_SAFE_UINT256 = (\\n        115792089237316195423570985008687907853269984665640564039457584007913129639935\\n    );\\n\\n    // The deposit limit per channel per participant.\\n    uint256 public channel_participant_deposit_limit;\\n    // The total combined deposit of all channels across the whole network\\n    uint256 public token_network_deposit_limit;\\n\\n    // Global, monotonically increasing counter that keeps track of all the\\n    // opened channels in this contract\\n    uint256 public channel_counter;\\n\\n    // Only for the limited Red Eyes release\\n    address public deprecation_executor;\\n    bool public safety_deprecation_switch = false;\\n\\n    // channel_identifier => Channel\\n    // channel identifier is the channel_counter value at the time of opening\\n    // the channel\\n    mapping (uint256 => Channel) public channels;\\n\\n    // This is needed to enforce one channel per pair of participants\\n    // The key is keccak256(participant1_address, participant2_address)\\n    mapping (bytes32 => uint256) public participants_hash_to_channel_identifier;\\n\\n    // We keep the unlock data in a separate mapping to allow channel data\\n    // structures to be removed when settling uncooperatively. If there are\\n    // locked pending transfers, we need to store data needed to unlock them at\\n    // a later time.\\n    // The key is `keccak256(uint256 channel_identifier, address participant,\\n    // address partner)` Where `participant` is the participant that sent the\\n    // pending transfers We need `partner` for knowing where to send the\\n    // claimable tokens\\n    mapping(bytes32 => UnlockData) private unlock_identifier_to_unlock_data;\\n\\n    struct Participant {\\n        // Total amount of tokens transferred to this smart contract through\\n        // the `setTotalDeposit` function, for a specific channel, in the\\n        // participant's benefit.\\n        // This is a strictly monotonic value. Note that direct token transfer\\n        // into the contract cannot be tracked and will be stuck.\\n        uint256 deposit;\\n\\n        // Total amount of tokens withdrawn by the participant during the\\n        // lifecycle of this channel.\\n        // This is a strictly monotonic value.\\n        uint256 withdrawn_amount;\\n\\n        // This is a value set to true after the channel has been closed, only\\n        // if this is the participant who closed the channel.\\n        bool is_the_closer;\\n\\n        // keccak256 of the balance data provided after a closeChannel or an\\n        // updateNonClosingBalanceProof call\\n        bytes32 balance_hash;\\n\\n        // Monotonically increasing counter of the off-chain transfers,\\n        // provided along with the balance_hash\\n        uint256 nonce;\\n    }\\n\\n    enum ChannelState {\\n        NonExistent, // 0\\n        Opened,      // 1\\n        Closed,      // 2\\n        Settled,     // 3; Note: The channel has at least one pending unlock\\n        Removed      // 4; Note: Channel data is removed, there are no pending unlocks\\n    }\\n\\n    struct Channel {\\n        // After opening the channel this value represents the settlement\\n        // window. This is the number of blocks that need to be mined between\\n        // closing the channel uncooperatively and settling the channel.\\n        // After the channel has been uncooperatively closed, this value\\n        // represents the block number after which settleChannel can be called.\\n        uint256 settle_block_number;\\n\\n        ChannelState state;\\n\\n        mapping(address => Participant) participants;\\n    }\\n\\n    struct SettlementData {\\n        uint256 deposit;\\n        uint256 withdrawn;\\n        uint256 transferred;\\n        uint256 locked;\\n    }\\n\\n    struct UnlockData {\\n        // keccak256 hash of the pending locks from the Raiden client\\n        bytes32 locksroot;\\n        // Total amount of tokens locked in the pending locks corresponding\\n        // to the `locksroot`\\n        uint256 locked_amount;\\n    }\\n\\n    struct SettleInput {\\n        address participant;\\n        uint256 transferred_amount;\\n        uint256 locked_amount;\\n        bytes32 locksroot;\\n    }\\n\\n    event ChannelOpened(\\n        uint256 indexed channel_identifier,\\n        address indexed participant1,\\n        address indexed participant2,\\n        uint256 settle_timeout\\n    );\\n\\n    event ChannelNewDeposit(\\n        uint256 indexed channel_identifier,\\n        address indexed participant,\\n        uint256 total_deposit\\n    );\\n\\n    // Fires when the deprecation_switch's value changes\\n    event DeprecationSwitch(bool new_value);\\n\\n    // total_withdraw is how much the participant has withdrawn during the\\n    // lifetime of the channel. The actual amount which the participant withdrew\\n    // is `total_withdraw - total_withdraw_from_previous_event_or_zero`\\n    event ChannelWithdraw(\\n        uint256 indexed channel_identifier,\\n        address indexed participant,\\n        uint256 total_withdraw\\n    );\\n\\n    event ChannelClosed(\\n        uint256 indexed channel_identifier,\\n        address indexed closing_participant,\\n        uint256 indexed nonce,\\n        bytes32 balance_hash\\n    );\\n\\n    event ChannelUnlocked(\\n        uint256 indexed channel_identifier,\\n        address indexed receiver,\\n        address indexed sender,\\n        bytes32 locksroot,\\n        uint256 unlocked_amount,\\n        uint256 returned_tokens\\n    );\\n\\n    event NonClosingBalanceProofUpdated(\\n        uint256 indexed channel_identifier,\\n        address indexed closing_participant,\\n        uint256 indexed nonce,\\n        bytes32 balance_hash\\n    );\\n\\n    event ChannelSettled(\\n        uint256 indexed channel_identifier,\\n        uint256 participant1_amount,\\n        bytes32 participant1_locksroot,\\n        uint256 participant2_amount,\\n        bytes32 participant2_locksroot\\n    );\\n\\n    modifier onlyDeprecationExecutor() {\\n        require(msg.sender == deprecation_executor);\\n        _;\\n    }\\n\\n    modifier isSafe() {\\n        require(safety_deprecation_switch == false);\\n        _;\\n    }\\n\\n    modifier isOpen(uint256 channel_identifier) {\\n        require(channels[channel_identifier].state == ChannelState.Opened);\\n        _;\\n    }\\n\\n    modifier settleTimeoutValid(uint256 timeout) {\\n        require(timeout >= settlement_timeout_min);\\n        require(timeout <= settlement_timeout_max);\\n        _;\\n    }\\n\\n    /// @param _token_address The address of the ERC20 token contract\\n    /// @param _secret_registry The address of SecretRegistry contract that witnesses the onchain secret reveals\\n    /// @param _chain_id EIP-155 Chain ID of the blockchain where this instance is being deployed\\n    /// @param _settlement_timeout_min The shortest settlement period (in number of blocks)\\n    /// that can be chosen at the channel opening\\n    /// @param _settlement_timeout_max The longest settlement period (in number of blocks)\\n    /// that can be chosen at the channel opening\\n    /// @param _deprecation_executor The Ethereum address that can disable new deposits and channel creation\\n    /// @param _channel_participant_deposit_limit The maximum amount of tokens that can be deposited by each\\n    /// participant of each channel. MAX_SAFE_UINT256 means no limits\\n    /// @param _token_network_deposit_limit The maximum amount of tokens that this contract can hold\\n    /// MAX_SAFE_UINT256 means no limits\\n    constructor(\\n        address _token_address,\\n        address _secret_registry,\\n        uint256 _chain_id,\\n        uint256 _settlement_timeout_min,\\n        uint256 _settlement_timeout_max,\\n        address _deprecation_executor,\\n        uint256 _channel_participant_deposit_limit,\\n        uint256 _token_network_deposit_limit\\n    ) {\\n        require(_token_address != address(0x0));\\n        require(_secret_registry != address(0x0));\\n        require(_deprecation_executor != address(0x0));\\n        require(_chain_id > 0);\\n        require(_settlement_timeout_min > 0);\\n        require(_settlement_timeout_max > _settlement_timeout_min);\\n        require(contractExists(_token_address));\\n        require(contractExists(_secret_registry));\\n        require(_channel_participant_deposit_limit > 0);\\n        require(_token_network_deposit_limit > 0);\\n        require(_token_network_deposit_limit >= _channel_participant_deposit_limit);\\n\\n        token = Token(_token_address);\\n\\n        secret_registry = SecretRegistry(_secret_registry);\\n        chain_id = _chain_id;\\n        settlement_timeout_min = _settlement_timeout_min;\\n        settlement_timeout_max = _settlement_timeout_max;\\n\\n        // Make sure the contract is indeed a token contract\\n        require(token.totalSupply() > 0);\\n\\n        deprecation_executor = _deprecation_executor;\\n        channel_participant_deposit_limit = _channel_participant_deposit_limit;\\n        token_network_deposit_limit = _token_network_deposit_limit;\\n    }\\n\\n    function deprecate() public isSafe onlyDeprecationExecutor {\\n        safety_deprecation_switch = true;\\n        emit DeprecationSwitch(safety_deprecation_switch);\\n    }\\n\\n    /// @notice Opens a new channel between `participant1` and `participant2`.\\n    /// Can be called by anyone\\n    /// @param participant1 Ethereum address of a channel participant\\n    /// @param participant2 Ethereum address of the other channel participant\\n    /// @param settle_timeout Number of blocks that need to be mined between a\\n    /// call to closeChannel and settleChannel\\n    function openChannel(address participant1, address participant2, uint256 settle_timeout)\\n        public\\n        isSafe\\n        settleTimeoutValid(settle_timeout)\\n        returns (uint256)\\n    {\\n        bytes32 pair_hash;\\n        uint256 channel_identifier;\\n\\n        // Red Eyes release token network limit\\n        require(token.balanceOf(address(this)) < token_network_deposit_limit);\\n\\n        // First increment the counter\\n        // There will never be a channel with channel_identifier == 0\\n        channel_counter += 1;\\n        channel_identifier = channel_counter;\\n\\n        pair_hash = getParticipantsHash(participant1, participant2);\\n\\n        // There must only be one channel opened between two participants at\\n        // any moment in time.\\n        require(participants_hash_to_channel_identifier[pair_hash] == 0);\\n        participants_hash_to_channel_identifier[pair_hash] = channel_identifier;\\n\\n        Channel storage channel = channels[channel_identifier];\\n\\n        // We always increase the channel counter, therefore no channel data can already exist,\\n        // corresponding to this channel_identifier. This check must never fail.\\n        assert(channel.settle_block_number == 0);\\n        assert(channel.state == ChannelState.NonExistent);\\n\\n        // Store channel information\\n        channel.settle_block_number = settle_timeout;\\n        channel.state = ChannelState.Opened;\\n\\n        emit ChannelOpened(\\n            channel_identifier,\\n            participant1,\\n            participant2,\\n            settle_timeout\\n        );\\n\\n        return channel_identifier;\\n    }\\n\\n    /// @notice Sets the channel participant total deposit value.\\n    /// Can be called by anyone.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant Channel participant whose deposit is being set\\n    /// @param total_deposit The total amount of tokens that the participant\\n    /// will have as a deposit\\n    /// @param partner Channel partner address, needed to compute the total\\n    /// channel deposit\\n    function setTotalDeposit(\\n        uint256 channel_identifier,\\n        address participant,\\n        uint256 total_deposit,\\n        address partner\\n    )\\n        public\\n        isSafe\\n        isOpen(channel_identifier)\\n    {\\n        require(channel_identifier == getChannelIdentifier(participant, partner));\\n        require(total_deposit > 0);\\n        require(total_deposit <= channel_participant_deposit_limit);\\n\\n        uint256 added_deposit;\\n        uint256 channel_deposit;\\n\\n        Channel storage channel = channels[channel_identifier];\\n        Participant storage participant_state = channel.participants[participant];\\n        Participant storage partner_state = channel.participants[partner];\\n\\n        // Calculate the actual amount of tokens that will be transferred\\n        added_deposit = total_deposit - participant_state.deposit;\\n\\n        // The actual amount of tokens that will be transferred must be > 0\\n        require(added_deposit > 0);\\n\\n        // Underflow check; we use <= because added_deposit == total_deposit for the first deposit\\n\\n        require(added_deposit <= total_deposit);\\n\\n        // This should never fail at this point. Added check for security, because we directly set\\n        // the participant_state.deposit = total_deposit, while we transfer `added_deposit` tokens\\n        assert(participant_state.deposit + added_deposit == total_deposit);\\n\\n        // Red Eyes release token network limit\\n        require(token.balanceOf(address(this)) + added_deposit <= token_network_deposit_limit);\\n\\n        // Update the participant's channel deposit\\n        participant_state.deposit = total_deposit;\\n\\n        // Calculate the entire channel deposit, to avoid overflow\\n        channel_deposit = participant_state.deposit + partner_state.deposit;\\n        // Overflow check\\n        require(channel_deposit >= participant_state.deposit);\\n\\n        emit ChannelNewDeposit(\\n            channel_identifier,\\n            participant,\\n            participant_state.deposit\\n        );\\n\\n        // Do the transfer\\n        require(token.transferFrom(msg.sender, address(this), added_deposit));\\n    }\\n\\n    /// @notice Allows `participant` to withdraw tokens from the channel that he\\n    /// has with `partner`, without closing it. Can be called by anyone. Can\\n    /// only be called once per each signed withdraw message\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant Channel participant, who will receive the withdrawn\\n    /// amount\\n    /// @param total_withdraw Total amount of tokens that are marked as\\n    /// withdrawn from the channel during the channel lifecycle\\n    /// @param participant_signature Participant's signature on the withdraw\\n    /// data\\n    /// @param partner_signature Partner's signature on the withdraw data\\n    function setTotalWithdraw(\\n        uint256 channel_identifier,\\n        address participant,\\n        uint256 total_withdraw,\\n        uint256 expiration_block,\\n        bytes calldata participant_signature,\\n        bytes calldata partner_signature\\n    )\\n        external\\n        isOpen(channel_identifier)\\n    {\\n        uint256 total_deposit;\\n        uint256 current_withdraw;\\n        address partner;\\n\\n        require(total_withdraw > 0);\\n        require(block.number < expiration_block);\\n\\n        // Authenticate both channel partners via their signatures.\\n        // `participant` is a part of the signed message, so given in the calldata.\\n        require(participant == TokenNetworkUtils.recoverAddressFromWithdrawMessage(\\n            chain_id,\\n            channel_identifier,\\n            participant,\\n            total_withdraw,\\n            expiration_block,\\n            participant_signature\\n        ));\\n        partner = TokenNetworkUtils.recoverAddressFromWithdrawMessage(\\n            chain_id,\\n            channel_identifier,\\n            participant,\\n            total_withdraw,\\n            expiration_block,\\n            partner_signature\\n        );\\n\\n        // Validate that authenticated partners and the channel identifier match\\n        require(channel_identifier == getChannelIdentifier(participant, partner));\\n\\n        // Read channel state after validating the function input\\n        Channel storage channel = channels[channel_identifier];\\n        Participant storage participant_state = channel.participants[participant];\\n        Participant storage partner_state = channel.participants[partner];\\n\\n        total_deposit = participant_state.deposit + partner_state.deposit;\\n\\n        // Entire withdrawn amount must not be bigger than the current channel deposit\\n        require((total_withdraw + partner_state.withdrawn_amount) <= total_deposit);\\n        require(total_withdraw <= (total_withdraw + partner_state.withdrawn_amount));\\n\\n        // Using the total_withdraw (monotonically increasing) in the signed\\n        // message ensures that we do not allow replay attack to happen, by\\n        // using the same withdraw proof twice.\\n        // Next two lines enforce the monotonicity of total_withdraw and check for an underflow:\\n        // (we use <= because current_withdraw == total_withdraw for the first withdraw)\\n        current_withdraw = total_withdraw - participant_state.withdrawn_amount;\\n        require(current_withdraw <= total_withdraw);\\n\\n        // The actual amount of tokens that will be transferred must be > 0 to disable the reuse of\\n        // withdraw messages completely.\\n        require(current_withdraw > 0);\\n\\n        // This should never fail at this point. Added check for security, because we directly set\\n        // the participant_state.withdrawn_amount = total_withdraw,\\n        // while we transfer `current_withdraw` tokens.\\n        assert(participant_state.withdrawn_amount + current_withdraw == total_withdraw);\\n\\n        emit ChannelWithdraw(\\n            channel_identifier,\\n            participant,\\n            total_withdraw\\n        );\\n\\n        // Do the state change and tokens transfer\\n        participant_state.withdrawn_amount = total_withdraw;\\n        require(token.transfer(participant, current_withdraw));\\n\\n        // This should never happen, as we have an overflow check in setTotalDeposit\\n        assert(total_deposit >= participant_state.deposit);\\n        assert(total_deposit >= partner_state.deposit);\\n\\n        // A withdraw should never happen if a participant already has a\\n        // balance proof in storage. This should never fail as we use isOpen.\\n        assert(participant_state.nonce == 0);\\n        assert(partner_state.nonce == 0);\\n\\n    }\\n\\n    /// @notice Close the channel defined by the two participant addresses.\\n    /// Anybody can call this function on behalf of a participant (called\\n    /// the closing participant), providing a balance proof signed by\\n    /// both parties. Callable only once\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param closing_participant Channel participant who closes the channel\\n    /// @param non_closing_participant Channel partner of the `closing_participant`,\\n    /// who provided the balance proof\\n    /// @param balance_hash Hash of (transferred_amount, locked_amount,\\n    /// locksroot)\\n    /// @param additional_hash Computed from the message. Used for message\\n    /// authentication\\n    /// @param nonce Strictly monotonic value used to order transfers\\n    /// @param non_closing_signature Non-closing participant's signature of the balance proof data\\n    /// @param closing_signature Closing participant's signature of the balance\\n    /// proof data\\n    function closeChannel(\\n        uint256 channel_identifier,\\n        address non_closing_participant,\\n        address closing_participant,\\n        // The next four arguments form a balance proof.\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes memory non_closing_signature,\\n        bytes memory closing_signature\\n    )\\n        public\\n        isOpen(channel_identifier)\\n    {\\n        require(channel_identifier == getChannelIdentifier(closing_participant, non_closing_participant));\\n\\n        address recovered_non_closing_participant_address;\\n\\n        Channel storage channel = channels[channel_identifier];\\n\\n        channel.state = ChannelState.Closed;\\n        channel.participants[closing_participant].is_the_closer = true;\\n\\n        // This is the block number at which the channel can be settled.\\n        channel.settle_block_number += uint256(block.number);\\n\\n        // The closing participant must have signed the balance proof.\\n        address recovered_closing_participant_address = TokenNetworkUtils.recoverAddressFromBalanceProofCounterSignature(\\n            MessageType.MessageTypeId.BalanceProof,\\n            chain_id,\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            non_closing_signature,\\n            closing_signature\\n        );\\n        require(closing_participant == recovered_closing_participant_address);\\n\\n        // Nonce 0 means that the closer never received a transfer, therefore\\n        // never received a balance proof, or he is intentionally not providing\\n        // the latest transfer, in which case the closing party is going to\\n        // lose the tokens that were transferred to him.\\n        if (nonce > 0) {\\n            recovered_non_closing_participant_address = TokenNetworkUtils.recoverAddressFromBalanceProof(\\n                chain_id,\\n                channel_identifier,\\n                balance_hash,\\n                nonce,\\n                additional_hash,\\n                non_closing_signature\\n            );\\n            // Signature must be from the channel partner\\n            require(non_closing_participant == recovered_non_closing_participant_address);\\n\\n            updateBalanceProofData(\\n                channel,\\n                recovered_non_closing_participant_address,\\n                nonce,\\n                balance_hash\\n            );\\n        }\\n\\n        emit ChannelClosed(channel_identifier, closing_participant, nonce, balance_hash);\\n    }\\n\\n    /// @notice Called on a closed channel, the function allows the non-closing\\n    /// participant to provide the last balance proof, which modifies the\\n    /// closing participant's state. Can be called multiple times by anyone.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param closing_participant Channel participant who closed the channel\\n    /// @param non_closing_participant Channel participant who needs to update\\n    /// the balance proof\\n    /// @param balance_hash Hash of (transferred_amount, locked_amount,\\n    /// locksroot)\\n    /// @param additional_hash Computed from the message. Used for message\\n    /// authentication\\n    /// @param nonce Strictly monotonic value used to order transfers\\n    /// @param closing_signature Closing participant's signature of the balance\\n    /// proof data\\n    /// @param non_closing_signature Non-closing participant signature of the\\n    /// balance proof data\\n    function updateNonClosingBalanceProof(\\n        uint256 channel_identifier,\\n        address closing_participant,\\n        address non_closing_participant,\\n        // The next four arguments form a balance proof\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes calldata closing_signature,\\n        bytes calldata non_closing_signature\\n    )\\n        external\\n    {\\n        require(channel_identifier == getChannelIdentifier(\\n            closing_participant,\\n            non_closing_participant\\n        ));\\n        require(balance_hash != bytes32(0x0));\\n        require(nonce > 0);\\n\\n        address recovered_non_closing_participant;\\n        address recovered_closing_participant;\\n\\n        Channel storage channel = channels[channel_identifier];\\n\\n        require(channel.state == ChannelState.Closed);\\n\\n        // Calling this function after the settlement window is forbidden to\\n        // fix the following race condition:\\n        //\\n        // 1 A badly configured node A, that doesn't have a monitoring service\\n        //   and is temporarily offline does not call update during the\\n        //   settlement window.\\n        // 2 The well behaved partner B, who called close, sees the\\n        //   settlement window is over and calls settle. At this point the B's\\n        //   balance proofs which should be provided by A is missing, so B will\\n        //   call settle with its balance proof zeroed out.\\n        // 3 A restarts and calls update, which will change B's balance\\n        //   proof.\\n        // 4 At this point, the transactions from 2 and 3 are racing, and one\\n        //   of them will fail.\\n        //\\n        // To avoid the above race condition, which would require special\\n        // handling on both nodes, the call to update is forbidden after the\\n        // settlement window. This does not affect safety, since we assume the\\n        // nodes are always properly configured and have a monitoring service\\n        // available to call update on the user's behalf.\\n        require(channel.settle_block_number >= block.number);\\n\\n        // We need the signature from the non-closing participant to allow\\n        // anyone to make this transaction. E.g. a monitoring service.\\n        recovered_non_closing_participant = TokenNetworkUtils.recoverAddressFromBalanceProofCounterSignature(\\n            MessageType.MessageTypeId.BalanceProofUpdate,\\n            chain_id,\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            closing_signature,\\n            non_closing_signature\\n        );\\n        require(non_closing_participant == recovered_non_closing_participant);\\n\\n        recovered_closing_participant = TokenNetworkUtils.recoverAddressFromBalanceProof(\\n            chain_id,\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            closing_signature\\n        );\\n        require(closing_participant == recovered_closing_participant);\\n\\n        Participant storage closing_participant_state = channel.participants[closing_participant];\\n        // Make sure the first signature is from the closing participant\\n        require(closing_participant_state.is_the_closer);\\n\\n        // Update the balance proof data for the closing_participant\\n        updateBalanceProofData(channel, closing_participant, nonce, balance_hash);\\n\\n        emit NonClosingBalanceProofUpdated(\\n            channel_identifier,\\n            closing_participant,\\n            nonce,\\n            balance_hash\\n        );\\n    }\\n\\n    /// @notice Settles the balance between the two parties. Note that arguments\\n    /// order counts: `participant1_transferred_amount +\\n    /// participant1_locked_amount` <= `participant2_transferred_amount +\\n    /// participant2_locked_amount`\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant1 Channel participant\\n    /// @param participant1_transferred_amount The latest known amount of tokens\\n    /// transferred from `participant1` to `participant2`\\n    /// @param participant1_locked_amount Amount of tokens owed by\\n    /// `participant1` to `participant2`, contained in locked transfers that\\n    /// will be retrieved by calling `unlock` after the channel is settled\\n    /// @param participant1_locksroot The latest known hash of the\\n    /// pending hash-time locks of `participant1`, used to validate the unlocked\\n    /// proofs. If no balance_hash has been submitted, locksroot is ignored\\n    /// @param participant2 Other channel participant\\n    /// @param participant2_transferred_amount The latest known amount of tokens\\n    /// transferred from `participant2` to `participant1`\\n    /// @param participant2_locked_amount Amount of tokens owed by\\n    /// `participant2` to `participant1`, contained in locked transfers that\\n    /// will be retrieved by calling `unlock` after the channel is settled\\n    /// @param participant2_locksroot The latest known hash of the\\n    /// pending hash-time locks of `participant2`, used to validate the unlocked\\n    /// proofs. If no balance_hash has been submitted, locksroot is ignored\\n    function settleChannel(\\n        uint256 channel_identifier,\\n        address participant1,\\n        uint256 participant1_transferred_amount,\\n        uint256 participant1_locked_amount,\\n        bytes32 participant1_locksroot,\\n        address participant2,\\n        uint256 participant2_transferred_amount,\\n        uint256 participant2_locked_amount,\\n        bytes32 participant2_locksroot\\n    )\\n        public\\n    {\\n        settleChannel2(\\n            channel_identifier,\\n            SettleInput({\\n                participant: participant1,\\n                transferred_amount: participant1_transferred_amount,\\n                locked_amount: participant1_locked_amount,\\n                locksroot: participant1_locksroot\\n            }),\\n            SettleInput({\\n                participant: participant2,\\n                transferred_amount: participant2_transferred_amount,\\n                locked_amount: participant2_locked_amount,\\n                locksroot: participant2_locksroot\\n            })\\n        );\\n    }\\n\\n    function settleChannel2(\\n        uint256 channel_identifier,\\n        SettleInput memory participant1_settlement,\\n        SettleInput memory participant2_settlement\\n    )\\n        public\\n    {\\n        // There are several requirements that this function MUST enforce:\\n        // - it MUST never fail; therefore, any overflows or underflows must be\\n        // handled gracefully\\n        // - it MUST ensure that if participants use the latest valid balance proofs,\\n        // provided by the official Raiden client, the participants will be able\\n        // to receive correct final balances at the end of the channel lifecycle\\n        // - it MUST ensure that the participants cannot cheat by providing an\\n        // old, valid balance proof of their partner; meaning that their partner MUST\\n        // receive at least the amount of tokens that he would have received if\\n        // the latest valid balance proofs are used.\\n        // - the contract cannot determine if a balance proof is invalid (values\\n        // are not within the constraints enforced by the official Raiden client),\\n        // therefore it cannot ensure correctness. Users MUST use the official\\n        // Raiden clients for signing balance proofs.\\n\\n        address participant1 = participant1_settlement.participant;\\n        address participant2 = participant2_settlement.participant;\\n        require(channel_identifier == getChannelIdentifier(participant1, participant2));\\n\\n        bytes32 pair_hash;\\n\\n        pair_hash = getParticipantsHash(participant1, participant2);\\n        Channel storage channel = channels[channel_identifier];\\n\\n        require(channel.state == ChannelState.Closed);\\n\\n        // Settlement window must be over\\n        require(channel.settle_block_number < block.number);\\n\\n        Participant storage participant1_state = channel.participants[participant1];\\n        Participant storage participant2_state = channel.participants[participant2];\\n\\n        require(verifyBalanceHashData(\\n            participant1_state,\\n            participant1_settlement\\n        ));\\n\\n        require(verifyBalanceHashData(\\n            participant2_state,\\n            participant2_settlement\\n        ));\\n\\n        // We are calculating the final token amounts that need to be\\n        // transferred to the participants now and the amount of tokens that\\n        // need to remain locked in the contract. These tokens can be unlocked\\n        // by calling `unlock`.\\n        // participant1_transferred_amount = the amount of tokens that\\n        //   participant1 will receive in this transaction.\\n        // participant2_transferred_amount = the amount of tokens that\\n        //   participant2 will receive in this transaction.\\n        // participant1_locked_amount = the amount of tokens remaining in the\\n        //   contract, representing pending transfers from participant1 to participant2.\\n        // participant2_locked_amount = the amount of tokens remaining in the\\n        //   contract, representing pending transfers from participant2 to participant1.\\n        // We are reusing variables due to the local variables number limit.\\n        // For better readability this can be refactored further.\\n        (\\n            participant1_settlement.transferred_amount,\\n            participant2_settlement.transferred_amount,\\n            participant1_settlement.locked_amount,\\n            participant2_settlement.locked_amount\\n        ) = getSettleTransferAmounts(\\n            participant1_state,\\n            participant1_settlement.transferred_amount,\\n            participant1_settlement.locked_amount,\\n            participant2_state,\\n            participant2_settlement.transferred_amount,\\n            participant2_settlement.locked_amount\\n        );\\n\\n        // Remove the channel data from storage\\n        delete channel.participants[participant1];\\n        delete channel.participants[participant2];\\n        delete channels[channel_identifier];\\n\\n        // Remove the pair's channel counter\\n        delete participants_hash_to_channel_identifier[pair_hash];\\n\\n        // Store balance data needed for `unlock`, including the calculated\\n        // locked amounts remaining in the contract.\\n        storeUnlockData(\\n            channel_identifier,\\n            participant1_settlement,\\n            participant2\\n        );\\n        storeUnlockData(\\n            channel_identifier,\\n            participant2_settlement,\\n            participant1\\n        );\\n\\n        emit ChannelSettled(\\n            channel_identifier,\\n            participant1_settlement.transferred_amount,\\n            participant1_settlement.locksroot,\\n            participant2_settlement.transferred_amount,\\n            participant2_settlement.locksroot\\n        );\\n\\n        // Do the actual token transfers\\n        if (participant1_settlement.transferred_amount > 0) {\\n            require(token.transfer(participant1, participant1_settlement.transferred_amount));\\n        }\\n\\n        if (participant2_settlement.transferred_amount > 0) {\\n            require(token.transfer(participant2, participant2_settlement.transferred_amount));\\n        }\\n    }\\n\\n    /// @notice Unlocks all pending off-chain transfers from `sender` to\\n    /// `receiver` and sends the locked tokens corresponding to locks with\\n    /// secrets registered on-chain to the `receiver`. Locked tokens\\n    /// corresponding to locks where the secret was not revealed on-chain will\\n    /// return to the `sender`. Anyone can call unlock.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param receiver Address who will receive the claimable unlocked\\n    /// tokens\\n    /// @param sender Address who sent the pending transfers and will receive\\n    /// the unclaimable unlocked tokens\\n    /// @param locks All pending locks concatenated in order of creation\\n    /// that `sender` sent to `receiver`\\n    function unlock(\\n        uint256 channel_identifier,\\n        address receiver,\\n        address sender,\\n        bytes memory locks\\n    )\\n        public\\n    {\\n        // Channel represented by channel_identifier must be settled and\\n        // channel data deleted\\n        require(channel_identifier != getChannelIdentifier(receiver, sender));\\n\\n        // After the channel is settled the storage is cleared, therefore the\\n        // value will be NonExistent and not Settled. The value Settled is used\\n        // for the external APIs\\n        require(channels[channel_identifier].state == ChannelState.NonExistent);\\n\\n        bytes32 unlock_key;\\n        bytes32 computed_locksroot;\\n        uint256 unlocked_amount;\\n        uint256 locked_amount;\\n        uint256 returned_tokens;\\n\\n        // Calculate the locksroot for the pending transfers and the amount of\\n        // tokens corresponding to the locked transfers with secrets revealed\\n        // on chain.\\n        (computed_locksroot, unlocked_amount) = getHashAndUnlockedAmount(\\n            locks\\n        );\\n\\n        // The sender must have a non-empty locksroot on-chain that must be\\n        // the same as the computed locksroot.\\n        // Get the amount of tokens that have been left in the contract, to\\n        // account for the pending transfers `sender` -> `receiver`.\\n        unlock_key = getUnlockIdentifier(channel_identifier, sender, receiver);\\n        UnlockData storage unlock_data = unlock_identifier_to_unlock_data[unlock_key];\\n        locked_amount = unlock_data.locked_amount;\\n\\n        // Locksroot must be the same as the computed locksroot\\n        require(unlock_data.locksroot == computed_locksroot);\\n\\n        // There are no pending transfers if the locked_amount is 0.\\n        // Transaction must fail\\n        require(locked_amount > 0);\\n\\n        // Make sure we don't transfer more tokens than previously reserved in\\n        // the smart contract.\\n        unlocked_amount = TokenNetworkUtils.min(unlocked_amount, locked_amount);\\n\\n        // Transfer the rest of the tokens back to the sender\\n        returned_tokens = locked_amount - unlocked_amount;\\n\\n        // Remove sender's unlock data\\n        delete unlock_identifier_to_unlock_data[unlock_key];\\n\\n        emit ChannelUnlocked(\\n            channel_identifier,\\n            receiver,\\n            sender,\\n            computed_locksroot,\\n            unlocked_amount,\\n            returned_tokens\\n        );\\n\\n        // Transfer the unlocked tokens to the receiver. unlocked_amount can\\n        // be 0\\n        if (unlocked_amount > 0) {\\n            require(token.transfer(receiver, unlocked_amount));\\n        }\\n\\n        // Transfer the rest of the tokens back to the sender\\n        if (returned_tokens > 0) {\\n            require(token.transfer(sender, returned_tokens));\\n        }\\n\\n        // At this point, this should always be true\\n        assert(locked_amount >= returned_tokens);\\n        assert(locked_amount >= unlocked_amount);\\n    }\\n\\n    /* /// @notice Cooperatively settles the balances between the two channel\\n    /// participants and transfers the agreed upon token amounts to the\\n    /// participants. After this the channel lifecycle has ended and no more\\n    /// operations can be done on it.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant1_address Address of channel participant\\n    /// @param participant1_balance Amount of tokens that `participant1_address`\\n    /// must receive when the channel is settled and removed\\n    /// @param participant2_address Address of the other channel participant\\n    /// @param participant2_balance Amount of tokens that `participant2_address`\\n    /// must receive when the channel is settled and removed\\n    /// @param participant1_signature Signature of `participant1_address` on the\\n    /// cooperative settle message\\n    /// @param participant2_signature Signature of `participant2_address` on the\\n    /// cooperative settle message\\n    function cooperativeSettle(\\n        uint256 channel_identifier,\\n        address participant1_address,\\n        uint256 participant1_balance,\\n        address participant2_address,\\n        uint256 participant2_balance,\\n        bytes participant1_signature,\\n        bytes participant2_signature\\n    )\\n        public\\n    {\\n        require(channel_identifier == getChannelIdentifier(\\n            participant1_address,\\n            participant2_address\\n        ));\\n        bytes32 pair_hash;\\n        address participant1;\\n        address participant2;\\n        uint256 total_available_deposit;\\n\\n        pair_hash = getParticipantsHash(participant1_address, participant2_address);\\n        Channel storage channel = channels[channel_identifier];\\n\\n        require(channel.state == ChannelState.Opened);\\n\\n        participant1 = TokenNetworkUtils.recoverAddressFromCooperativeSettleSignature(\\n            channel_identifier,\\n            participant1_address,\\n            participant1_balance,\\n            participant2_address,\\n            participant2_balance,\\n            participant1_signature\\n        );\\n        // The provided address must be the same as the recovered one\\n        require(participant1 == participant1_address);\\n\\n        participant2 = TokenNetworkUtils.recoverAddressFromCooperativeSettleSignature(\\n            channel_identifier,\\n            participant1_address,\\n            participant1_balance,\\n            participant2_address,\\n            participant2_balance,\\n            participant2_signature\\n        );\\n        // The provided address must be the same as the recovered one\\n        require(participant2 == participant2_address);\\n\\n        Participant storage participant1_state = channel.participants[participant1];\\n        Participant storage participant2_state = channel.participants[participant2];\\n\\n        total_available_deposit = getChannelAvailableDeposit(\\n            participant1_state,\\n            participant2_state\\n        );\\n        // The sum of the provided balances must be equal to the total\\n        // available deposit\\n        require(total_available_deposit == (participant1_balance + participant2_balance));\\n        // Overflow check for the balances addition from the above check.\\n        // This overflow should never happen if the token.transfer function is implemented\\n        // correctly. We do not control the token implementation, therefore we add this\\n        // check for safety.\\n        require(participant1_balance <= participant1_balance + participant2_balance);\\n\\n        // Remove channel data from storage before doing the token transfers\\n        delete channel.participants[participant1];\\n        delete channel.participants[participant2];\\n        delete channels[channel_identifier];\\n\\n        // Remove the pair's channel counter\\n        delete participants_hash_to_channel_identifier[pair_hash];\\n\\n        emit ChannelSettled(channel_identifier, participant1_balance, participant2_balance);\\n\\n        // Do the token transfers\\n        if (participant1_balance > 0) {\\n            require(token.transfer(participant1, participant1_balance));\\n        }\\n\\n        if (participant2_balance > 0) {\\n            require(token.transfer(participant2, participant2_balance));\\n        }\\n    } */\\n\\n    /// @notice Returns the unique identifier for the channel given by the\\n    /// contract\\n    /// @param participant Address of a channel participant\\n    /// @param partner Address of the other channel participant\\n    /// @return Unique identifier for the channel. It can be 0 if channel does\\n    /// not exist\\n    function getChannelIdentifier(address participant, address partner)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(participant != address(0x0));\\n        require(partner != address(0x0));\\n        require(participant != partner);\\n\\n        bytes32 pair_hash = getParticipantsHash(participant, partner);\\n        return participants_hash_to_channel_identifier[pair_hash];\\n    }\\n\\n    /// @dev Returns the channel specific data.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant1 Address of a channel participant\\n    /// @param participant2 Address of the other channel participant\\n    /// @return Channel settle_block_number and state\\n    /// @notice The contract cannot really distinguish Settled and Removed\\n    /// states, especially when wrong participants are given as input.\\n    /// The contract does not remember the participants of the channel\\n    function getChannelInfo(\\n        uint256 channel_identifier,\\n        address participant1,\\n        address participant2\\n    )\\n        external\\n        view\\n        returns (uint256, ChannelState)\\n    {\\n        bytes32 unlock_key1;\\n        bytes32 unlock_key2;\\n\\n        Channel storage channel = channels[channel_identifier];\\n        ChannelState state = channel.state;  // This must **not** update the storage\\n\\n        if (state == ChannelState.NonExistent &&\\n            channel_identifier > 0 &&\\n            channel_identifier <= channel_counter\\n        ) {\\n            // The channel has been settled, channel data is removed Therefore,\\n            // the channel state in storage is actually `0`, or `NonExistent`\\n            // However, for this view function, we return `Settled`, in order\\n            // to provide a consistent external API\\n            state = ChannelState.Settled;\\n\\n            // We might still have data stored for future unlock operations\\n            // Only if we do not, we can consider the channel as `Removed`\\n            unlock_key1 = getUnlockIdentifier(channel_identifier, participant1, participant2);\\n            UnlockData storage unlock_data1 = unlock_identifier_to_unlock_data[unlock_key1];\\n\\n            unlock_key2 = getUnlockIdentifier(channel_identifier, participant2, participant1);\\n            UnlockData storage unlock_data2 = unlock_identifier_to_unlock_data[unlock_key2];\\n\\n            if (unlock_data1.locked_amount == 0 && unlock_data2.locked_amount == 0) {\\n                state = ChannelState.Removed;\\n            }\\n        }\\n\\n        return (\\n            channel.settle_block_number,\\n            state\\n        );\\n    }\\n\\n    /// @dev Returns the channel specific data.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant Address of the channel participant whose data will be\\n    /// returned\\n    /// @param partner Address of the channel partner\\n    /// @return Participant's deposit, withdrawn_amount, whether the participant\\n    /// has called `closeChannel` or not, balance_hash, nonce, locksroot,\\n    /// locked_amount\\n    function getChannelParticipantInfo(\\n            uint256 channel_identifier,\\n            address participant,\\n            address partner\\n    )\\n        external\\n        view\\n        returns (uint256, uint256, bool, bytes32, uint256, bytes32, uint256)\\n    {\\n        bytes32 unlock_key;\\n\\n        Participant storage participant_state = channels[channel_identifier].participants[\\n            participant\\n        ];\\n        unlock_key = getUnlockIdentifier(channel_identifier, participant, partner);\\n        UnlockData storage unlock_data = unlock_identifier_to_unlock_data[unlock_key];\\n\\n        return (\\n            participant_state.deposit,\\n            participant_state.withdrawn_amount,\\n            participant_state.is_the_closer,\\n            participant_state.balance_hash,\\n            participant_state.nonce,\\n            unlock_data.locksroot,\\n            unlock_data.locked_amount\\n        );\\n    }\\n\\n    /// @dev Get the hash of the participant addresses, ordered\\n    /// lexicographically\\n    /// @param participant Address of a channel participant\\n    /// @param partner Address of the other channel participant\\n    function getParticipantsHash(address participant, address partner)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        require(participant != address(0x0));\\n        require(partner != address(0x0));\\n        require(participant != partner);\\n\\n        if (participant < partner) {\\n            return keccak256(abi.encodePacked(participant, partner));\\n        } else {\\n            return keccak256(abi.encodePacked(partner, participant));\\n        }\\n    }\\n\\n    /// @dev Get the hash of the channel identifier and the participant\\n    /// addresses (whose ordering matters). The hash might be useful for\\n    /// the receiver to look up the appropriate UnlockData to claim\\n    /// @param channel_identifier Identifier for the channel which the\\n    /// UnlockData is about\\n    /// @param sender Sender of the pending transfers that the UnlockData\\n    /// represents\\n    /// @param receiver Receiver of the pending transfers that the UnlockData\\n    /// represents\\n    function getUnlockIdentifier(\\n        uint256 channel_identifier,\\n        address sender,\\n        address receiver\\n    )\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        require(sender != receiver);\\n        return keccak256(abi.encodePacked(channel_identifier, sender, receiver));\\n    }\\n\\n    function updateBalanceProofData(\\n        Channel storage channel,\\n        address participant,\\n        uint256 nonce,\\n        bytes32 balance_hash\\n    )\\n        internal\\n    {\\n        Participant storage participant_state = channel.participants[participant];\\n\\n        // Multiple calls to updateNonClosingBalanceProof can be made and we\\n        // need to store the last known balance proof data.\\n        // This line prevents Monitoring Services from getting rewards\\n        // again and again using the same reward proof.\\n        require(nonce > participant_state.nonce);\\n\\n        participant_state.nonce = nonce;\\n        participant_state.balance_hash = balance_hash;\\n    }\\n\\n    function storeUnlockData(\\n        uint256 channel_identifier,\\n        SettleInput memory settle_input,\\n        address receiver\\n    )\\n        internal\\n    {\\n        // If there are transfers to unlock, store the locksroot and total\\n        // amount of tokens\\n        if (settle_input.locked_amount == 0) {\\n            return;\\n        }\\n\\n        bytes32 key = getUnlockIdentifier(channel_identifier, settle_input.participant, receiver);\\n        UnlockData storage unlock_data = unlock_identifier_to_unlock_data[key];\\n        unlock_data.locksroot = settle_input.locksroot;\\n        unlock_data.locked_amount = settle_input.locked_amount;\\n    }\\n\\n    function getChannelAvailableDeposit(\\n        Participant storage participant1_state,\\n        Participant storage participant2_state\\n    )\\n        internal\\n        view\\n        returns (uint256 total_available_deposit)\\n    {\\n        total_available_deposit = (\\n            participant1_state.deposit +\\n            participant2_state.deposit -\\n            participant1_state.withdrawn_amount -\\n            participant2_state.withdrawn_amount\\n        );\\n    }\\n\\n    /// @dev Function that calculates the amount of tokens that the participants\\n    /// will receive when calling settleChannel.\\n    /// Check https://github.com/raiden-network/raiden-contracts/issues/188 for the settlement\\n    /// algorithm analysis and explanations.\\n    function getSettleTransferAmounts(\\n        Participant storage participant1_state,\\n        uint256 participant1_transferred_amount,\\n        uint256 participant1_locked_amount,\\n        Participant storage participant2_state,\\n        uint256 participant2_transferred_amount,\\n        uint256 participant2_locked_amount\\n    )\\n        private\\n        view\\n        returns (uint256, uint256, uint256, uint256)\\n    {\\n        // The scope of this function is to compute the settlement amounts that\\n        // the two channel participants will receive when calling settleChannel\\n        // and the locked amounts that remain in the contract, to account for\\n        // the pending, not finalized transfers, that will be received by the\\n        // participants when calling `unlock`.\\n\\n        // The amount of tokens that participant1 MUST receive at the end of\\n        // the channel lifecycle (after settleChannel and unlock) is:\\n        // B1 = D1 - W1 + T2 - T1 + Lc2 - Lc1\\n\\n        // The amount of tokens that participant2 MUST receive at the end of\\n        // the channel lifecycle (after settleChannel and unlock) is:\\n        // B2 = D2 - W2 + T1 - T2 + Lc1 - Lc2\\n\\n        // B1 + B2 = TAD = D1 + D2 - W1 - W2\\n        // TAD = total available deposit at settlement time\\n\\n        // L1 = Lc1 + Lu1\\n        // L2 = Lc2 + Lu2\\n\\n        // where:\\n        // B1 = final balance of participant1 after the channel is removed\\n        // D1 = total amount deposited by participant1 into the channel\\n        // W1 = total amount withdrawn by participant1 from the channel\\n        // T2 = total amount transferred by participant2 to participant1 (finalized transfers)\\n        // T1 = total amount transferred by participant1 to participant2 (finalized transfers)\\n        // L1 = total amount of tokens locked in pending transfers, sent by\\n        //   participant1 to participant2\\n        // L2 = total amount of tokens locked in pending transfers, sent by\\n        //   participant2 to participant1\\n        // Lc2 = the amount that can be claimed by participant1 from the pending\\n        //   transfers (that have not been finalized off-chain), sent by\\n        //   participant2 to participant1. These are part of the locked amount\\n        //   value from participant2's balance proof. They are considered claimed\\n        //   if the secret corresponding to these locked transfers was registered\\n        //   on-chain, in the SecretRegistry contract, before the lock's expiration.\\n        // Lu1 = unclaimable locked amount from L1\\n        // Lc1 = the amount that can be claimed by participant2 from the pending\\n        //   transfers (that have not been finalized off-chain),\\n        //   sent by participant1 to participant2\\n        // Lu2 = unclaimable locked amount from L2\\n\\n        // Notes:\\n        // 1) The unclaimble tokens from a locked amount will return to the sender.\\n        // At the time of calling settleChannel, the TokenNetwork contract does\\n        // not know what locked amounts are claimable or unclaimable.\\n        // 2) There are some Solidity constraints that make the calculations\\n        // more difficult: attention to overflows and underflows, that MUST be\\n        // handled without throwing.\\n\\n        // Cases that require attention:\\n        // case1. If participant1 does NOT provide a balance proof or provides\\n        // an old balance proof.  participant2_transferred_amount can be [0,\\n        // real_participant2_transferred_amount) We MUST NOT punish\\n        // participant2.\\n        // case2. If participant2 does NOT provide a balance proof or provides\\n        // an old balance proof.  participant1_transferred_amount can be [0,\\n        // real_participant1_transferred_amount) We MUST NOT punish\\n        // participant1.\\n        // case3. If neither participants provide a balance proof, we just\\n        // subtract their withdrawn amounts from their deposits.\\n\\n        // This is why, the algorithm implemented in Solidity is:\\n        // (explained at each step, below)\\n        // RmaxP1 = (T2 + L2) - (T1 + L1) + D1 - W1\\n        // RmaxP1 = min(TAD, RmaxP1)\\n        // RmaxP2 = TAD - RmaxP1\\n        // SL2 = min(RmaxP1, L2)\\n        // S1 = RmaxP1 - SL2\\n        // SL1 = min(RmaxP2, L1)\\n        // S2 = RmaxP2 - SL1\\n\\n        // where:\\n        // RmaxP1 = due to possible over/underflows that only appear when using\\n        //    old balance proofs & the fact that settlement balance calculation\\n        //    is symmetric (we can calculate either RmaxP1 and RmaxP2 first,\\n        //    order does not affect result), this is a convention used to determine\\n        //    the maximum receivable amount of participant1 at settlement time\\n        // S1 = amount received by participant1 when calling settleChannel\\n        // SL1 = the maximum amount from L1 that can be locked in the\\n        //   TokenNetwork contract when calling settleChannel (due to overflows\\n        //   that only happen when using old balance proofs)\\n        // S2 = amount received by participant2 when calling settleChannel\\n        // SL2 = the maximum amount from L2 that can be locked in the\\n        //   TokenNetwork contract when calling settleChannel (due to overflows\\n        //   that only happen when using old balance proofs)\\n\\n        uint256 participant1_amount;\\n        uint256 participant2_amount;\\n        uint256 total_available_deposit;\\n\\n        SettlementData memory participant1_settlement;\\n        SettlementData memory participant2_settlement;\\n\\n        participant1_settlement.deposit = participant1_state.deposit;\\n        participant1_settlement.withdrawn = participant1_state.withdrawn_amount;\\n        participant1_settlement.transferred = participant1_transferred_amount;\\n        participant1_settlement.locked = participant1_locked_amount;\\n\\n        participant2_settlement.deposit = participant2_state.deposit;\\n        participant2_settlement.withdrawn = participant2_state.withdrawn_amount;\\n        participant2_settlement.transferred = participant2_transferred_amount;\\n        participant2_settlement.locked = participant2_locked_amount;\\n\\n        // TAD = D1 + D2 - W1 - W2 = total available deposit at settlement time\\n        total_available_deposit = getChannelAvailableDeposit(\\n            participant1_state,\\n            participant2_state\\n        );\\n\\n        // RmaxP1 = (T2 + L2) - (T1 + L1) + D1 - W1\\n        // This amount is the maximum possible amount that participant1 can\\n        // receive at settlement time and also contains the entire locked amount\\n        //  of the pending transfers from participant2 to participant1.\\n        participant1_amount = getMaxPossibleReceivableAmount(\\n            participant1_settlement,\\n            participant2_settlement\\n        );\\n\\n        // RmaxP1 = min(TAD, RmaxP1)\\n        // We need to bound this to the available channel deposit in order to\\n        // not send tokens from other channels. The only case where TAD is\\n        // smaller than RmaxP1 is when at least one balance proof is old.\\n        participant1_amount = TokenNetworkUtils.min(participant1_amount, total_available_deposit);\\n\\n        // RmaxP2 = TAD - RmaxP1\\n        // Now it is safe to subtract without underflow\\n        participant2_amount = total_available_deposit - participant1_amount;\\n\\n        // SL2 = min(RmaxP1, L2)\\n        // S1 = RmaxP1 - SL2\\n        // Both operations are done by failsafe_subtract\\n        // We take out participant2's pending transfers locked amount, bounding\\n        // it by the maximum receivable amount of participant1\\n        (participant1_amount, participant2_locked_amount) = TokenNetworkUtils.failsafe_subtract(\\n            participant1_amount,\\n            participant2_locked_amount\\n        );\\n\\n        // SL1 = min(RmaxP2, L1)\\n        // S2 = RmaxP2 - SL1\\n        // Both operations are done by failsafe_subtract\\n        // We take out participant1's pending transfers locked amount, bounding\\n        // it by the maximum receivable amount of participant2\\n        (participant2_amount, participant1_locked_amount) = TokenNetworkUtils.failsafe_subtract(\\n            participant2_amount,\\n            participant1_locked_amount\\n        );\\n\\n        // This should never throw:\\n        // S1 and S2 MUST be smaller than TAD\\n        assert(participant1_amount <= total_available_deposit);\\n        assert(participant2_amount <= total_available_deposit);\\n        // S1 + S2 + SL1 + SL2 == TAD\\n        assert(total_available_deposit == (\\n            participant1_amount +\\n            participant2_amount +\\n            participant1_locked_amount +\\n            participant2_locked_amount\\n        ));\\n\\n        return (\\n            participant1_amount,\\n            participant2_amount,\\n            participant1_locked_amount,\\n            participant2_locked_amount\\n        );\\n    }\\n\\n    function getMaxPossibleReceivableAmount(\\n        SettlementData memory participant1_settlement,\\n        SettlementData memory participant2_settlement\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return TokenNetworkUtils.getMaxPossibleReceivableAmount(\\n            participant1_settlement.deposit,\\n            participant1_settlement.withdrawn,\\n            participant1_settlement.transferred,\\n            participant1_settlement.locked,\\n            participant2_settlement.deposit,\\n            participant2_settlement.withdrawn,\\n            participant2_settlement.transferred,\\n            participant2_settlement.locked\\n        );\\n    }\\n\\n    function verifyBalanceHashData(\\n        Participant storage participant,\\n        SettleInput memory settle_input\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // When no balance proof has been provided, we need to check this\\n        // separately because hashing values of 0 outputs a value != 0\\n        if (participant.balance_hash == 0 &&\\n            settle_input.transferred_amount == 0 &&\\n            settle_input.locked_amount == 0\\n            /* locksroot is ignored. */\\n        ) {\\n            return true;\\n        }\\n\\n        // Make sure the hash of the provided state is the same as the stored\\n        // balance_hash\\n        return participant.balance_hash == keccak256(abi.encodePacked(\\n            settle_input.transferred_amount,\\n            settle_input.locked_amount,\\n            settle_input.locksroot\\n        ));\\n    }\\n\\n    /// @dev Calculates the hash of the pending transfers data and\\n    /// calculates the amount of tokens that can be unlocked because the secret\\n    /// was registered on-chain.\\n    function getHashAndUnlockedAmount(bytes memory locks)\\n        internal\\n        view\\n        returns (bytes32, uint256)\\n    {\\n        uint256 length = locks.length;\\n\\n        // each lock has this form:\\n        // (locked_amount || expiration_block || secrethash) = 3 * 32 bytes\\n        require(length % 96 == 0);\\n\\n        uint256 i;\\n        uint256 total_unlocked_amount;\\n        uint256 unlocked_amount;\\n        bytes32 total_hash;\\n\\n        for (i = 32; i < length; i += 96) {\\n            unlocked_amount = getLockedAmountFromLock(locks, i);\\n            total_unlocked_amount += unlocked_amount;\\n        }\\n\\n        total_hash = keccak256(locks);\\n\\n        return (total_hash, total_unlocked_amount);\\n    }\\n\\n    function getLockedAmountFromLock(bytes memory locks, uint256 offset)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 expiration_block;\\n        uint256 locked_amount;\\n        uint256 reveal_block;\\n        bytes32 secrethash;\\n\\n        if (locks.length <= offset) {\\n            return 0;\\n        }\\n\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            expiration_block := mload(add(locks, offset))\\n            locked_amount := mload(add(locks, add(offset, 32)))\\n            secrethash := mload(add(locks, add(offset, 64)))\\n        }\\n\\n        // Check if the lock's secret was revealed in the SecretRegistry The\\n        // secret must have been revealed in the SecretRegistry contract before\\n        // the lock's expiration_block in order for the hash time lock transfer\\n        // to be successful.\\n        reveal_block = secret_registry.getSecretRevealBlockHeight(secrethash);\\n        if (reveal_block == 0 || expiration_block <= reveal_block) {\\n            locked_amount = 0;\\n        }\\n\\n        return locked_amount;\\n    }\\n}\\n\",\"keccak256\":\"0xef9c79f097264092c65b322d121b8ffc6aeb2d7302d47c438fe1fc4bc53f1ad5\",\"license\":\"MIT\"},\"data/source/raiden/TokenNetworkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nimport \\\"./Utils.sol\\\";\\nimport \\\"./Token.sol\\\";\\nimport \\\"./TokenNetwork.sol\\\";\\n\\n\\n/// @title TokenNetworkRegistry\\n/// @notice The TokenNetwork Registry deploys new TokenNetwork contracts for the\\n/// Raiden Network protocol.\\ncontract TokenNetworkRegistry is Utils {\\n    address public secret_registry_address;\\n    uint256 public chain_id;\\n    uint256 public settlement_timeout_min;\\n    uint256 public settlement_timeout_max;\\n    uint256 public max_token_networks;\\n\\n    // Only for the limited Red Eyes release\\n    address public deprecation_executor;\\n    uint256 public token_network_created = 0;\\n\\n    // Token address => TokenNetwork address\\n    mapping(address => address) public token_to_token_networks;\\n\\n    event TokenNetworkCreated(address indexed token_address, address indexed token_network_address);\\n\\n    modifier canCreateTokenNetwork() {\\n        require(token_network_created < max_token_networks, \\\"registry full\\\");\\n        _;\\n    }\\n\\n    /// @param _secret_registry_address The address of SecretRegistry that's used by all\\n    /// TokenNetworks created by this contract\\n    /// @param _chain_id EIP-155 Chain-ID of the chain where this contract is deployed\\n    /// @param _settlement_timeout_min The shortest settlement period (in number of blocks)\\n    /// that can be chosen at the channel opening\\n    /// @param _settlement_timeout_max The longest settlement period (in number of blocks)\\n    /// that can be chosen at the channel opening\\n    /// @param _max_token_networks the number of tokens that can be registered\\n    /// MAX_UINT256 means no limits\\n    constructor(\\n        address _secret_registry_address,\\n        uint256 _chain_id,\\n        uint256 _settlement_timeout_min,\\n        uint256 _settlement_timeout_max,\\n        uint256 _max_token_networks\\n    ) {\\n        require(_chain_id > 0);\\n        require(_settlement_timeout_min > 0);\\n        require(_settlement_timeout_max > 0);\\n        require(_settlement_timeout_max > _settlement_timeout_min);\\n        require(_secret_registry_address != address(0x0));\\n        require(contractExists(_secret_registry_address));\\n        require(_max_token_networks > 0);\\n        secret_registry_address = _secret_registry_address;\\n        chain_id = _chain_id;\\n        settlement_timeout_min = _settlement_timeout_min;\\n        settlement_timeout_max = _settlement_timeout_max;\\n        max_token_networks = _max_token_networks;\\n\\n        deprecation_executor = msg.sender;\\n    }\\n\\n    /// @notice Deploy a new TokenNetwork contract for the Token deployed at\\n    /// `_token_address`\\n    /// @param _token_address Ethereum address of an already deployed token, to\\n    /// be used in the new TokenNetwork contract\\n    function createERC20TokenNetwork(\\n        address _token_address,\\n        uint256 _channel_participant_deposit_limit,\\n        uint256 _token_network_deposit_limit\\n    )\\n        external\\n        canCreateTokenNetwork\\n        returns (address token_network_address)\\n    {\\n        require(token_to_token_networks[_token_address] == address(0x0));\\n\\n        // We limit the number of token networks to 1 for the Bug Bounty release\\n        token_network_created = token_network_created + 1;\\n\\n        TokenNetwork token_network;\\n\\n        // Token contract checks are in the corresponding TokenNetwork contract\\n        token_network = new TokenNetwork(\\n            _token_address,\\n            secret_registry_address,\\n            chain_id,\\n            settlement_timeout_min,\\n            settlement_timeout_max,\\n            deprecation_executor,\\n            _channel_participant_deposit_limit,\\n            _token_network_deposit_limit\\n        );\\n\\n        token_network_address = address(token_network);\\n\\n        token_to_token_networks[_token_address] = token_network_address;\\n        emit TokenNetworkCreated(_token_address, token_network_address);\\n\\n        return token_network_address;\\n    }\\n}\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\",\"keccak256\":\"0x6ac2b18eec420639447a0d7879094357e15e398d9f222c48fe6701a7cde01a5c\",\"license\":\"MIT\"},\"data/source/raiden/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @title Utils\\n/// @notice Utils contract for various helpers used by the Raiden Network smart\\n/// contracts.\\ncontract Utils {\\n    /// @notice Check if a contract exists\\n    /// @param contract_address The address to check whether a contract is\\n    /// deployed or not\\n    /// @return True if a contract exists, false otherwise\\n    function contractExists(address contract_address) public view returns (bool) {\\n        uint size;\\n\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            size := extcodesize(contract_address)\\n        }\\n\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x3fb4df9cdadd3711bffff81a451868c7a1ee8a2f3ff1a20a4343def15cb38e0f\",\"license\":\"MIT\"}},\"version\":1}"
        },
        "TokenNetworkUtils": {
          "abi": [],
          "bin": "60e661007d600b82828239805160001a60731461001857fe5b5a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b604081101561006e57600082820152602001610057565b505050600052607381538281f3fe7300000000000000000000000000000000000000005a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156068576000828201526020016053565b505050146080604052600080607a607d565b50505b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101560b3578086015182820160400152602001609a565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b50505056",
          "bin-runtime": "7300000000000000000000000000000000000000005a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b60408110156068576000828201526020016053565b505050146080604052600080607a607d565b50505b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101560b3578086015182820160400152602001609a565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b50505056",
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/lib/TokenNetworkUtils.sol\":\"TokenNetworkUtils\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/lib/ECVerify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nlibrary ECVerify {\\n\\n    function ecverify(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address signature_address)\\n    {\\n        require(signature.length == 65);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // The signature format is a compact form of:\\n        //   {bytes32 r}{bytes32 s}{uint8 v}\\n        // Compact means, uint8 is not padded to 32 bytes.\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n\\n            // Here we are loading the last 32 bytes, including 31 bytes following the signature.\\n            v := byte(0, mload(add(signature, 96)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        require(v == 27 || v == 28);\\n\\n        signature_address = ecrecover(hash, v, r, s);\\n\\n        // ecrecover returns zero on error\\n        require(signature_address != address(0x0));\\n\\n        return signature_address;\\n    }\\n}\\n\",\"keccak256\":\"0xeced41e7578af77042e00fc68e482b754cd355da872bfdda95a0b74e3dbd90e0\",\"license\":\"MIT\"},\"data/source/lib/MessageType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nlibrary MessageType {\\n\\n    enum MessageTypeId {\\n        None,\\n        BalanceProof,\\n        BalanceProofUpdate,\\n        Withdraw,\\n        CooperativeSettle,\\n        IOU,\\n        MSReward\\n    }\\n}\\n\",\"keccak256\":\"0xe4a3d54220ba19024c03fac9f8b3338245f2c4aa266627e6cdb5e97a2adcdee4\",\"license\":\"MIT\"},\"data/source/lib/TokenNetworkUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable indentation */\\npragma solidity 0.7.6;\\n\\nimport \\\"./ECVerify.sol\\\";\\nimport \\\"./MessageType.sol\\\";\\n\\nlibrary TokenNetworkUtils {\\n    string internal constant signature_prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n\\\";\\n\\n    function getMaxPossibleReceivableAmount(\\n        uint256 participant1_deposit,\\n        uint256 participant1_withdrawn,\\n        uint256 participant1_transferred,\\n        uint256 participant1_locked,\\n        uint256 participant2_deposit,\\n        uint256 participant2_withdrawn,\\n        uint256 participant2_transferred,\\n        uint256 participant2_locked\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 participant1_max_transferred;\\n        uint256 participant2_max_transferred;\\n        uint256 participant1_net_max_received;\\n        uint256 participant1_max_amount;\\n\\n        // This is the maximum possible amount that participant1 could transfer\\n        // to participant2, if all the pending lock secrets have been\\n        // registered\\n        participant1_max_transferred = failsafe_addition(\\n            participant1_transferred,\\n            participant1_locked\\n        );\\n\\n        // This is the maximum possible amount that participant2 could transfer\\n        // to participant1, if all the pending lock secrets have been\\n        // registered\\n        participant2_max_transferred = failsafe_addition(\\n            participant2_transferred,\\n            participant2_locked\\n        );\\n\\n        // We enforce this check artificially, in order to get rid of hard\\n        // to deal with over/underflows. Settlement balance calculation is\\n        // symmetric (we can calculate either RmaxP1 and RmaxP2 first, order does\\n        // not affect result). This means settleChannel must be called with\\n        // ordered values.\\n        require(participant2_max_transferred >= participant1_max_transferred, \\\"TNU: transfers not ordered\\\");\\n\\n        assert(participant1_max_transferred >= participant1_transferred);\\n        assert(participant2_max_transferred >= participant2_transferred);\\n\\n        // This is the maximum amount that participant1 can receive at settlement time\\n        participant1_net_max_received = (\\n            participant2_max_transferred -\\n            participant1_max_transferred\\n        );\\n\\n        // Next, we add the participant1's deposit and subtract the already\\n        // withdrawn amount\\n        participant1_max_amount = failsafe_addition(\\n            participant1_net_max_received,\\n            participant1_deposit\\n        );\\n\\n        // Subtract already withdrawn amount\\n        (participant1_max_amount, ) = failsafe_subtract(\\n            participant1_max_amount,\\n            participant1_withdrawn\\n        );\\n        return participant1_max_amount;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        return a > b ? b : a;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        return a > b ? a : b;\\n    }\\n\\n    /// @dev Special subtraction function that does not fail when underflowing.\\n    /// @param a Minuend\\n    /// @param b Subtrahend\\n    /// @return Minimum between the result of the subtraction and 0, the maximum\\n    /// subtrahend for which no underflow occurs\\n    function failsafe_subtract(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        return a > b ? (a - b, b) : (0, a);\\n    }\\n\\n    /// @dev Special addition function that does not fail when overflowing.\\n    /// @param a Addend\\n    /// @param b Addend\\n    /// @return Maximum between the result of the addition or the maximum\\n    /// uint256 value\\n    function failsafe_addition(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 MAX_SAFE_UINT256 = (\\n            115792089237316195423570985008687907853269984665640564039457584007913129639935\\n        );\\n        uint256 sum = a + b;\\n        return sum >= a ? sum : MAX_SAFE_UINT256;\\n    }\\n\\n    function recoverAddressFromBalanceProof(\\n        uint256 chain_id,\\n        uint256 channel_identifier,\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes memory signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 32 + 32 + 32\\n        string memory message_length = \\\"212\\\";\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(MessageType.MessageTypeId.BalanceProof),\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, signature);\\n    }\\n\\n    function recoverAddressFromBalanceProofCounterSignature(\\n        MessageType.MessageTypeId message_type_id,\\n        uint256 chain_id,\\n        uint256 channel_identifier,\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes memory closing_signature,\\n        bytes memory non_closing_signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 32 + 32 + 32 + 65\\n        string memory message_length = \\\"277\\\";\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(message_type_id),\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            closing_signature\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, non_closing_signature);\\n    }\\n\\n    /* function recoverAddressFromCooperativeSettleSignature(\\n        uint256 channel_identifier,\\n        address participant1,\\n        uint256 participant1_balance,\\n        address participant2,\\n        uint256 participant2_balance,\\n        bytes signature\\n    )\\n        view\\n        internal\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 20 + 32 + 20 + 32\\n        string memory message_length = '220';\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(MessageTypeId.CooperativeSettle),\\n            channel_identifier,\\n            participant1,\\n            participant1_balance,\\n            participant2,\\n            participant2_balance\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, signature);\\n    } */\\n\\n    function recoverAddressFromWithdrawMessage(\\n        uint256 chain_id,\\n        uint256 channel_identifier,\\n        address participant,\\n        uint256 total_withdraw,\\n        uint256 expiration_block,\\n        bytes memory signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 20 + 32 + 32\\n        string memory message_length = \\\"200\\\";\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(MessageType.MessageTypeId.Withdraw),\\n            channel_identifier,\\n            participant,\\n            total_withdraw,\\n            expiration_block\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, signature);\\n    }\\n}\\n\",\"keccak256\":\"0x115640f1f605878e1d55e5e5e3c3e0f24e55eb435d8e618405d4bf2f14a99f59\",\"license\":\"MIT\"}},\"version\":1}"
        },
        "UserDeposit": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_token_address",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_whole_balance_limit",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "newBalance",
                  "type": "uint256"
                }
              ],
              "name": "BalanceReduced",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "withdrawer",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "plannedBalance",
                  "type": "uint256"
                }
              ],
              "name": "WithdrawPlanned",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "balances",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "contract_address",
                  "type": "address"
                }
              ],
              "name": "contractExists",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "new_total_deposit",
                  "type": "uint256"
                }
              ],
              "name": "deposit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "effectiveBalance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "remaining_balance",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_msc_address",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_one_to_n_address",
                  "type": "address"
                }
              ],
              "name": "init",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "msc_address",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "one_to_n_address",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "planWithdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "token",
              "outputs": [
                {
                  "internalType": "contract Token",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "total_deposit",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "success",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "whole_balance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "whole_balance_limit",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "withdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "withdraw_delay",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "withdraw_plans",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdraw_block",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "bin": "",
          "bin-runtime": "6080604052348015610019576000806100166111dc565b50505b50600436106100d95760003560e01c8063145ccb0f146100e757806316a398f71461010f57806325fc2ccf1461015057806327e235e3146101585780632e1a7d4d146101875780633e90af50146101ad57806347e7ef24146101f45780637709bc78146102295780638fd066e01461026c578063b0a05a2e14610274578063beabacc814610298578063d54b10e3146102d7578063d635f2ee146102df578063d7a2729a1461030e578063f09a401614610316578063fc0c546a1461034d575b6000806100e46111dc565b50505b61010d60048036036020811015610106576000806101036111dc565b50505b5035610355565b005b61013e6004803603602081101561012e5760008061012b6111dc565b50505b50356001600160a01b0316610519565b60405190815260200160405180910390f35b61013e6105a1565b61013e60048036036020811015610177576000806101746111dc565b50505b50356001600160a01b03166105a6565b61010d600480360360208110156101a6576000806101a36111dc565b50505b50356105c1565b6101dc600480360360208110156101cc576000806101c96111dc565b50505b50356001600160a01b03166109c3565b60405191825260208201526040908101905180910390f35b61010d60048036036040811015610213576000806102106111dc565b50505b506001600160a01b0381351690602001356109ee565b61025860048036036020811015610248576000806102456111dc565b50505b50356001600160a01b0316610cb7565b604051901515815260200160405180910390f35b61013e610ccc565b61027c610cd6565b6040516001600160a01b03909116815260200160405180910390f35b610258600480360360608110156102b7576000806102b46111dc565b50505b506001600160a01b03813581169160208101359091169060400135610cf5565b61027c610f12565b61013e600480360360208110156102fe576000806102fb6111dc565b50505b50356001600160a01b0316610f1e565b61013e610f36565b61010d60048036036040811015610335576000806103326111dc565b50505b506001600160a01b0381358116916020013516610f40565b61027c6111b7565b600081116103a55760405162461bcd60e51b815260206004820152601060248201526f7769746864726177696e67207a65726f60801b6044820152606401604051809103906103a26111dc565b50505b80600460005a6103b3611247565b6001600160a01b03166001600160a01b031681526020019081526020016000206103db61129c565b101561042d5760405162461bcd60e51b81526020600482015260146024820152730eed2e8d0c8e4c2eed2dcce40e8dede40daeac6d60631b60448201526064016040518091039061042a6111dc565b50505b604051806040016040528082815260200160645a6104496112e8565b019052600560005a610459611247565b6001600160a01b03166001600160a01b0316815260200190815260200160002081518161048461132e565b505060208201518160010161049761132e565b505050505a6104a4611247565b6001600160a01b03167f1d6ecaf99b9d2150d4774c1ea17e3a04631acbfe71d58d2e9c7abbbc4561e03982600460005a6104dc611247565b6001600160a01b03166001600160a01b0316815260200190815260200160002061050461129c565b0360405190815260200160405180910390a250565b6001600160a01b0381166000908152600560205280604081206001600160a01b038416600090815260046020529091506040902061055561129c565b8161055e61129c565b111561056e57600091505061059c565b8061057761129c565b6001600160a01b038416600090815260046020526040902061059761129c565b039150505b919050565b606481565b600460205280600052604060002090506105be61129c565b81565b6000600560005a6105d0611247565b6001600160a01b03166001600160a01b031681526020019081526020016000209050806105fb61129c565b8211156106575760405162461bcd60e51b815260206004820152601d60248201527f7769746864726177696e67206d6f7265207468616e20706c616e6e65640000006044820152606401604051809103906106546111dc565b50505b5a6106606112e8565b8160010161066c61129c565b11156106bf5760405162461bcd60e51b81526020600482015260156024820152747769746864726177696e6720746f6f206561726c7960581b6044820152606401604051809103906106bc6111dc565b50505b60006106ff83600460005a6106d2611247565b6001600160a01b03166001600160a01b031681526020019081526020016000206106fa61129c565b6111c2565b905080600460005a61070f611247565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828261073b61129c565b03925050819061074961132e565b505050600661075661129c565b81600661076161129c565b0311156107ba5760405162461bcd60e51b815260206004820152601a602482015279756e646572666c6f7720696e2077686f6c655f62616c616e636560301b6044820152606401604051809103906107b76111dc565b50505b806006600082826107c961129c565b0392505081906107d761132e565b5050505a6107e3611247565b6001600160a01b03166000805160206114b4833981519152600460005a610808611247565b6001600160a01b03166001600160a01b0316815260200190815260200160002061083061129c565b60405190815260200160405180910390a2600560005a61084e611247565b6001600160a01b03166001600160a01b031681526020019081526020016000206000808261087a61132e565b50506001820160009061088b61132e565b5050505060008061089a61129c565b906101000a90046001600160a01b03166001600160a01b031663a9059cbb5a6108c1611247565b836040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000878061090361137c565b158015610918576000806109156111dc565b50505b505a6109226113c8565b505050505050158015610942573d6000803e3d600061093f6111dc565b50505b505050506040513d60208110156109615760008061095e6111dc565b50505b81019080805192506109be9150505760405162461bcd60e51b81526020600482015260166024820152753a37b5b2b739903234b23713ba103a3930b739b332b960511b6044820152606401604051809103906109bb6111dc565b50505b505050565b60056020528060005260406000209050806109dc61129c565b90806001016109e961129c565b905082565b6001600160a01b0382166000908152600360205260409020610a0e61129c565b8111610a625760405162461bcd60e51b81526020600482015260166024820152756465706f736974206e6f7420696e6372656173696e6760501b604482015260640160405180910390610a5f6111dc565b50505b6001600160a01b0382166000908152600360205260408120610a8261129c565b6001600160a01b03841660009081526004602052908303915081906040902060008282610aad61129c565b019250508190610abb61132e565b5050506001600160a01b0383166000908152600360205281906040902060008282610ae461129c565b019250508190610af261132e565b5050506006610aff61129c565b816006610b0a61129c565b011015610b5c5760405162461bcd60e51b81526020600482015260136024820152721bdd995c999b1bddda5b99c819195c1bdcda5d606a1b604482015260640160405180910390610b596111dc565b50505b80600660008282610b6b61129c565b019250508190610b7961132e565b5050506007610b8661129c565b6006610b9061129c565b1115610bde5760405162461bcd60e51b815260206004820152601060248201526f1d1bdbc81b5d58da0819195c1bdcda5d60821b604482015260640160405180910390610bdb6111dc565b50505b600080610be961129c565b906101000a90046001600160a01b03166001600160a01b03166323b872dd5a610c10611247565b5a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015610c6657600082820152602001610c4f565b505050846040516001600160e01b031960e086901b1681526001600160a01b03938416600482015291909216602482015260448101919091526064016020604051808303816000878061090361137c565b60008082610cc361137c565b15159392505050565b60066105be61129c565b60006002610ce261129c565b906101000a90046001600160a01b031681565b6000806001610d0261129c565b906101000a90046001600160a01b03166001600160a01b03165a610d24611247565b6001600160a01b03161480610d6d575060006002610d4061129c565b906101000a90046001600160a01b03166001600160a01b03165a610d62611247565b6001600160a01b0316145b610db75760405162461bcd60e51b815260206004820152600e60248201526d3ab735b737bbb71031b0b63632b960911b604482015260640160405180910390610db46111dc565b50505b826001600160a01b0316846001600160a01b03161415610e1b5760405162461bcd60e51b815260206004820152601260248201527139b2b73232b9101e9e903932b1b2b4bb32b960711b604482015260640160405180910390610e186111dc565b50505b6001600160a01b03841660009081526004602052829060409020610e3d61129c565b10158015610e4b5750600082115b15610f07576001600160a01b0384166000908152600460205282906040902060008282610e7661129c565b039250508190610e8461132e565b5050506001600160a01b0383166000908152600460205282906040902060008282610ead61129c565b019250508190610ebb61132e565b5050506001600160a01b038416600081815260046020526000805160206114b48339815191529060409020610eee61129c565b60405190815260200160405180910390a2506001610f0b565b5060005b9392505050565b60006001610ce261129c565b600360205280600052604060002090506105be61129c565b60076105be61129c565b6000806001610f4d61129c565b906101000a90046001600160a01b03166001600160a01b0316148015610f9657506000806002610f7b61129c565b906101000a90046001600160a01b03166001600160a01b0316145b610fe55760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015260640160405180910390610fe26111dc565b50505b6001600160a01b0382166110465760405162461bcd60e51b815260206004820152601b60248201527a4d5320636f6e74726163742061742061646472657373207a65726f60281b6044820152606401604051809103906110436111dc565b50505b61104f82610cb7565b6110a25760405162461bcd60e51b81526020600482015260176024820152764d5320636f6e747261637420686173206e6f20636f646560481b60448201526064016040518091039061109f6111dc565b50505b81600180806110af61129c565b816001600160a01b0302191690836001600160a01b03160217906110d161132e565b5050506001600160a01b0381166111305760405162461bcd60e51b81526020600482015260166024820152754f6e65546f4e2061742061646472657373207a65726f60501b60448201526064016040518091039061112d6111dc565b50505b61113981610cb7565b6111875760405162461bcd60e51b81526020600482015260126024820152714f6e65546f4e20686173206e6f20636f646560701b6044820152606401604051809103906111846111dc565b50505b80600260018161119561129c565b816001600160a01b0302191690836001600160a01b03160217906109bb61132e565b600080610ce261129c565b60008183116111d157826111d3565b815b90505b92915050565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156112145780860151828201604001526020016111f9565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b60408110156109be57600082820152602001611285565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020611285565b635a98c361598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020611285565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020611285565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020611285565b6385979f76598160e01b81526113f9565b80808311156111d6575090919050565b80808310156111d6575090919050565b836004820152846024820152606060448201528760648201526084810160005b89811015611431578089015182820152602001611419565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af150596114868e3d6113e9565b8d0161149281876113d9565b5b828110156114a75760008152602001611493565b50929d5050505050505056fe2e9bf8d4a8402929da26de77a79494626b184ddae2e3e0c076d6dfa10cd2a1d9",
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_whole_balance_limit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"BalanceReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plannedBalance\",\"type\":\"uint256\"}],\"name\":\"WithdrawPlanned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"new_total_deposit\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"effectiveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_msc_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_one_to_n_address\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msc_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"one_to_n_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"planWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"total_deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whole_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whole_balance_limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdraw_plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw_block\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_token_address\":\"The address of the token to use for rewards\"}},\"contractExists(address)\":{\"params\":{\"contract_address\":\"The address to check whether a contract is deployed or not\"},\"returns\":{\"_0\":\"True if a contract exists, false otherwise\"}},\"deposit(address,uint256)\":{\"params\":{\"beneficiary\":\"The account benefiting from the deposit\",\"new_total_deposit\":\"The total sum of tokens that have been deposited by the user by calling this function.\"}},\"effectiveBalance(address)\":{\"params\":{\"owner\":\"Address for which the balance should be returned\"},\"returns\":{\"remaining_balance\":\"The remaining balance after planned withdrawals\"}},\"init(address,address)\":{\"params\":{\"_msc_address\":\"Address of the MonitoringService contract\",\"_one_to_n_address\":\"Address of the OneToN contract\"}},\"planWithdraw(uint256)\":{\"params\":{\"amount\":\"Maximum amount of tokens to be withdrawn\"}},\"transfer(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens to be transferred\",\"receiver\":\"Account to which the amount will be credited\",\"sender\":\"Account from which the amount will be deducted\"},\"returns\":{\"success\":\"true if transfer has been done successfully, otherwise false\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"Amount of tokens to be withdrawn\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Set the default values for the smart contract\"},\"contractExists(address)\":{\"notice\":\"Check if a contract exists\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit tokens. The amount of transferred tokens will be `new_total_deposit - total_deposit[beneficiary]`. This makes the function behavior predictable and idempotent. Can be called several times and on behalf of other accounts.\"},\"effectiveBalance(address)\":{\"notice\":\"The owner's balance with planned withdrawals deducted\"},\"init(address,address)\":{\"notice\":\"Specify trusted contracts. This has to be done outside of the constructor to avoid cyclic dependencies.\"},\"planWithdraw(uint256)\":{\"notice\":\"Announce intention to withdraw tokens. Sets the planned withdraw amount and resets the withdraw_block. There is only one planned withdrawal at a time, the old one gets overwritten.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Internally transfer deposits between two addresses. Sender and receiver must be different or the transaction will fail.\"},\"withdraw(uint256)\":{\"notice\":\"Execute a planned withdrawal Will only work after the withdraw_delay has expired. An amount lower or equal to the planned amount may be withdrawn. Removes the withdraw plan even if not the full amount has been withdrawn.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/services/UserDeposit.sol\":\"UserDeposit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/raiden/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface Token {\\n\\n    /// @return supply total amount of tokens\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return balance The balance\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return success Whether the approval was successful or not\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return remaining Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    // Optionally implemented function to show the number of decimals for the token\\n    function decimals() external view returns (uint8 decimals);\\n}\\n\",\"keccak256\":\"0x5a8ccb9fa426228d9e213164f22a94b0ac57f1aa15ab76ce88a96177edd7b0b3\",\"license\":\"MIT\"},\"data/source/raiden/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @title Utils\\n/// @notice Utils contract for various helpers used by the Raiden Network smart\\n/// contracts.\\ncontract Utils {\\n    /// @notice Check if a contract exists\\n    /// @param contract_address The address to check whether a contract is\\n    /// deployed or not\\n    /// @return True if a contract exists, false otherwise\\n    function contractExists(address contract_address) public view returns (bool) {\\n        uint size;\\n\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            size := extcodesize(contract_address)\\n        }\\n\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x3fb4df9cdadd3711bffff81a451868c7a1ee8a2f3ff1a20a4343def15cb38e0f\",\"license\":\"MIT\"},\"data/source/services/UserDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"../raiden/Token.sol\\\";\\nimport \\\"../raiden/Utils.sol\\\";\\n\\ncontract UserDeposit is Utils {\\n    uint constant public withdraw_delay = 100;  // time before withdraw is allowed in blocks\\n\\n    // Token to be used for the deposit\\n    Token public token;\\n\\n    // Trusted contracts (can execute `transfer`)\\n    address public msc_address;\\n    address public one_to_n_address;\\n\\n    // Total amount of tokens that have been deposited. This is monotonous and\\n    // doing a transfer or withdrawing tokens will not decrease total_deposit!\\n    mapping(address => uint256) public total_deposit;\\n    // Current user's balance, ignoring planned withdraws\\n    mapping(address => uint256) public balances;\\n    mapping(address => WithdrawPlan) public withdraw_plans;\\n\\n    // The sum of all balances\\n    uint256 public whole_balance = 0;\\n    // Deposit limit for this whole contract\\n    uint256 public whole_balance_limit;\\n\\n    /*\\n     *  Structs\\n     */\\n    struct WithdrawPlan {\\n        uint256 amount;\\n        uint256 withdraw_block;  // earliest block at which withdraw is allowed\\n    }\\n\\n    /*\\n     *  Events\\n     */\\n\\n    event BalanceReduced(address indexed owner, uint newBalance);\\n    event WithdrawPlanned(address indexed withdrawer, uint plannedBalance);\\n\\n    /*\\n     *  Modifiers\\n     */\\n\\n    modifier canTransfer() {\\n        require(msg.sender == msc_address || msg.sender == one_to_n_address, \\\"unknown caller\\\");\\n        _;\\n    }\\n\\n    /*\\n     *  Constructor\\n     */\\n\\n    /// @notice Set the default values for the smart contract\\n    /// @param _token_address The address of the token to use for rewards\\n    constructor(address _token_address, uint256 _whole_balance_limit)\\n    {\\n        // check token contract\\n        require(_token_address != address(0x0), \\\"token at address zero\\\");\\n        require(contractExists(_token_address), \\\"token has no code\\\");\\n        token = Token(_token_address);\\n        require(token.totalSupply() > 0, \\\"token has no total supply\\\"); // Check if the contract is indeed a token contract\\n        // check and set the whole balance limit\\n        require(_whole_balance_limit > 0, \\\"whole balance limit is zero\\\");\\n        whole_balance_limit = _whole_balance_limit;\\n    }\\n\\n    /// @notice Specify trusted contracts. This has to be done outside of the\\n    /// constructor to avoid cyclic dependencies.\\n    /// @param _msc_address Address of the MonitoringService contract\\n    /// @param _one_to_n_address Address of the OneToN contract\\n    function init(address _msc_address, address _one_to_n_address)\\n        external\\n    {\\n        // prevent changes of trusted contracts after initialization\\n        require(msc_address == address(0x0) && one_to_n_address == address(0x0), \\\"already initialized\\\");\\n\\n        // check monitoring service contract\\n        require(_msc_address != address(0x0), \\\"MS contract at address zero\\\");\\n        require(contractExists(_msc_address), \\\"MS contract has no code\\\");\\n        msc_address = _msc_address;\\n\\n        // check one to n contract\\n        require(_one_to_n_address != address(0x0), \\\"OneToN at address zero\\\");\\n        require(contractExists(_one_to_n_address), \\\"OneToN has no code\\\");\\n        one_to_n_address = _one_to_n_address;\\n    }\\n\\n    /// @notice Deposit tokens. The amount of transferred tokens will be\\n    /// `new_total_deposit - total_deposit[beneficiary]`. This makes the\\n    /// function behavior predictable and idempotent. Can be called several\\n    /// times and on behalf of other accounts.\\n    /// @param beneficiary The account benefiting from the deposit\\n    /// @param new_total_deposit The total sum of tokens that have been\\n    /// deposited by the user by calling this function.\\n    function deposit(address beneficiary, uint256 new_total_deposit)\\n        external\\n    {\\n        require(new_total_deposit > total_deposit[beneficiary], \\\"deposit not increasing\\\");\\n\\n        // Calculate the actual amount of tokens that will be transferred\\n        uint256 added_deposit = new_total_deposit - total_deposit[beneficiary];\\n\\n        balances[beneficiary] += added_deposit;\\n        total_deposit[beneficiary] += added_deposit;\\n\\n        // Update whole_balance, but take care against overflows.\\n        require(whole_balance + added_deposit >= whole_balance, \\\"overflowing deposit\\\");\\n        whole_balance += added_deposit;\\n\\n        // Decline deposit if the whole balance is bigger than the limit.\\n        require(whole_balance <= whole_balance_limit, \\\"too much deposit\\\");\\n\\n        // Actual transfer.\\n        require(token.transferFrom(msg.sender, address(this), added_deposit), \\\"tokens didn't transfer\\\");\\n    }\\n\\n    /// @notice Internally transfer deposits between two addresses.\\n    /// Sender and receiver must be different or the transaction will fail.\\n    /// @param sender Account from which the amount will be deducted\\n    /// @param receiver Account to which the amount will be credited\\n    /// @param amount Amount of tokens to be transferred\\n    /// @return success true if transfer has been done successfully, otherwise false\\n    function transfer(\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    )\\n        external\\n        canTransfer()\\n        returns (bool success)\\n    {\\n        require(sender != receiver, \\\"sender == receiver\\\");\\n        if (balances[sender] >= amount && amount > 0) {\\n            balances[sender] -= amount;\\n            balances[receiver] += amount;\\n            emit BalanceReduced(sender, balances[sender]);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice Announce intention to withdraw tokens.\\n    /// Sets the planned withdraw amount and resets the withdraw_block.\\n    /// There is only one planned withdrawal at a time, the old one gets overwritten.\\n    /// @param amount Maximum amount of tokens to be withdrawn\\n    function planWithdraw(uint256 amount)\\n        external\\n    {\\n        require(amount > 0, \\\"withdrawing zero\\\");\\n        require(balances[msg.sender] >= amount, \\\"withdrawing too much\\\");\\n\\n        withdraw_plans[msg.sender] = WithdrawPlan({\\n            amount: amount,\\n            withdraw_block: block.number + withdraw_delay\\n        });\\n        emit WithdrawPlanned(msg.sender, balances[msg.sender] - amount);\\n    }\\n\\n    /// @notice Execute a planned withdrawal\\n    /// Will only work after the withdraw_delay has expired.\\n    /// An amount lower or equal to the planned amount may be withdrawn.\\n    /// Removes the withdraw plan even if not the full amount has been\\n    /// withdrawn.\\n    /// @param amount Amount of tokens to be withdrawn\\n    function withdraw(uint256 amount)\\n        external\\n    {\\n        WithdrawPlan storage withdraw_plan = withdraw_plans[msg.sender];\\n        require(amount <= withdraw_plan.amount, \\\"withdrawing more than planned\\\");\\n        require(withdraw_plan.withdraw_block <= block.number, \\\"withdrawing too early\\\");\\n        uint256 withdrawable = min(amount, balances[msg.sender]);\\n        balances[msg.sender] -= withdrawable;\\n\\n        // Update whole_balance, but take care against underflows.\\n        require(whole_balance - withdrawable <= whole_balance, \\\"underflow in whole_balance\\\");\\n        whole_balance -= withdrawable;\\n\\n        emit BalanceReduced(msg.sender, balances[msg.sender]);\\n        delete withdraw_plans[msg.sender];\\n\\n        require(token.transfer(msg.sender, withdrawable), \\\"tokens didn't transfer\\\");\\n    }\\n\\n    /// @notice The owner's balance with planned withdrawals deducted\\n    /// @param owner Address for which the balance should be returned\\n    /// @return remaining_balance The remaining balance after planned withdrawals\\n    function effectiveBalance(address owner)\\n        external\\n        view\\n        returns (uint256 remaining_balance)\\n    {\\n        WithdrawPlan storage withdraw_plan = withdraw_plans[owner];\\n        if (withdraw_plan.amount > balances[owner]) {\\n            return 0;\\n        }\\n        return balances[owner] - withdraw_plan.amount;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        return a > b ? b : a;\\n    }\\n}\\n\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\",\"keccak256\":\"0x070b4f1949eec8099a1bc6e8a91789ba64853074e79b6a272d0bd8cc8f0e3053\",\"license\":\"MIT\"}},\"version\":1}"
        },
        "Utils": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "contract_address",
                  "type": "address"
                }
              ],
              "name": "contractExists",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "bin": "60806040523480156100195760008061001661001f565b50505b5061008a565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561005757808601518282016040015260200161003c565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b610165806100996000396000f3fe60806040523480156100195760008061001661009a565b50505b50600436106100345760003560e01c80637709bc7814610042575b60008061003f61009a565b50505b610071600480360360208110156100615760008061005e61009a565b50505b50356001600160a01b0316610085565b604051901515815260200160405180910390f35b60008082610091610105565b15159392505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156100d25780860151828201604001526020016100b7565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b604081101561016057600082820152602001610149565b50505056",
          "bin-runtime": "60806040523480156100195760008061001661009a565b50505b50600436106100345760003560e01c80637709bc7814610042575b60008061003f61009a565b50505b610071600480360360208110156100615760008061005e61009a565b50505b50356001600160a01b0316610085565b604051901515815260200160405180910390f35b60008082610091610105565b15159392505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156100d25780860151828201604001526020016100b7565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b604081101561016057600082820152602001610149565b50505056",
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"contractExists(address)\":{\"params\":{\"contract_address\":\"The address to check whether a contract is deployed or not\"},\"returns\":{\"_0\":\"True if a contract exists, false otherwise\"}}},\"title\":\"Utils\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contractExists(address)\":{\"notice\":\"Check if a contract exists\"}},\"notice\":\"Utils contract for various helpers used by the Raiden Network smart contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/raiden/Utils.sol\":\"Utils\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/raiden/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @title Utils\\n/// @notice Utils contract for various helpers used by the Raiden Network smart\\n/// contracts.\\ncontract Utils {\\n    /// @notice Check if a contract exists\\n    /// @param contract_address The address to check whether a contract is\\n    /// deployed or not\\n    /// @return True if a contract exists, false otherwise\\n    function contractExists(address contract_address) public view returns (bool) {\\n        uint size;\\n\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            size := extcodesize(contract_address)\\n        }\\n\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x3fb4df9cdadd3711bffff81a451868c7a1ee8a2f3ff1a20a4343def15cb38e0f\",\"license\":\"MIT\"}},\"version\":1}"
        }
    },
    "contracts_checksums": {
      "ECVerify.sol": "4f453c3568d3ab07593b84c5f976123e669dc4315820f8f28ff93b64837194a3", 
      "MessageType.sol": "50a09fad7be0a53dd477429f8bc0a4d38d39b120aad6d74753a8809bbcf09138",
      "TokenNetworkUtils.sol": "aec7b2ca2ede9bf5204d77137f50a4d1338cd03ea1e0d69594e5e140455a5f60", 
      "SecretRegistry.sol": "ef39a3eb7c971e82b3bc9757a0b2eb6d34e84f12fb65cb0a0fe4767c5d1a2c2f", 
      "Token.sol": "d27aea835e95031bb3eeca86d9ffd97594d88b5b94d0c9946b42c0f4ef108bea", 
      "TokenNetwork.sol": "61ef0eee19139756078e3dd7905974f6d554ec50c0a014567c0bf60f6c041aba", 
      "TokenNetworkRegistry.sol": "1ed20e524bce6ff0b48f0d4155adf5a20930bc78618159dd6ed689c2696a8aca", 
      "Utils.sol": "59fdb38e1ca1571b5ffd16f3815eb55742d33fc7232e7872a12a3f5add1554d6", 
      "CustomToken.sol": "64f38ae1679859d986682ba4e8118a45ad5b9becd34d09434c6d79ad1d0fa27d", 
      "StandardToken.sol": "473d94ce8329c7c8ab26be4ae732d706836e52038abe0979e73eddea71ed6ad1", 
      "MonitoringService.sol": "629b78f46575edef82c0bfea3352400fe36f026a0060320fbefcc8bd65efb874", 
      "OneToN.sol": "119beca6bc21a904dac54525f5ef8d5b691a4ce44f40c0d0a83cf46e683f01ce", 
      "ServiceRegistry.sol": "eb341e10519aee79bf40566bf0d5da6586fcd7f1b85f8f6217f247fa2bf7a56d", 
      "UserDeposit.sol": "c28bc569d51492587e06a4af765cfd167cafe1d1d803a18f4d848d74e4a74ed4"
    },
    "contracts_version": "optimism",
    "overall_checksum": "77ef5d92411e96e23eeeb8212c0af3f056b91184e4063c2d073a7d592f9d8578"
}