{
  "address": "0xEBD114D78aCe713DBA75e649eb763Eb9A4DeddaA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_secret_registry_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chain_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_settlement_timeout_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_settlement_timeout_max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max_token_networks",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token_address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token_network_address",
          "type": "address"
        }
      ],
      "name": "TokenNetworkCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "chain_id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_address",
          "type": "address"
        }
      ],
      "name": "contractExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_channel_participant_deposit_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_token_network_deposit_limit",
          "type": "uint256"
        }
      ],
      "name": "createERC20TokenNetwork",
      "outputs": [
        {
          "internalType": "address",
          "name": "token_network_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deprecation_executor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "max_token_networks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secret_registry_address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlement_timeout_max",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlement_timeout_min",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token_network_created",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "token_to_token_networks",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf90926887b3206d35121ef44ba6c006468d5d8f6c8a4393a2549d2481de77b36",
  "receipt": {
    "to": null,
    "from": "0xFb8C3ba8A46014400487f2fB4d539A5Ff7bC367D",
    "contractAddress": "0xEBD114D78aCe713DBA75e649eb763Eb9A4DeddaA",
    "transactionIndex": 0,
    "gasUsed": "6955938",
    "logsBloom": "0x
    "blockHash": "0xf88ffea8de00dfaedd26b7b030c6e6b269364c076da760ff4055dc649997ef09",
    "transactionHash": "0xf90926887b3206d35121ef44ba6c006468d5d8f6c8a4393a2549d2481de77b36",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 115431,
        "transactionHash": "0xf90926887b3206d35121ef44ba6c006468d5d8f6c8a4393a2549d2481de77b36",
        "address": "0x4200000000000000000000000000000000000006",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x000000000000000000000000fb8c3ba8a46014400487f2fb4d539a5ff7bc367d",
          "0x0000000000000000000000004200000000000000000000000000000000000005"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0xf88ffea8de00dfaedd26b7b030c6e6b269364c076da760ff4055dc649997ef09"
      }
    ],
    "blockNumber": 115431,
    "cumulativeGasUsed": "6955938",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3DF0C6eBb360E6485FcFfFa99Deab39Ed789Baf5",
    69,
    20,
    555428,
    "115792089237316195423570985008687907853269984665640564039457584007913129639935"
  ],
  "solcInputHash": "d801cd5192b29c16d8f34c547e4f6dd2",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_secret_registry_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settlement_timeout_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settlement_timeout_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max_token_networks\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token_network_address\",\"type\":\"address\"}],\"name\":\"TokenNetworkCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chain_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_channel_participant_deposit_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token_network_deposit_limit\",\"type\":\"uint256\"}],\"name\":\"createERC20TokenNetwork\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token_network_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecation_executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_token_networks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secret_registry_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlement_timeout_max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlement_timeout_min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_network_created\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"token_to_token_networks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_chain_id\":\"EIP-155 Chain-ID of the chain where this contract is deployed\",\"_max_token_networks\":\"the number of tokens that can be registered MAX_UINT256 means no limits\",\"_secret_registry_address\":\"The address of SecretRegistry that's used by all TokenNetworks created by this contract\",\"_settlement_timeout_max\":\"The longest settlement period (in number of blocks) that can be chosen at the channel opening\",\"_settlement_timeout_min\":\"The shortest settlement period (in number of blocks) that can be chosen at the channel opening\"}},\"contractExists(address)\":{\"params\":{\"contract_address\":\"The address to check whether a contract is deployed or not\"},\"returns\":{\"_0\":\"True if a contract exists, false otherwise\"}},\"createERC20TokenNetwork(address,uint256,uint256)\":{\"params\":{\"_token_address\":\"Ethereum address of an already deployed token, to be used in the new TokenNetwork contract\"}}},\"title\":\"TokenNetworkRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contractExists(address)\":{\"notice\":\"Check if a contract exists\"},\"createERC20TokenNetwork(address,uint256,uint256)\":{\"notice\":\"Deploy a new TokenNetwork contract for the Token deployed at `_token_address`\"}},\"notice\":\"The TokenNetwork Registry deploys new TokenNetwork contracts for the Raiden Network protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/raiden/TokenNetworkRegistry.sol\":\"TokenNetworkRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/lib/ECVerify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nlibrary ECVerify {\\n\\n    function ecverify(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address signature_address)\\n    {\\n        require(signature.length == 65);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // The signature format is a compact form of:\\n        //   {bytes32 r}{bytes32 s}{uint8 v}\\n        // Compact means, uint8 is not padded to 32 bytes.\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n\\n            // Here we are loading the last 32 bytes, including 31 bytes following the signature.\\n            v := byte(0, mload(add(signature, 96)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        require(v == 27 || v == 28);\\n\\n        signature_address = ecrecover(hash, v, r, s);\\n\\n        // ecrecover returns zero on error\\n        require(signature_address != address(0x0));\\n\\n        return signature_address;\\n    }\\n}\\n\",\"keccak256\":\"0xeced41e7578af77042e00fc68e482b754cd355da872bfdda95a0b74e3dbd90e0\",\"license\":\"MIT\"},\"data/source/lib/MessageType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nlibrary MessageType {\\n\\n    enum MessageTypeId {\\n        None,\\n        BalanceProof,\\n        BalanceProofUpdate,\\n        Withdraw,\\n        CooperativeSettle,\\n        IOU,\\n        MSReward\\n    }\\n}\\n\",\"keccak256\":\"0xe4a3d54220ba19024c03fac9f8b3338245f2c4aa266627e6cdb5e97a2adcdee4\",\"license\":\"MIT\"},\"data/source/lib/TokenNetworkUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable indentation */\\npragma solidity 0.7.6;\\n\\nimport \\\"./ECVerify.sol\\\";\\nimport \\\"./MessageType.sol\\\";\\n\\nlibrary TokenNetworkUtils {\\n    string internal constant signature_prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n\\\";\\n\\n    function getMaxPossibleReceivableAmount(\\n        uint256 participant1_deposit,\\n        uint256 participant1_withdrawn,\\n        uint256 participant1_transferred,\\n        uint256 participant1_locked,\\n        uint256 participant2_deposit,\\n        uint256 participant2_withdrawn,\\n        uint256 participant2_transferred,\\n        uint256 participant2_locked\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 participant1_max_transferred;\\n        uint256 participant2_max_transferred;\\n        uint256 participant1_net_max_received;\\n        uint256 participant1_max_amount;\\n\\n        // This is the maximum possible amount that participant1 could transfer\\n        // to participant2, if all the pending lock secrets have been\\n        // registered\\n        participant1_max_transferred = failsafe_addition(\\n            participant1_transferred,\\n            participant1_locked\\n        );\\n\\n        // This is the maximum possible amount that participant2 could transfer\\n        // to participant1, if all the pending lock secrets have been\\n        // registered\\n        participant2_max_transferred = failsafe_addition(\\n            participant2_transferred,\\n            participant2_locked\\n        );\\n\\n        // We enforce this check artificially, in order to get rid of hard\\n        // to deal with over/underflows. Settlement balance calculation is\\n        // symmetric (we can calculate either RmaxP1 and RmaxP2 first, order does\\n        // not affect result). This means settleChannel must be called with\\n        // ordered values.\\n        require(participant2_max_transferred >= participant1_max_transferred, \\\"TNU: transfers not ordered\\\");\\n\\n        assert(participant1_max_transferred >= participant1_transferred);\\n        assert(participant2_max_transferred >= participant2_transferred);\\n\\n        // This is the maximum amount that participant1 can receive at settlement time\\n        participant1_net_max_received = (\\n            participant2_max_transferred -\\n            participant1_max_transferred\\n        );\\n\\n        // Next, we add the participant1's deposit and subtract the already\\n        // withdrawn amount\\n        participant1_max_amount = failsafe_addition(\\n            participant1_net_max_received,\\n            participant1_deposit\\n        );\\n\\n        // Subtract already withdrawn amount\\n        (participant1_max_amount, ) = failsafe_subtract(\\n            participant1_max_amount,\\n            participant1_withdrawn\\n        );\\n        return participant1_max_amount;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        return a > b ? b : a;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        return a > b ? a : b;\\n    }\\n\\n    /// @dev Special subtraction function that does not fail when underflowing.\\n    /// @param a Minuend\\n    /// @param b Subtrahend\\n    /// @return Minimum between the result of the subtraction and 0, the maximum\\n    /// subtrahend for which no underflow occurs\\n    function failsafe_subtract(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        return a > b ? (a - b, b) : (0, a);\\n    }\\n\\n    /// @dev Special addition function that does not fail when overflowing.\\n    /// @param a Addend\\n    /// @param b Addend\\n    /// @return Maximum between the result of the addition or the maximum\\n    /// uint256 value\\n    function failsafe_addition(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 MAX_SAFE_UINT256 = (\\n            115792089237316195423570985008687907853269984665640564039457584007913129639935\\n        );\\n        uint256 sum = a + b;\\n        return sum >= a ? sum : MAX_SAFE_UINT256;\\n    }\\n\\n    function recoverAddressFromBalanceProof(\\n        uint256 chain_id,\\n        uint256 channel_identifier,\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes memory signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 32 + 32 + 32\\n        string memory message_length = \\\"212\\\";\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(MessageType.MessageTypeId.BalanceProof),\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, signature);\\n    }\\n\\n    function recoverAddressFromBalanceProofCounterSignature(\\n        MessageType.MessageTypeId message_type_id,\\n        uint256 chain_id,\\n        uint256 channel_identifier,\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes memory closing_signature,\\n        bytes memory non_closing_signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 32 + 32 + 32 + 65\\n        string memory message_length = \\\"277\\\";\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(message_type_id),\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            closing_signature\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, non_closing_signature);\\n    }\\n\\n    /* function recoverAddressFromCooperativeSettleSignature(\\n        uint256 channel_identifier,\\n        address participant1,\\n        uint256 participant1_balance,\\n        address participant2,\\n        uint256 participant2_balance,\\n        bytes signature\\n    )\\n        view\\n        internal\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 20 + 32 + 20 + 32\\n        string memory message_length = '220';\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(MessageTypeId.CooperativeSettle),\\n            channel_identifier,\\n            participant1,\\n            participant1_balance,\\n            participant2,\\n            participant2_balance\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, signature);\\n    } */\\n\\n    function recoverAddressFromWithdrawMessage(\\n        uint256 chain_id,\\n        uint256 channel_identifier,\\n        address participant,\\n        uint256 total_withdraw,\\n        uint256 expiration_block,\\n        bytes memory signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        // Length of the actual message: 20 + 32 + 32 + 32 + 20 + 32 + 32\\n        string memory message_length = \\\"200\\\";\\n\\n        bytes32 message_hash = keccak256(abi.encodePacked(\\n            signature_prefix,\\n            message_length,\\n            address(this),\\n            chain_id,\\n            uint256(MessageType.MessageTypeId.Withdraw),\\n            channel_identifier,\\n            participant,\\n            total_withdraw,\\n            expiration_block\\n        ));\\n\\n        signature_address = ECVerify.ecverify(message_hash, signature);\\n    }\\n}\\n\",\"keccak256\":\"0x115640f1f605878e1d55e5e5e3c3e0f24e55eb435d8e618405d4bf2f14a99f59\",\"license\":\"MIT\"},\"data/source/raiden/SecretRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @title SecretRegistry\\n/// @notice SecretRegistry contract for registering secrets from Raiden Network\\n/// clients.\\ncontract SecretRegistry {\\n    // sha256(secret) => block number at which the secret was revealed\\n    mapping(bytes32 => uint256) private secrethash_to_block;\\n\\n    event SecretRevealed(bytes32 indexed secrethash, bytes32 secret);\\n\\n    /// @notice Registers a hash time lock secret and saves the block number.\\n    /// This allows the lock to be unlocked after the expiration block\\n    /// @param secret The secret used to lock the hash time lock\\n    /// @return true if secret was registered, false if the secret was already\\n    /// registered\\n    function registerSecret(bytes32 secret) public returns (bool) {\\n        bytes32 secrethash = sha256(abi.encodePacked(secret));\\n        if (secrethash_to_block[secrethash] > 0) {\\n            return false;\\n        }\\n        secrethash_to_block[secrethash] = block.number;\\n        emit SecretRevealed(secrethash, secret);\\n        return true;\\n    }\\n\\n    /// @notice Registers multiple hash time lock secrets and saves the block\\n    /// number\\n    /// @param secrets The array of secrets to be registered\\n    /// @return true if all secrets could be registered, false otherwise\\n    function registerSecretBatch(bytes32[] memory secrets) public returns (bool) {\\n        bool completeSuccess = true;\\n        for(uint i = 0; i < secrets.length; i++) {\\n            if(!registerSecret(secrets[i])) {\\n                completeSuccess = false;\\n            }\\n        }\\n        return completeSuccess;\\n    }\\n\\n    /// @notice Get the stored block number at which the secret was revealed\\n    /// @param secrethash The hash of the registered secret `keccak256(secret)`\\n    /// @return The block number at which the secret was revealed\\n    function getSecretRevealBlockHeight(bytes32 secrethash) public view returns (uint256) {\\n        return secrethash_to_block[secrethash];\\n    }\\n}\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\",\"keccak256\":\"0x828dbf9a344f66cb982df97f677d10942d1b163287b890860be40230b236642e\",\"license\":\"MIT\"},\"data/source/raiden/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface Token {\\n\\n    /// @return supply total amount of tokens\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return balance The balance\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return success Whether the approval was successful or not\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return remaining Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    // Optionally implemented function to show the number of decimals for the token\\n    function decimals() external view returns (uint8 decimals);\\n}\\n\",\"keccak256\":\"0x5a8ccb9fa426228d9e213164f22a94b0ac57f1aa15ab76ce88a96177edd7b0b3\",\"license\":\"MIT\"},\"data/source/raiden/TokenNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\n/* solium-disable indentation */\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../lib/ECVerify.sol\\\";\\nimport \\\"../lib/MessageType.sol\\\";\\nimport \\\"../lib/TokenNetworkUtils.sol\\\";\\nimport \\\"./Token.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"./SecretRegistry.sol\\\";\\n\\n/// @title TokenNetwork\\n/// @notice Stores and manages all the Raiden Network channels that use the\\n/// token specified in this TokenNetwork contract.\\ncontract TokenNetwork is Utils {\\n    // Instance of the token used by the channels\\n    Token public token;\\n\\n    // Instance of SecretRegistry used for storing secrets revealed in a\\n    // mediating transfer.\\n    SecretRegistry public secret_registry;\\n\\n    // Chain ID as specified by EIP155 used in balance proof signatures to\\n    // avoid replay attacks\\n    uint256 public chain_id;\\n\\n    uint256 public settlement_timeout_min;\\n    uint256 public settlement_timeout_max;\\n\\n    uint256 constant public MAX_SAFE_UINT256 = (\\n        115792089237316195423570985008687907853269984665640564039457584007913129639935\\n    );\\n\\n    // The deposit limit per channel per participant.\\n    uint256 public channel_participant_deposit_limit;\\n    // The total combined deposit of all channels across the whole network\\n    uint256 public token_network_deposit_limit;\\n\\n    // Global, monotonically increasing counter that keeps track of all the\\n    // opened channels in this contract\\n    uint256 public channel_counter;\\n\\n    // Only for the limited Red Eyes release\\n    address public deprecation_executor;\\n    bool public safety_deprecation_switch = false;\\n\\n    // channel_identifier => Channel\\n    // channel identifier is the channel_counter value at the time of opening\\n    // the channel\\n    mapping (uint256 => Channel) public channels;\\n\\n    // This is needed to enforce one channel per pair of participants\\n    // The key is keccak256(participant1_address, participant2_address)\\n    mapping (bytes32 => uint256) public participants_hash_to_channel_identifier;\\n\\n    // We keep the unlock data in a separate mapping to allow channel data\\n    // structures to be removed when settling uncooperatively. If there are\\n    // locked pending transfers, we need to store data needed to unlock them at\\n    // a later time.\\n    // The key is `keccak256(uint256 channel_identifier, address participant,\\n    // address partner)` Where `participant` is the participant that sent the\\n    // pending transfers We need `partner` for knowing where to send the\\n    // claimable tokens\\n    mapping(bytes32 => UnlockData) private unlock_identifier_to_unlock_data;\\n\\n    struct Participant {\\n        // Total amount of tokens transferred to this smart contract through\\n        // the `setTotalDeposit` function, for a specific channel, in the\\n        // participant's benefit.\\n        // This is a strictly monotonic value. Note that direct token transfer\\n        // into the contract cannot be tracked and will be stuck.\\n        uint256 deposit;\\n\\n        // Total amount of tokens withdrawn by the participant during the\\n        // lifecycle of this channel.\\n        // This is a strictly monotonic value.\\n        uint256 withdrawn_amount;\\n\\n        // This is a value set to true after the channel has been closed, only\\n        // if this is the participant who closed the channel.\\n        bool is_the_closer;\\n\\n        // keccak256 of the balance data provided after a closeChannel or an\\n        // updateNonClosingBalanceProof call\\n        bytes32 balance_hash;\\n\\n        // Monotonically increasing counter of the off-chain transfers,\\n        // provided along with the balance_hash\\n        uint256 nonce;\\n    }\\n\\n    enum ChannelState {\\n        NonExistent, // 0\\n        Opened,      // 1\\n        Closed,      // 2\\n        Settled,     // 3; Note: The channel has at least one pending unlock\\n        Removed      // 4; Note: Channel data is removed, there are no pending unlocks\\n    }\\n\\n    struct Channel {\\n        // After opening the channel this value represents the settlement\\n        // window. This is the number of blocks that need to be mined between\\n        // closing the channel uncooperatively and settling the channel.\\n        // After the channel has been uncooperatively closed, this value\\n        // represents the block number after which settleChannel can be called.\\n        uint256 settle_block_number;\\n\\n        ChannelState state;\\n\\n        mapping(address => Participant) participants;\\n    }\\n\\n    struct SettlementData {\\n        uint256 deposit;\\n        uint256 withdrawn;\\n        uint256 transferred;\\n        uint256 locked;\\n    }\\n\\n    struct UnlockData {\\n        // keccak256 hash of the pending locks from the Raiden client\\n        bytes32 locksroot;\\n        // Total amount of tokens locked in the pending locks corresponding\\n        // to the `locksroot`\\n        uint256 locked_amount;\\n    }\\n\\n    struct SettleInput {\\n        address participant;\\n        uint256 transferred_amount;\\n        uint256 locked_amount;\\n        bytes32 locksroot;\\n    }\\n\\n    event ChannelOpened(\\n        uint256 indexed channel_identifier,\\n        address indexed participant1,\\n        address indexed participant2,\\n        uint256 settle_timeout\\n    );\\n\\n    event ChannelNewDeposit(\\n        uint256 indexed channel_identifier,\\n        address indexed participant,\\n        uint256 total_deposit\\n    );\\n\\n    // Fires when the deprecation_switch's value changes\\n    event DeprecationSwitch(bool new_value);\\n\\n    // total_withdraw is how much the participant has withdrawn during the\\n    // lifetime of the channel. The actual amount which the participant withdrew\\n    // is `total_withdraw - total_withdraw_from_previous_event_or_zero`\\n    event ChannelWithdraw(\\n        uint256 indexed channel_identifier,\\n        address indexed participant,\\n        uint256 total_withdraw\\n    );\\n\\n    event ChannelClosed(\\n        uint256 indexed channel_identifier,\\n        address indexed closing_participant,\\n        uint256 indexed nonce,\\n        bytes32 balance_hash\\n    );\\n\\n    event ChannelUnlocked(\\n        uint256 indexed channel_identifier,\\n        address indexed receiver,\\n        address indexed sender,\\n        bytes32 locksroot,\\n        uint256 unlocked_amount,\\n        uint256 returned_tokens\\n    );\\n\\n    event NonClosingBalanceProofUpdated(\\n        uint256 indexed channel_identifier,\\n        address indexed closing_participant,\\n        uint256 indexed nonce,\\n        bytes32 balance_hash\\n    );\\n\\n    event ChannelSettled(\\n        uint256 indexed channel_identifier,\\n        uint256 participant1_amount,\\n        bytes32 participant1_locksroot,\\n        uint256 participant2_amount,\\n        bytes32 participant2_locksroot\\n    );\\n\\n    modifier onlyDeprecationExecutor() {\\n        require(msg.sender == deprecation_executor);\\n        _;\\n    }\\n\\n    modifier isSafe() {\\n        require(safety_deprecation_switch == false);\\n        _;\\n    }\\n\\n    modifier isOpen(uint256 channel_identifier) {\\n        require(channels[channel_identifier].state == ChannelState.Opened);\\n        _;\\n    }\\n\\n    modifier settleTimeoutValid(uint256 timeout) {\\n        require(timeout >= settlement_timeout_min);\\n        require(timeout <= settlement_timeout_max);\\n        _;\\n    }\\n\\n    /// @param _token_address The address of the ERC20 token contract\\n    /// @param _secret_registry The address of SecretRegistry contract that witnesses the onchain secret reveals\\n    /// @param _chain_id EIP-155 Chain ID of the blockchain where this instance is being deployed\\n    /// @param _settlement_timeout_min The shortest settlement period (in number of blocks)\\n    /// that can be chosen at the channel opening\\n    /// @param _settlement_timeout_max The longest settlement period (in number of blocks)\\n    /// that can be chosen at the channel opening\\n    /// @param _deprecation_executor The Ethereum address that can disable new deposits and channel creation\\n    /// @param _channel_participant_deposit_limit The maximum amount of tokens that can be deposited by each\\n    /// participant of each channel. MAX_SAFE_UINT256 means no limits\\n    /// @param _token_network_deposit_limit The maximum amount of tokens that this contract can hold\\n    /// MAX_SAFE_UINT256 means no limits\\n    constructor(\\n        address _token_address,\\n        address _secret_registry,\\n        uint256 _chain_id,\\n        uint256 _settlement_timeout_min,\\n        uint256 _settlement_timeout_max,\\n        address _deprecation_executor,\\n        uint256 _channel_participant_deposit_limit,\\n        uint256 _token_network_deposit_limit\\n    ) {\\n        require(_token_address != address(0x0));\\n        require(_secret_registry != address(0x0));\\n        require(_deprecation_executor != address(0x0));\\n        require(_chain_id > 0);\\n        require(_settlement_timeout_min > 0);\\n        require(_settlement_timeout_max > _settlement_timeout_min);\\n        require(contractExists(_token_address));\\n        require(contractExists(_secret_registry));\\n        require(_channel_participant_deposit_limit > 0);\\n        require(_token_network_deposit_limit > 0);\\n        require(_token_network_deposit_limit >= _channel_participant_deposit_limit);\\n\\n        token = Token(_token_address);\\n\\n        secret_registry = SecretRegistry(_secret_registry);\\n        chain_id = _chain_id;\\n        settlement_timeout_min = _settlement_timeout_min;\\n        settlement_timeout_max = _settlement_timeout_max;\\n\\n        // Make sure the contract is indeed a token contract\\n        require(token.totalSupply() > 0);\\n\\n        deprecation_executor = _deprecation_executor;\\n        channel_participant_deposit_limit = _channel_participant_deposit_limit;\\n        token_network_deposit_limit = _token_network_deposit_limit;\\n    }\\n\\n    function deprecate() public isSafe onlyDeprecationExecutor {\\n        safety_deprecation_switch = true;\\n        emit DeprecationSwitch(safety_deprecation_switch);\\n    }\\n\\n    /// @notice Opens a new channel between `participant1` and `participant2`.\\n    /// Can be called by anyone\\n    /// @param participant1 Ethereum address of a channel participant\\n    /// @param participant2 Ethereum address of the other channel participant\\n    /// @param settle_timeout Number of blocks that need to be mined between a\\n    /// call to closeChannel and settleChannel\\n    function openChannel(address participant1, address participant2, uint256 settle_timeout)\\n        public\\n        isSafe\\n        settleTimeoutValid(settle_timeout)\\n        returns (uint256)\\n    {\\n        bytes32 pair_hash;\\n        uint256 channel_identifier;\\n\\n        // Red Eyes release token network limit\\n        require(token.balanceOf(address(this)) < token_network_deposit_limit);\\n\\n        // First increment the counter\\n        // There will never be a channel with channel_identifier == 0\\n        channel_counter += 1;\\n        channel_identifier = channel_counter;\\n\\n        pair_hash = getParticipantsHash(participant1, participant2);\\n\\n        // There must only be one channel opened between two participants at\\n        // any moment in time.\\n        require(participants_hash_to_channel_identifier[pair_hash] == 0);\\n        participants_hash_to_channel_identifier[pair_hash] = channel_identifier;\\n\\n        Channel storage channel = channels[channel_identifier];\\n\\n        // We always increase the channel counter, therefore no channel data can already exist,\\n        // corresponding to this channel_identifier. This check must never fail.\\n        assert(channel.settle_block_number == 0);\\n        assert(channel.state == ChannelState.NonExistent);\\n\\n        // Store channel information\\n        channel.settle_block_number = settle_timeout;\\n        channel.state = ChannelState.Opened;\\n\\n        emit ChannelOpened(\\n            channel_identifier,\\n            participant1,\\n            participant2,\\n            settle_timeout\\n        );\\n\\n        return channel_identifier;\\n    }\\n\\n    /// @notice Sets the channel participant total deposit value.\\n    /// Can be called by anyone.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant Channel participant whose deposit is being set\\n    /// @param total_deposit The total amount of tokens that the participant\\n    /// will have as a deposit\\n    /// @param partner Channel partner address, needed to compute the total\\n    /// channel deposit\\n    function setTotalDeposit(\\n        uint256 channel_identifier,\\n        address participant,\\n        uint256 total_deposit,\\n        address partner\\n    )\\n        public\\n        isSafe\\n        isOpen(channel_identifier)\\n    {\\n        require(channel_identifier == getChannelIdentifier(participant, partner));\\n        require(total_deposit > 0);\\n        require(total_deposit <= channel_participant_deposit_limit);\\n\\n        uint256 added_deposit;\\n        uint256 channel_deposit;\\n\\n        Channel storage channel = channels[channel_identifier];\\n        Participant storage participant_state = channel.participants[participant];\\n        Participant storage partner_state = channel.participants[partner];\\n\\n        // Calculate the actual amount of tokens that will be transferred\\n        added_deposit = total_deposit - participant_state.deposit;\\n\\n        // The actual amount of tokens that will be transferred must be > 0\\n        require(added_deposit > 0);\\n\\n        // Underflow check; we use <= because added_deposit == total_deposit for the first deposit\\n\\n        require(added_deposit <= total_deposit);\\n\\n        // This should never fail at this point. Added check for security, because we directly set\\n        // the participant_state.deposit = total_deposit, while we transfer `added_deposit` tokens\\n        assert(participant_state.deposit + added_deposit == total_deposit);\\n\\n        // Red Eyes release token network limit\\n        require(token.balanceOf(address(this)) + added_deposit <= token_network_deposit_limit);\\n\\n        // Update the participant's channel deposit\\n        participant_state.deposit = total_deposit;\\n\\n        // Calculate the entire channel deposit, to avoid overflow\\n        channel_deposit = participant_state.deposit + partner_state.deposit;\\n        // Overflow check\\n        require(channel_deposit >= participant_state.deposit);\\n\\n        emit ChannelNewDeposit(\\n            channel_identifier,\\n            participant,\\n            participant_state.deposit\\n        );\\n\\n        // Do the transfer\\n        require(token.transferFrom(msg.sender, address(this), added_deposit));\\n    }\\n\\n    /// @notice Allows `participant` to withdraw tokens from the channel that he\\n    /// has with `partner`, without closing it. Can be called by anyone. Can\\n    /// only be called once per each signed withdraw message\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant Channel participant, who will receive the withdrawn\\n    /// amount\\n    /// @param total_withdraw Total amount of tokens that are marked as\\n    /// withdrawn from the channel during the channel lifecycle\\n    /// @param participant_signature Participant's signature on the withdraw\\n    /// data\\n    /// @param partner_signature Partner's signature on the withdraw data\\n    function setTotalWithdraw(\\n        uint256 channel_identifier,\\n        address participant,\\n        uint256 total_withdraw,\\n        uint256 expiration_block,\\n        bytes calldata participant_signature,\\n        bytes calldata partner_signature\\n    )\\n        external\\n        isOpen(channel_identifier)\\n    {\\n        uint256 total_deposit;\\n        uint256 current_withdraw;\\n        address partner;\\n\\n        require(total_withdraw > 0);\\n        require(block.number < expiration_block);\\n\\n        // Authenticate both channel partners via their signatures.\\n        // `participant` is a part of the signed message, so given in the calldata.\\n        require(participant == TokenNetworkUtils.recoverAddressFromWithdrawMessage(\\n            chain_id,\\n            channel_identifier,\\n            participant,\\n            total_withdraw,\\n            expiration_block,\\n            participant_signature\\n        ));\\n        partner = TokenNetworkUtils.recoverAddressFromWithdrawMessage(\\n            chain_id,\\n            channel_identifier,\\n            participant,\\n            total_withdraw,\\n            expiration_block,\\n            partner_signature\\n        );\\n\\n        // Validate that authenticated partners and the channel identifier match\\n        require(channel_identifier == getChannelIdentifier(participant, partner));\\n\\n        // Read channel state after validating the function input\\n        Channel storage channel = channels[channel_identifier];\\n        Participant storage participant_state = channel.participants[participant];\\n        Participant storage partner_state = channel.participants[partner];\\n\\n        total_deposit = participant_state.deposit + partner_state.deposit;\\n\\n        // Entire withdrawn amount must not be bigger than the current channel deposit\\n        require((total_withdraw + partner_state.withdrawn_amount) <= total_deposit);\\n        require(total_withdraw <= (total_withdraw + partner_state.withdrawn_amount));\\n\\n        // Using the total_withdraw (monotonically increasing) in the signed\\n        // message ensures that we do not allow replay attack to happen, by\\n        // using the same withdraw proof twice.\\n        // Next two lines enforce the monotonicity of total_withdraw and check for an underflow:\\n        // (we use <= because current_withdraw == total_withdraw for the first withdraw)\\n        current_withdraw = total_withdraw - participant_state.withdrawn_amount;\\n        require(current_withdraw <= total_withdraw);\\n\\n        // The actual amount of tokens that will be transferred must be > 0 to disable the reuse of\\n        // withdraw messages completely.\\n        require(current_withdraw > 0);\\n\\n        // This should never fail at this point. Added check for security, because we directly set\\n        // the participant_state.withdrawn_amount = total_withdraw,\\n        // while we transfer `current_withdraw` tokens.\\n        assert(participant_state.withdrawn_amount + current_withdraw == total_withdraw);\\n\\n        emit ChannelWithdraw(\\n            channel_identifier,\\n            participant,\\n            total_withdraw\\n        );\\n\\n        // Do the state change and tokens transfer\\n        participant_state.withdrawn_amount = total_withdraw;\\n        require(token.transfer(participant, current_withdraw));\\n\\n        // This should never happen, as we have an overflow check in setTotalDeposit\\n        assert(total_deposit >= participant_state.deposit);\\n        assert(total_deposit >= partner_state.deposit);\\n\\n        // A withdraw should never happen if a participant already has a\\n        // balance proof in storage. This should never fail as we use isOpen.\\n        assert(participant_state.nonce == 0);\\n        assert(partner_state.nonce == 0);\\n\\n    }\\n\\n    /// @notice Close the channel defined by the two participant addresses.\\n    /// Anybody can call this function on behalf of a participant (called\\n    /// the closing participant), providing a balance proof signed by\\n    /// both parties. Callable only once\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param closing_participant Channel participant who closes the channel\\n    /// @param non_closing_participant Channel partner of the `closing_participant`,\\n    /// who provided the balance proof\\n    /// @param balance_hash Hash of (transferred_amount, locked_amount,\\n    /// locksroot)\\n    /// @param additional_hash Computed from the message. Used for message\\n    /// authentication\\n    /// @param nonce Strictly monotonic value used to order transfers\\n    /// @param non_closing_signature Non-closing participant's signature of the balance proof data\\n    /// @param closing_signature Closing participant's signature of the balance\\n    /// proof data\\n    function closeChannel(\\n        uint256 channel_identifier,\\n        address non_closing_participant,\\n        address closing_participant,\\n        // The next four arguments form a balance proof.\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes memory non_closing_signature,\\n        bytes memory closing_signature\\n    )\\n        public\\n        isOpen(channel_identifier)\\n    {\\n        require(channel_identifier == getChannelIdentifier(closing_participant, non_closing_participant));\\n\\n        address recovered_non_closing_participant_address;\\n\\n        Channel storage channel = channels[channel_identifier];\\n\\n        channel.state = ChannelState.Closed;\\n        channel.participants[closing_participant].is_the_closer = true;\\n\\n        // This is the block number at which the channel can be settled.\\n        channel.settle_block_number += uint256(block.number);\\n\\n        // The closing participant must have signed the balance proof.\\n        address recovered_closing_participant_address = TokenNetworkUtils.recoverAddressFromBalanceProofCounterSignature(\\n            MessageType.MessageTypeId.BalanceProof,\\n            chain_id,\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            non_closing_signature,\\n            closing_signature\\n        );\\n        require(closing_participant == recovered_closing_participant_address);\\n\\n        // Nonce 0 means that the closer never received a transfer, therefore\\n        // never received a balance proof, or he is intentionally not providing\\n        // the latest transfer, in which case the closing party is going to\\n        // lose the tokens that were transferred to him.\\n        if (nonce > 0) {\\n            recovered_non_closing_participant_address = TokenNetworkUtils.recoverAddressFromBalanceProof(\\n                chain_id,\\n                channel_identifier,\\n                balance_hash,\\n                nonce,\\n                additional_hash,\\n                non_closing_signature\\n            );\\n            // Signature must be from the channel partner\\n            require(non_closing_participant == recovered_non_closing_participant_address);\\n\\n            updateBalanceProofData(\\n                channel,\\n                recovered_non_closing_participant_address,\\n                nonce,\\n                balance_hash\\n            );\\n        }\\n\\n        emit ChannelClosed(channel_identifier, closing_participant, nonce, balance_hash);\\n    }\\n\\n    /// @notice Called on a closed channel, the function allows the non-closing\\n    /// participant to provide the last balance proof, which modifies the\\n    /// closing participant's state. Can be called multiple times by anyone.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param closing_participant Channel participant who closed the channel\\n    /// @param non_closing_participant Channel participant who needs to update\\n    /// the balance proof\\n    /// @param balance_hash Hash of (transferred_amount, locked_amount,\\n    /// locksroot)\\n    /// @param additional_hash Computed from the message. Used for message\\n    /// authentication\\n    /// @param nonce Strictly monotonic value used to order transfers\\n    /// @param closing_signature Closing participant's signature of the balance\\n    /// proof data\\n    /// @param non_closing_signature Non-closing participant signature of the\\n    /// balance proof data\\n    function updateNonClosingBalanceProof(\\n        uint256 channel_identifier,\\n        address closing_participant,\\n        address non_closing_participant,\\n        // The next four arguments form a balance proof\\n        bytes32 balance_hash,\\n        uint256 nonce,\\n        bytes32 additional_hash,\\n        bytes calldata closing_signature,\\n        bytes calldata non_closing_signature\\n    )\\n        external\\n    {\\n        require(channel_identifier == getChannelIdentifier(\\n            closing_participant,\\n            non_closing_participant\\n        ));\\n        require(balance_hash != bytes32(0x0));\\n        require(nonce > 0);\\n\\n        address recovered_non_closing_participant;\\n        address recovered_closing_participant;\\n\\n        Channel storage channel = channels[channel_identifier];\\n\\n        require(channel.state == ChannelState.Closed);\\n\\n        // Calling this function after the settlement window is forbidden to\\n        // fix the following race condition:\\n        //\\n        // 1 A badly configured node A, that doesn't have a monitoring service\\n        //   and is temporarily offline does not call update during the\\n        //   settlement window.\\n        // 2 The well behaved partner B, who called close, sees the\\n        //   settlement window is over and calls settle. At this point the B's\\n        //   balance proofs which should be provided by A is missing, so B will\\n        //   call settle with its balance proof zeroed out.\\n        // 3 A restarts and calls update, which will change B's balance\\n        //   proof.\\n        // 4 At this point, the transactions from 2 and 3 are racing, and one\\n        //   of them will fail.\\n        //\\n        // To avoid the above race condition, which would require special\\n        // handling on both nodes, the call to update is forbidden after the\\n        // settlement window. This does not affect safety, since we assume the\\n        // nodes are always properly configured and have a monitoring service\\n        // available to call update on the user's behalf.\\n        require(channel.settle_block_number >= block.number);\\n\\n        // We need the signature from the non-closing participant to allow\\n        // anyone to make this transaction. E.g. a monitoring service.\\n        recovered_non_closing_participant = TokenNetworkUtils.recoverAddressFromBalanceProofCounterSignature(\\n            MessageType.MessageTypeId.BalanceProofUpdate,\\n            chain_id,\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            closing_signature,\\n            non_closing_signature\\n        );\\n        require(non_closing_participant == recovered_non_closing_participant);\\n\\n        recovered_closing_participant = TokenNetworkUtils.recoverAddressFromBalanceProof(\\n            chain_id,\\n            channel_identifier,\\n            balance_hash,\\n            nonce,\\n            additional_hash,\\n            closing_signature\\n        );\\n        require(closing_participant == recovered_closing_participant);\\n\\n        Participant storage closing_participant_state = channel.participants[closing_participant];\\n        // Make sure the first signature is from the closing participant\\n        require(closing_participant_state.is_the_closer);\\n\\n        // Update the balance proof data for the closing_participant\\n        updateBalanceProofData(channel, closing_participant, nonce, balance_hash);\\n\\n        emit NonClosingBalanceProofUpdated(\\n            channel_identifier,\\n            closing_participant,\\n            nonce,\\n            balance_hash\\n        );\\n    }\\n\\n    /// @notice Settles the balance between the two parties. Note that arguments\\n    /// order counts: `participant1_transferred_amount +\\n    /// participant1_locked_amount` <= `participant2_transferred_amount +\\n    /// participant2_locked_amount`\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant1 Channel participant\\n    /// @param participant1_transferred_amount The latest known amount of tokens\\n    /// transferred from `participant1` to `participant2`\\n    /// @param participant1_locked_amount Amount of tokens owed by\\n    /// `participant1` to `participant2`, contained in locked transfers that\\n    /// will be retrieved by calling `unlock` after the channel is settled\\n    /// @param participant1_locksroot The latest known hash of the\\n    /// pending hash-time locks of `participant1`, used to validate the unlocked\\n    /// proofs. If no balance_hash has been submitted, locksroot is ignored\\n    /// @param participant2 Other channel participant\\n    /// @param participant2_transferred_amount The latest known amount of tokens\\n    /// transferred from `participant2` to `participant1`\\n    /// @param participant2_locked_amount Amount of tokens owed by\\n    /// `participant2` to `participant1`, contained in locked transfers that\\n    /// will be retrieved by calling `unlock` after the channel is settled\\n    /// @param participant2_locksroot The latest known hash of the\\n    /// pending hash-time locks of `participant2`, used to validate the unlocked\\n    /// proofs. If no balance_hash has been submitted, locksroot is ignored\\n    function settleChannel(\\n        uint256 channel_identifier,\\n        address participant1,\\n        uint256 participant1_transferred_amount,\\n        uint256 participant1_locked_amount,\\n        bytes32 participant1_locksroot,\\n        address participant2,\\n        uint256 participant2_transferred_amount,\\n        uint256 participant2_locked_amount,\\n        bytes32 participant2_locksroot\\n    )\\n        public\\n    {\\n        settleChannel2(\\n            channel_identifier,\\n            SettleInput({\\n                participant: participant1,\\n                transferred_amount: participant1_transferred_amount,\\n                locked_amount: participant1_locked_amount,\\n                locksroot: participant1_locksroot\\n            }),\\n            SettleInput({\\n                participant: participant2,\\n                transferred_amount: participant2_transferred_amount,\\n                locked_amount: participant2_locked_amount,\\n                locksroot: participant2_locksroot\\n            })\\n        );\\n    }\\n\\n    function settleChannel2(\\n        uint256 channel_identifier,\\n        SettleInput memory participant1_settlement,\\n        SettleInput memory participant2_settlement\\n    )\\n        public\\n    {\\n        // There are several requirements that this function MUST enforce:\\n        // - it MUST never fail; therefore, any overflows or underflows must be\\n        // handled gracefully\\n        // - it MUST ensure that if participants use the latest valid balance proofs,\\n        // provided by the official Raiden client, the participants will be able\\n        // to receive correct final balances at the end of the channel lifecycle\\n        // - it MUST ensure that the participants cannot cheat by providing an\\n        // old, valid balance proof of their partner; meaning that their partner MUST\\n        // receive at least the amount of tokens that he would have received if\\n        // the latest valid balance proofs are used.\\n        // - the contract cannot determine if a balance proof is invalid (values\\n        // are not within the constraints enforced by the official Raiden client),\\n        // therefore it cannot ensure correctness. Users MUST use the official\\n        // Raiden clients for signing balance proofs.\\n\\n        address participant1 = participant1_settlement.participant;\\n        address participant2 = participant2_settlement.participant;\\n        require(channel_identifier == getChannelIdentifier(participant1, participant2));\\n\\n        bytes32 pair_hash;\\n\\n        pair_hash = getParticipantsHash(participant1, participant2);\\n        Channel storage channel = channels[channel_identifier];\\n\\n        require(channel.state == ChannelState.Closed);\\n\\n        // Settlement window must be over\\n        require(channel.settle_block_number < block.number);\\n\\n        Participant storage participant1_state = channel.participants[participant1];\\n        Participant storage participant2_state = channel.participants[participant2];\\n\\n        require(verifyBalanceHashData(\\n            participant1_state,\\n            participant1_settlement\\n        ));\\n\\n        require(verifyBalanceHashData(\\n            participant2_state,\\n            participant2_settlement\\n        ));\\n\\n        // We are calculating the final token amounts that need to be\\n        // transferred to the participants now and the amount of tokens that\\n        // need to remain locked in the contract. These tokens can be unlocked\\n        // by calling `unlock`.\\n        // participant1_transferred_amount = the amount of tokens that\\n        //   participant1 will receive in this transaction.\\n        // participant2_transferred_amount = the amount of tokens that\\n        //   participant2 will receive in this transaction.\\n        // participant1_locked_amount = the amount of tokens remaining in the\\n        //   contract, representing pending transfers from participant1 to participant2.\\n        // participant2_locked_amount = the amount of tokens remaining in the\\n        //   contract, representing pending transfers from participant2 to participant1.\\n        // We are reusing variables due to the local variables number limit.\\n        // For better readability this can be refactored further.\\n        (\\n            participant1_settlement.transferred_amount,\\n            participant2_settlement.transferred_amount,\\n            participant1_settlement.locked_amount,\\n            participant2_settlement.locked_amount\\n        ) = getSettleTransferAmounts(\\n            participant1_state,\\n            participant1_settlement.transferred_amount,\\n            participant1_settlement.locked_amount,\\n            participant2_state,\\n            participant2_settlement.transferred_amount,\\n            participant2_settlement.locked_amount\\n        );\\n\\n        // Remove the channel data from storage\\n        delete channel.participants[participant1];\\n        delete channel.participants[participant2];\\n        delete channels[channel_identifier];\\n\\n        // Remove the pair's channel counter\\n        delete participants_hash_to_channel_identifier[pair_hash];\\n\\n        // Store balance data needed for `unlock`, including the calculated\\n        // locked amounts remaining in the contract.\\n        storeUnlockData(\\n            channel_identifier,\\n            participant1_settlement,\\n            participant2\\n        );\\n        storeUnlockData(\\n            channel_identifier,\\n            participant2_settlement,\\n            participant1\\n        );\\n\\n        emit ChannelSettled(\\n            channel_identifier,\\n            participant1_settlement.transferred_amount,\\n            participant1_settlement.locksroot,\\n            participant2_settlement.transferred_amount,\\n            participant2_settlement.locksroot\\n        );\\n\\n        // Do the actual token transfers\\n        if (participant1_settlement.transferred_amount > 0) {\\n            require(token.transfer(participant1, participant1_settlement.transferred_amount));\\n        }\\n\\n        if (participant2_settlement.transferred_amount > 0) {\\n            require(token.transfer(participant2, participant2_settlement.transferred_amount));\\n        }\\n    }\\n\\n    /// @notice Unlocks all pending off-chain transfers from `sender` to\\n    /// `receiver` and sends the locked tokens corresponding to locks with\\n    /// secrets registered on-chain to the `receiver`. Locked tokens\\n    /// corresponding to locks where the secret was not revealed on-chain will\\n    /// return to the `sender`. Anyone can call unlock.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param receiver Address who will receive the claimable unlocked\\n    /// tokens\\n    /// @param sender Address who sent the pending transfers and will receive\\n    /// the unclaimable unlocked tokens\\n    /// @param locks All pending locks concatenated in order of creation\\n    /// that `sender` sent to `receiver`\\n    function unlock(\\n        uint256 channel_identifier,\\n        address receiver,\\n        address sender,\\n        bytes memory locks\\n    )\\n        public\\n    {\\n        // Channel represented by channel_identifier must be settled and\\n        // channel data deleted\\n        require(channel_identifier != getChannelIdentifier(receiver, sender));\\n\\n        // After the channel is settled the storage is cleared, therefore the\\n        // value will be NonExistent and not Settled. The value Settled is used\\n        // for the external APIs\\n        require(channels[channel_identifier].state == ChannelState.NonExistent);\\n\\n        bytes32 unlock_key;\\n        bytes32 computed_locksroot;\\n        uint256 unlocked_amount;\\n        uint256 locked_amount;\\n        uint256 returned_tokens;\\n\\n        // Calculate the locksroot for the pending transfers and the amount of\\n        // tokens corresponding to the locked transfers with secrets revealed\\n        // on chain.\\n        (computed_locksroot, unlocked_amount) = getHashAndUnlockedAmount(\\n            locks\\n        );\\n\\n        // The sender must have a non-empty locksroot on-chain that must be\\n        // the same as the computed locksroot.\\n        // Get the amount of tokens that have been left in the contract, to\\n        // account for the pending transfers `sender` -> `receiver`.\\n        unlock_key = getUnlockIdentifier(channel_identifier, sender, receiver);\\n        UnlockData storage unlock_data = unlock_identifier_to_unlock_data[unlock_key];\\n        locked_amount = unlock_data.locked_amount;\\n\\n        // Locksroot must be the same as the computed locksroot\\n        require(unlock_data.locksroot == computed_locksroot);\\n\\n        // There are no pending transfers if the locked_amount is 0.\\n        // Transaction must fail\\n        require(locked_amount > 0);\\n\\n        // Make sure we don't transfer more tokens than previously reserved in\\n        // the smart contract.\\n        unlocked_amount = TokenNetworkUtils.min(unlocked_amount, locked_amount);\\n\\n        // Transfer the rest of the tokens back to the sender\\n        returned_tokens = locked_amount - unlocked_amount;\\n\\n        // Remove sender's unlock data\\n        delete unlock_identifier_to_unlock_data[unlock_key];\\n\\n        emit ChannelUnlocked(\\n            channel_identifier,\\n            receiver,\\n            sender,\\n            computed_locksroot,\\n            unlocked_amount,\\n            returned_tokens\\n        );\\n\\n        // Transfer the unlocked tokens to the receiver. unlocked_amount can\\n        // be 0\\n        if (unlocked_amount > 0) {\\n            require(token.transfer(receiver, unlocked_amount));\\n        }\\n\\n        // Transfer the rest of the tokens back to the sender\\n        if (returned_tokens > 0) {\\n            require(token.transfer(sender, returned_tokens));\\n        }\\n\\n        // At this point, this should always be true\\n        assert(locked_amount >= returned_tokens);\\n        assert(locked_amount >= unlocked_amount);\\n    }\\n\\n    /* /// @notice Cooperatively settles the balances between the two channel\\n    /// participants and transfers the agreed upon token amounts to the\\n    /// participants. After this the channel lifecycle has ended and no more\\n    /// operations can be done on it.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant1_address Address of channel participant\\n    /// @param participant1_balance Amount of tokens that `participant1_address`\\n    /// must receive when the channel is settled and removed\\n    /// @param participant2_address Address of the other channel participant\\n    /// @param participant2_balance Amount of tokens that `participant2_address`\\n    /// must receive when the channel is settled and removed\\n    /// @param participant1_signature Signature of `participant1_address` on the\\n    /// cooperative settle message\\n    /// @param participant2_signature Signature of `participant2_address` on the\\n    /// cooperative settle message\\n    function cooperativeSettle(\\n        uint256 channel_identifier,\\n        address participant1_address,\\n        uint256 participant1_balance,\\n        address participant2_address,\\n        uint256 participant2_balance,\\n        bytes participant1_signature,\\n        bytes participant2_signature\\n    )\\n        public\\n    {\\n        require(channel_identifier == getChannelIdentifier(\\n            participant1_address,\\n            participant2_address\\n        ));\\n        bytes32 pair_hash;\\n        address participant1;\\n        address participant2;\\n        uint256 total_available_deposit;\\n\\n        pair_hash = getParticipantsHash(participant1_address, participant2_address);\\n        Channel storage channel = channels[channel_identifier];\\n\\n        require(channel.state == ChannelState.Opened);\\n\\n        participant1 = TokenNetworkUtils.recoverAddressFromCooperativeSettleSignature(\\n            channel_identifier,\\n            participant1_address,\\n            participant1_balance,\\n            participant2_address,\\n            participant2_balance,\\n            participant1_signature\\n        );\\n        // The provided address must be the same as the recovered one\\n        require(participant1 == participant1_address);\\n\\n        participant2 = TokenNetworkUtils.recoverAddressFromCooperativeSettleSignature(\\n            channel_identifier,\\n            participant1_address,\\n            participant1_balance,\\n            participant2_address,\\n            participant2_balance,\\n            participant2_signature\\n        );\\n        // The provided address must be the same as the recovered one\\n        require(participant2 == participant2_address);\\n\\n        Participant storage participant1_state = channel.participants[participant1];\\n        Participant storage participant2_state = channel.participants[participant2];\\n\\n        total_available_deposit = getChannelAvailableDeposit(\\n            participant1_state,\\n            participant2_state\\n        );\\n        // The sum of the provided balances must be equal to the total\\n        // available deposit\\n        require(total_available_deposit == (participant1_balance + participant2_balance));\\n        // Overflow check for the balances addition from the above check.\\n        // This overflow should never happen if the token.transfer function is implemented\\n        // correctly. We do not control the token implementation, therefore we add this\\n        // check for safety.\\n        require(participant1_balance <= participant1_balance + participant2_balance);\\n\\n        // Remove channel data from storage before doing the token transfers\\n        delete channel.participants[participant1];\\n        delete channel.participants[participant2];\\n        delete channels[channel_identifier];\\n\\n        // Remove the pair's channel counter\\n        delete participants_hash_to_channel_identifier[pair_hash];\\n\\n        emit ChannelSettled(channel_identifier, participant1_balance, participant2_balance);\\n\\n        // Do the token transfers\\n        if (participant1_balance > 0) {\\n            require(token.transfer(participant1, participant1_balance));\\n        }\\n\\n        if (participant2_balance > 0) {\\n            require(token.transfer(participant2, participant2_balance));\\n        }\\n    } */\\n\\n    /// @notice Returns the unique identifier for the channel given by the\\n    /// contract\\n    /// @param participant Address of a channel participant\\n    /// @param partner Address of the other channel participant\\n    /// @return Unique identifier for the channel. It can be 0 if channel does\\n    /// not exist\\n    function getChannelIdentifier(address participant, address partner)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(participant != address(0x0));\\n        require(partner != address(0x0));\\n        require(participant != partner);\\n\\n        bytes32 pair_hash = getParticipantsHash(participant, partner);\\n        return participants_hash_to_channel_identifier[pair_hash];\\n    }\\n\\n    /// @dev Returns the channel specific data.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant1 Address of a channel participant\\n    /// @param participant2 Address of the other channel participant\\n    /// @return Channel settle_block_number and state\\n    /// @notice The contract cannot really distinguish Settled and Removed\\n    /// states, especially when wrong participants are given as input.\\n    /// The contract does not remember the participants of the channel\\n    function getChannelInfo(\\n        uint256 channel_identifier,\\n        address participant1,\\n        address participant2\\n    )\\n        external\\n        view\\n        returns (uint256, ChannelState)\\n    {\\n        bytes32 unlock_key1;\\n        bytes32 unlock_key2;\\n\\n        Channel storage channel = channels[channel_identifier];\\n        ChannelState state = channel.state;  // This must **not** update the storage\\n\\n        if (state == ChannelState.NonExistent &&\\n            channel_identifier > 0 &&\\n            channel_identifier <= channel_counter\\n        ) {\\n            // The channel has been settled, channel data is removed Therefore,\\n            // the channel state in storage is actually `0`, or `NonExistent`\\n            // However, for this view function, we return `Settled`, in order\\n            // to provide a consistent external API\\n            state = ChannelState.Settled;\\n\\n            // We might still have data stored for future unlock operations\\n            // Only if we do not, we can consider the channel as `Removed`\\n            unlock_key1 = getUnlockIdentifier(channel_identifier, participant1, participant2);\\n            UnlockData storage unlock_data1 = unlock_identifier_to_unlock_data[unlock_key1];\\n\\n            unlock_key2 = getUnlockIdentifier(channel_identifier, participant2, participant1);\\n            UnlockData storage unlock_data2 = unlock_identifier_to_unlock_data[unlock_key2];\\n\\n            if (unlock_data1.locked_amount == 0 && unlock_data2.locked_amount == 0) {\\n                state = ChannelState.Removed;\\n            }\\n        }\\n\\n        return (\\n            channel.settle_block_number,\\n            state\\n        );\\n    }\\n\\n    /// @dev Returns the channel specific data.\\n    /// @param channel_identifier Identifier for the channel on which this\\n    /// operation takes place\\n    /// @param participant Address of the channel participant whose data will be\\n    /// returned\\n    /// @param partner Address of the channel partner\\n    /// @return Participant's deposit, withdrawn_amount, whether the participant\\n    /// has called `closeChannel` or not, balance_hash, nonce, locksroot,\\n    /// locked_amount\\n    function getChannelParticipantInfo(\\n            uint256 channel_identifier,\\n            address participant,\\n            address partner\\n    )\\n        external\\n        view\\n        returns (uint256, uint256, bool, bytes32, uint256, bytes32, uint256)\\n    {\\n        bytes32 unlock_key;\\n\\n        Participant storage participant_state = channels[channel_identifier].participants[\\n            participant\\n        ];\\n        unlock_key = getUnlockIdentifier(channel_identifier, participant, partner);\\n        UnlockData storage unlock_data = unlock_identifier_to_unlock_data[unlock_key];\\n\\n        return (\\n            participant_state.deposit,\\n            participant_state.withdrawn_amount,\\n            participant_state.is_the_closer,\\n            participant_state.balance_hash,\\n            participant_state.nonce,\\n            unlock_data.locksroot,\\n            unlock_data.locked_amount\\n        );\\n    }\\n\\n    /// @dev Get the hash of the participant addresses, ordered\\n    /// lexicographically\\n    /// @param participant Address of a channel participant\\n    /// @param partner Address of the other channel participant\\n    function getParticipantsHash(address participant, address partner)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        require(participant != address(0x0));\\n        require(partner != address(0x0));\\n        require(participant != partner);\\n\\n        if (participant < partner) {\\n            return keccak256(abi.encodePacked(participant, partner));\\n        } else {\\n            return keccak256(abi.encodePacked(partner, participant));\\n        }\\n    }\\n\\n    /// @dev Get the hash of the channel identifier and the participant\\n    /// addresses (whose ordering matters). The hash might be useful for\\n    /// the receiver to look up the appropriate UnlockData to claim\\n    /// @param channel_identifier Identifier for the channel which the\\n    /// UnlockData is about\\n    /// @param sender Sender of the pending transfers that the UnlockData\\n    /// represents\\n    /// @param receiver Receiver of the pending transfers that the UnlockData\\n    /// represents\\n    function getUnlockIdentifier(\\n        uint256 channel_identifier,\\n        address sender,\\n        address receiver\\n    )\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        require(sender != receiver);\\n        return keccak256(abi.encodePacked(channel_identifier, sender, receiver));\\n    }\\n\\n    function updateBalanceProofData(\\n        Channel storage channel,\\n        address participant,\\n        uint256 nonce,\\n        bytes32 balance_hash\\n    )\\n        internal\\n    {\\n        Participant storage participant_state = channel.participants[participant];\\n\\n        // Multiple calls to updateNonClosingBalanceProof can be made and we\\n        // need to store the last known balance proof data.\\n        // This line prevents Monitoring Services from getting rewards\\n        // again and again using the same reward proof.\\n        require(nonce > participant_state.nonce);\\n\\n        participant_state.nonce = nonce;\\n        participant_state.balance_hash = balance_hash;\\n    }\\n\\n    function storeUnlockData(\\n        uint256 channel_identifier,\\n        SettleInput memory settle_input,\\n        address receiver\\n    )\\n        internal\\n    {\\n        // If there are transfers to unlock, store the locksroot and total\\n        // amount of tokens\\n        if (settle_input.locked_amount == 0) {\\n            return;\\n        }\\n\\n        bytes32 key = getUnlockIdentifier(channel_identifier, settle_input.participant, receiver);\\n        UnlockData storage unlock_data = unlock_identifier_to_unlock_data[key];\\n        unlock_data.locksroot = settle_input.locksroot;\\n        unlock_data.locked_amount = settle_input.locked_amount;\\n    }\\n\\n    function getChannelAvailableDeposit(\\n        Participant storage participant1_state,\\n        Participant storage participant2_state\\n    )\\n        internal\\n        view\\n        returns (uint256 total_available_deposit)\\n    {\\n        total_available_deposit = (\\n            participant1_state.deposit +\\n            participant2_state.deposit -\\n            participant1_state.withdrawn_amount -\\n            participant2_state.withdrawn_amount\\n        );\\n    }\\n\\n    /// @dev Function that calculates the amount of tokens that the participants\\n    /// will receive when calling settleChannel.\\n    /// Check https://github.com/raiden-network/raiden-contracts/issues/188 for the settlement\\n    /// algorithm analysis and explanations.\\n    function getSettleTransferAmounts(\\n        Participant storage participant1_state,\\n        uint256 participant1_transferred_amount,\\n        uint256 participant1_locked_amount,\\n        Participant storage participant2_state,\\n        uint256 participant2_transferred_amount,\\n        uint256 participant2_locked_amount\\n    )\\n        private\\n        view\\n        returns (uint256, uint256, uint256, uint256)\\n    {\\n        // The scope of this function is to compute the settlement amounts that\\n        // the two channel participants will receive when calling settleChannel\\n        // and the locked amounts that remain in the contract, to account for\\n        // the pending, not finalized transfers, that will be received by the\\n        // participants when calling `unlock`.\\n\\n        // The amount of tokens that participant1 MUST receive at the end of\\n        // the channel lifecycle (after settleChannel and unlock) is:\\n        // B1 = D1 - W1 + T2 - T1 + Lc2 - Lc1\\n\\n        // The amount of tokens that participant2 MUST receive at the end of\\n        // the channel lifecycle (after settleChannel and unlock) is:\\n        // B2 = D2 - W2 + T1 - T2 + Lc1 - Lc2\\n\\n        // B1 + B2 = TAD = D1 + D2 - W1 - W2\\n        // TAD = total available deposit at settlement time\\n\\n        // L1 = Lc1 + Lu1\\n        // L2 = Lc2 + Lu2\\n\\n        // where:\\n        // B1 = final balance of participant1 after the channel is removed\\n        // D1 = total amount deposited by participant1 into the channel\\n        // W1 = total amount withdrawn by participant1 from the channel\\n        // T2 = total amount transferred by participant2 to participant1 (finalized transfers)\\n        // T1 = total amount transferred by participant1 to participant2 (finalized transfers)\\n        // L1 = total amount of tokens locked in pending transfers, sent by\\n        //   participant1 to participant2\\n        // L2 = total amount of tokens locked in pending transfers, sent by\\n        //   participant2 to participant1\\n        // Lc2 = the amount that can be claimed by participant1 from the pending\\n        //   transfers (that have not been finalized off-chain), sent by\\n        //   participant2 to participant1. These are part of the locked amount\\n        //   value from participant2's balance proof. They are considered claimed\\n        //   if the secret corresponding to these locked transfers was registered\\n        //   on-chain, in the SecretRegistry contract, before the lock's expiration.\\n        // Lu1 = unclaimable locked amount from L1\\n        // Lc1 = the amount that can be claimed by participant2 from the pending\\n        //   transfers (that have not been finalized off-chain),\\n        //   sent by participant1 to participant2\\n        // Lu2 = unclaimable locked amount from L2\\n\\n        // Notes:\\n        // 1) The unclaimble tokens from a locked amount will return to the sender.\\n        // At the time of calling settleChannel, the TokenNetwork contract does\\n        // not know what locked amounts are claimable or unclaimable.\\n        // 2) There are some Solidity constraints that make the calculations\\n        // more difficult: attention to overflows and underflows, that MUST be\\n        // handled without throwing.\\n\\n        // Cases that require attention:\\n        // case1. If participant1 does NOT provide a balance proof or provides\\n        // an old balance proof.  participant2_transferred_amount can be [0,\\n        // real_participant2_transferred_amount) We MUST NOT punish\\n        // participant2.\\n        // case2. If participant2 does NOT provide a balance proof or provides\\n        // an old balance proof.  participant1_transferred_amount can be [0,\\n        // real_participant1_transferred_amount) We MUST NOT punish\\n        // participant1.\\n        // case3. If neither participants provide a balance proof, we just\\n        // subtract their withdrawn amounts from their deposits.\\n\\n        // This is why, the algorithm implemented in Solidity is:\\n        // (explained at each step, below)\\n        // RmaxP1 = (T2 + L2) - (T1 + L1) + D1 - W1\\n        // RmaxP1 = min(TAD, RmaxP1)\\n        // RmaxP2 = TAD - RmaxP1\\n        // SL2 = min(RmaxP1, L2)\\n        // S1 = RmaxP1 - SL2\\n        // SL1 = min(RmaxP2, L1)\\n        // S2 = RmaxP2 - SL1\\n\\n        // where:\\n        // RmaxP1 = due to possible over/underflows that only appear when using\\n        //    old balance proofs & the fact that settlement balance calculation\\n        //    is symmetric (we can calculate either RmaxP1 and RmaxP2 first,\\n        //    order does not affect result), this is a convention used to determine\\n        //    the maximum receivable amount of participant1 at settlement time\\n        // S1 = amount received by participant1 when calling settleChannel\\n        // SL1 = the maximum amount from L1 that can be locked in the\\n        //   TokenNetwork contract when calling settleChannel (due to overflows\\n        //   that only happen when using old balance proofs)\\n        // S2 = amount received by participant2 when calling settleChannel\\n        // SL2 = the maximum amount from L2 that can be locked in the\\n        //   TokenNetwork contract when calling settleChannel (due to overflows\\n        //   that only happen when using old balance proofs)\\n\\n        uint256 participant1_amount;\\n        uint256 participant2_amount;\\n        uint256 total_available_deposit;\\n\\n        SettlementData memory participant1_settlement;\\n        SettlementData memory participant2_settlement;\\n\\n        participant1_settlement.deposit = participant1_state.deposit;\\n        participant1_settlement.withdrawn = participant1_state.withdrawn_amount;\\n        participant1_settlement.transferred = participant1_transferred_amount;\\n        participant1_settlement.locked = participant1_locked_amount;\\n\\n        participant2_settlement.deposit = participant2_state.deposit;\\n        participant2_settlement.withdrawn = participant2_state.withdrawn_amount;\\n        participant2_settlement.transferred = participant2_transferred_amount;\\n        participant2_settlement.locked = participant2_locked_amount;\\n\\n        // TAD = D1 + D2 - W1 - W2 = total available deposit at settlement time\\n        total_available_deposit = getChannelAvailableDeposit(\\n            participant1_state,\\n            participant2_state\\n        );\\n\\n        // RmaxP1 = (T2 + L2) - (T1 + L1) + D1 - W1\\n        // This amount is the maximum possible amount that participant1 can\\n        // receive at settlement time and also contains the entire locked amount\\n        //  of the pending transfers from participant2 to participant1.\\n        participant1_amount = getMaxPossibleReceivableAmount(\\n            participant1_settlement,\\n            participant2_settlement\\n        );\\n\\n        // RmaxP1 = min(TAD, RmaxP1)\\n        // We need to bound this to the available channel deposit in order to\\n        // not send tokens from other channels. The only case where TAD is\\n        // smaller than RmaxP1 is when at least one balance proof is old.\\n        participant1_amount = TokenNetworkUtils.min(participant1_amount, total_available_deposit);\\n\\n        // RmaxP2 = TAD - RmaxP1\\n        // Now it is safe to subtract without underflow\\n        participant2_amount = total_available_deposit - participant1_amount;\\n\\n        // SL2 = min(RmaxP1, L2)\\n        // S1 = RmaxP1 - SL2\\n        // Both operations are done by failsafe_subtract\\n        // We take out participant2's pending transfers locked amount, bounding\\n        // it by the maximum receivable amount of participant1\\n        (participant1_amount, participant2_locked_amount) = TokenNetworkUtils.failsafe_subtract(\\n            participant1_amount,\\n            participant2_locked_amount\\n        );\\n\\n        // SL1 = min(RmaxP2, L1)\\n        // S2 = RmaxP2 - SL1\\n        // Both operations are done by failsafe_subtract\\n        // We take out participant1's pending transfers locked amount, bounding\\n        // it by the maximum receivable amount of participant2\\n        (participant2_amount, participant1_locked_amount) = TokenNetworkUtils.failsafe_subtract(\\n            participant2_amount,\\n            participant1_locked_amount\\n        );\\n\\n        // This should never throw:\\n        // S1 and S2 MUST be smaller than TAD\\n        assert(participant1_amount <= total_available_deposit);\\n        assert(participant2_amount <= total_available_deposit);\\n        // S1 + S2 + SL1 + SL2 == TAD\\n        assert(total_available_deposit == (\\n            participant1_amount +\\n            participant2_amount +\\n            participant1_locked_amount +\\n            participant2_locked_amount\\n        ));\\n\\n        return (\\n            participant1_amount,\\n            participant2_amount,\\n            participant1_locked_amount,\\n            participant2_locked_amount\\n        );\\n    }\\n\\n    function getMaxPossibleReceivableAmount(\\n        SettlementData memory participant1_settlement,\\n        SettlementData memory participant2_settlement\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return TokenNetworkUtils.getMaxPossibleReceivableAmount(\\n            participant1_settlement.deposit,\\n            participant1_settlement.withdrawn,\\n            participant1_settlement.transferred,\\n            participant1_settlement.locked,\\n            participant2_settlement.deposit,\\n            participant2_settlement.withdrawn,\\n            participant2_settlement.transferred,\\n            participant2_settlement.locked\\n        );\\n    }\\n\\n    function verifyBalanceHashData(\\n        Participant storage participant,\\n        SettleInput memory settle_input\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // When no balance proof has been provided, we need to check this\\n        // separately because hashing values of 0 outputs a value != 0\\n        if (participant.balance_hash == 0 &&\\n            settle_input.transferred_amount == 0 &&\\n            settle_input.locked_amount == 0\\n            /* locksroot is ignored. */\\n        ) {\\n            return true;\\n        }\\n\\n        // Make sure the hash of the provided state is the same as the stored\\n        // balance_hash\\n        return participant.balance_hash == keccak256(abi.encodePacked(\\n            settle_input.transferred_amount,\\n            settle_input.locked_amount,\\n            settle_input.locksroot\\n        ));\\n    }\\n\\n    /// @dev Calculates the hash of the pending transfers data and\\n    /// calculates the amount of tokens that can be unlocked because the secret\\n    /// was registered on-chain.\\n    function getHashAndUnlockedAmount(bytes memory locks)\\n        internal\\n        view\\n        returns (bytes32, uint256)\\n    {\\n        uint256 length = locks.length;\\n\\n        // each lock has this form:\\n        // (locked_amount || expiration_block || secrethash) = 3 * 32 bytes\\n        require(length % 96 == 0);\\n\\n        uint256 i;\\n        uint256 total_unlocked_amount;\\n        uint256 unlocked_amount;\\n        bytes32 total_hash;\\n\\n        for (i = 32; i < length; i += 96) {\\n            unlocked_amount = getLockedAmountFromLock(locks, i);\\n            total_unlocked_amount += unlocked_amount;\\n        }\\n\\n        total_hash = keccak256(locks);\\n\\n        return (total_hash, total_unlocked_amount);\\n    }\\n\\n    function getLockedAmountFromLock(bytes memory locks, uint256 offset)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 expiration_block;\\n        uint256 locked_amount;\\n        uint256 reveal_block;\\n        bytes32 secrethash;\\n\\n        if (locks.length <= offset) {\\n            return 0;\\n        }\\n\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            expiration_block := mload(add(locks, offset))\\n            locked_amount := mload(add(locks, add(offset, 32)))\\n            secrethash := mload(add(locks, add(offset, 64)))\\n        }\\n\\n        // Check if the lock's secret was revealed in the SecretRegistry The\\n        // secret must have been revealed in the SecretRegistry contract before\\n        // the lock's expiration_block in order for the hash time lock transfer\\n        // to be successful.\\n        reveal_block = secret_registry.getSecretRevealBlockHeight(secrethash);\\n        if (reveal_block == 0 || expiration_block <= reveal_block) {\\n            locked_amount = 0;\\n        }\\n\\n        return locked_amount;\\n    }\\n}\\n\",\"keccak256\":\"0xef9c79f097264092c65b322d121b8ffc6aeb2d7302d47c438fe1fc4bc53f1ad5\",\"license\":\"MIT\"},\"data/source/raiden/TokenNetworkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nimport \\\"./Utils.sol\\\";\\nimport \\\"./Token.sol\\\";\\nimport \\\"./TokenNetwork.sol\\\";\\n\\n\\n/// @title TokenNetworkRegistry\\n/// @notice The TokenNetwork Registry deploys new TokenNetwork contracts for the\\n/// Raiden Network protocol.\\ncontract TokenNetworkRegistry is Utils {\\n    address public secret_registry_address;\\n    uint256 public chain_id;\\n    uint256 public settlement_timeout_min;\\n    uint256 public settlement_timeout_max;\\n    uint256 public max_token_networks;\\n\\n    // Only for the limited Red Eyes release\\n    address public deprecation_executor;\\n    uint256 public token_network_created = 0;\\n\\n    // Token address => TokenNetwork address\\n    mapping(address => address) public token_to_token_networks;\\n\\n    event TokenNetworkCreated(address indexed token_address, address indexed token_network_address);\\n\\n    modifier canCreateTokenNetwork() {\\n        require(token_network_created < max_token_networks, \\\"registry full\\\");\\n        _;\\n    }\\n\\n    /// @param _secret_registry_address The address of SecretRegistry that's used by all\\n    /// TokenNetworks created by this contract\\n    /// @param _chain_id EIP-155 Chain-ID of the chain where this contract is deployed\\n    /// @param _settlement_timeout_min The shortest settlement period (in number of blocks)\\n    /// that can be chosen at the channel opening\\n    /// @param _settlement_timeout_max The longest settlement period (in number of blocks)\\n    /// that can be chosen at the channel opening\\n    /// @param _max_token_networks the number of tokens that can be registered\\n    /// MAX_UINT256 means no limits\\n    constructor(\\n        address _secret_registry_address,\\n        uint256 _chain_id,\\n        uint256 _settlement_timeout_min,\\n        uint256 _settlement_timeout_max,\\n        uint256 _max_token_networks\\n    ) {\\n        require(_chain_id > 0);\\n        require(_settlement_timeout_min > 0);\\n        require(_settlement_timeout_max > 0);\\n        require(_settlement_timeout_max > _settlement_timeout_min);\\n        require(_secret_registry_address != address(0x0));\\n        require(contractExists(_secret_registry_address));\\n        require(_max_token_networks > 0);\\n        secret_registry_address = _secret_registry_address;\\n        chain_id = _chain_id;\\n        settlement_timeout_min = _settlement_timeout_min;\\n        settlement_timeout_max = _settlement_timeout_max;\\n        max_token_networks = _max_token_networks;\\n\\n        deprecation_executor = msg.sender;\\n    }\\n\\n    /// @notice Deploy a new TokenNetwork contract for the Token deployed at\\n    /// `_token_address`\\n    /// @param _token_address Ethereum address of an already deployed token, to\\n    /// be used in the new TokenNetwork contract\\n    function createERC20TokenNetwork(\\n        address _token_address,\\n        uint256 _channel_participant_deposit_limit,\\n        uint256 _token_network_deposit_limit\\n    )\\n        external\\n        canCreateTokenNetwork\\n        returns (address token_network_address)\\n    {\\n        require(token_to_token_networks[_token_address] == address(0x0));\\n\\n        // We limit the number of token networks to 1 for the Bug Bounty release\\n        token_network_created = token_network_created + 1;\\n\\n        TokenNetwork token_network;\\n\\n        // Token contract checks are in the corresponding TokenNetwork contract\\n        token_network = new TokenNetwork(\\n            _token_address,\\n            secret_registry_address,\\n            chain_id,\\n            settlement_timeout_min,\\n            settlement_timeout_max,\\n            deprecation_executor,\\n            _channel_participant_deposit_limit,\\n            _token_network_deposit_limit\\n        );\\n\\n        token_network_address = address(token_network);\\n\\n        token_to_token_networks[_token_address] = token_network_address;\\n        emit TokenNetworkCreated(_token_address, token_network_address);\\n\\n        return token_network_address;\\n    }\\n}\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\",\"keccak256\":\"0x6ac2b18eec420639447a0d7879094357e15e398d9f222c48fe6701a7cde01a5c\",\"license\":\"MIT\"},\"data/source/raiden/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @title Utils\\n/// @notice Utils contract for various helpers used by the Raiden Network smart\\n/// contracts.\\ncontract Utils {\\n    /// @notice Check if a contract exists\\n    /// @param contract_address The address to check whether a contract is\\n    /// deployed or not\\n    /// @return True if a contract exists, false otherwise\\n    function contractExists(address contract_address) public view returns (bool) {\\n        uint size;\\n\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            size := extcodesize(contract_address)\\n        }\\n\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x3fb4df9cdadd3711bffff81a451868c7a1ee8a2f3ff1a20a4343def15cb38e0f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_chain_id": "EIP-155 Chain-ID of the chain where this contract is deployed",
          "_max_token_networks": "the number of tokens that can be registered MAX_UINT256 means no limits",
          "_secret_registry_address": "The address of SecretRegistry that's used by all TokenNetworks created by this contract",
          "_settlement_timeout_max": "The longest settlement period (in number of blocks) that can be chosen at the channel opening",
          "_settlement_timeout_min": "The shortest settlement period (in number of blocks) that can be chosen at the channel opening"
        }
      },
      "contractExists(address)": {
        "params": {
          "contract_address": "The address to check whether a contract is deployed or not"
        },
        "returns": {
          "_0": "True if a contract exists, false otherwise"
        }
      },
      "createERC20TokenNetwork(address,uint256,uint256)": {
        "params": {
          "_token_address": "Ethereum address of an already deployed token, to be used in the new TokenNetwork contract"
        }
      }
    },
    "title": "TokenNetworkRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "contractExists(address)": {
        "notice": "Check if a contract exists"
      },
      "createERC20TokenNetwork(address,uint256,uint256)": {
        "notice": "Deploy a new TokenNetwork contract for the Token deployed at `_token_address`"
      }
    },
    "notice": "The TokenNetwork Registry deploys new TokenNetwork contracts for the Raiden Network protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2898,
        "contract": "data/source/raiden/TokenNetworkRegistry.sol:TokenNetworkRegistry",
        "label": "secret_registry_address",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2900,
        "contract": "data/source/raiden/TokenNetworkRegistry.sol:TokenNetworkRegistry",
        "label": "chain_id",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2902,
        "contract": "data/source/raiden/TokenNetworkRegistry.sol:TokenNetworkRegistry",
        "label": "settlement_timeout_min",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2904,
        "contract": "data/source/raiden/TokenNetworkRegistry.sol:TokenNetworkRegistry",
        "label": "settlement_timeout_max",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2906,
        "contract": "data/source/raiden/TokenNetworkRegistry.sol:TokenNetworkRegistry",
        "label": "max_token_networks",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2908,
        "contract": "data/source/raiden/TokenNetworkRegistry.sol:TokenNetworkRegistry",
        "label": "deprecation_executor",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2911,
        "contract": "data/source/raiden/TokenNetworkRegistry.sol:TokenNetworkRegistry",
        "label": "token_network_created",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2915,
        "contract": "data/source/raiden/TokenNetworkRegistry.sol:TokenNetworkRegistry",
        "label": "token_to_token_networks",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}