{
  "address": "0x3CD189b2FC57BA8456C8060a2B2dDb054B0F4baF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deposit_contract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chain_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_service_registry_contract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration_block",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferred",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "senders",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "expiration_blocks",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "one_to_n_address",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signatures",
          "type": "bytes"
        }
      ],
      "name": "bulkClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chain_id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration_block",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "one_to_n_address",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_address",
          "type": "address"
        }
      ],
      "name": "contractExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit_contract",
      "outputs": [
        {
          "internalType": "contract UserDeposit",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "service_registry_contract",
      "outputs": [
        {
          "internalType": "contract ServiceRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "settled_sessions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xac484db21957067edbfd10140a0df9c548ab509118b45f05051a15b550926c1e",
  "receipt": {
    "to": null,
    "from": "0xFb8C3ba8A46014400487f2fB4d539A5Ff7bC367D",
    "contractAddress": "0x3CD189b2FC57BA8456C8060a2B2dDb054B0F4baF",
    "transactionIndex": 0,
    "gasUsed": "2261543",
    "logsBloom": "0x
    "blockHash": "0x96855e59c8750060af001fc89828b38306e40e4e6ea4f275f798f885762be596",
    "transactionHash": "0xac484db21957067edbfd10140a0df9c548ab509118b45f05051a15b550926c1e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 115436,
        "transactionHash": "0xac484db21957067edbfd10140a0df9c548ab509118b45f05051a15b550926c1e",
        "address": "0x4200000000000000000000000000000000000006",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x000000000000000000000000fb8c3ba8a46014400487f2fb4d539a5ff7bc367d",
          "0x0000000000000000000000004200000000000000000000000000000000000005"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0x96855e59c8750060af001fc89828b38306e40e4e6ea4f275f798f885762be596"
      }
    ],
    "blockNumber": 115436,
    "cumulativeGasUsed": "2261543",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc3Fbcb0aADdFE6399e04fCADa42F92C9104Cb133",
    69,
    "0x9b4d7E59f6cA64f37864845966E106cfbe6Eaa10"
  ],
  "solcInputHash": "d801cd5192b29c16d8f34c547e4f6dd2",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deposit_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_service_registry_contract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration_block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferred\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"expiration_blocks\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"one_to_n_address\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"bulkClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chain_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration_block\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"one_to_n_address\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit_contract\",\"outputs\":[{\"internalType\":\"contract UserDeposit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"service_registry_contract\",\"outputs\":[{\"internalType\":\"contract ServiceRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"settled_sessions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bulkClaim(address[],address[],uint256[],uint256[],address,bytes)\":{\"params\":{\"amounts\":\"Owed amounts of tokens\",\"expiration_blocks\":\"Tokens can only be claimed before this time\",\"one_to_n_address\":\"Address of this contract\",\"receivers\":\"Addresses to which the amounts are transferred\",\"senders\":\"Addresses from which the amounts are transferred\",\"signatures\":\"Sender's signatures concatenated into a single bytes array\"},\"returns\":{\"_0\":\"Amount of transferred tokens\"}},\"claim(address,address,uint256,uint256,address,bytes)\":{\"params\":{\"amount\":\"Owed amount of tokens\",\"expiration_block\":\"Tokens can only be claimed before this time\",\"one_to_n_address\":\"Address of this contract\",\"receiver\":\"Address to which the amount is transferred\",\"sender\":\"Address from which the amount is transferred\",\"signature\":\"Sender's signature over keccak256(sender, receiver, amount, expiration_block)\"},\"returns\":{\"_0\":\"Amount of transferred tokens\"}},\"constructor\":{\"params\":{\"_deposit_contract\":\"Address of UserDeposit contract\",\"_service_registry_contract\":\"Address of ServiceRegistry contract\"}},\"contractExists(address)\":{\"params\":{\"contract_address\":\"The address to check whether a contract is deployed or not\"},\"returns\":{\"_0\":\"True if a contract exists, false otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkClaim(address[],address[],uint256[],uint256[],address,bytes)\":{\"notice\":\"Submit multiple IOUs to claim the owed amount. This is the same as calling `claim` multiple times, except for the reduced gas cost.\"},\"claim(address,address,uint256,uint256,address,bytes)\":{\"notice\":\"Submit an IOU to claim the owed amount. If the deposit is smaller than the claim, the remaining deposit is claimed. If no tokens are claimed, `claim` may be retried, later.\"},\"contractExists(address)\":{\"notice\":\"Check if a contract exists\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/services/OneToN.sol\":\"OneToN\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/lib/ECVerify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nlibrary ECVerify {\\n\\n    function ecverify(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address signature_address)\\n    {\\n        require(signature.length == 65);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // The signature format is a compact form of:\\n        //   {bytes32 r}{bytes32 s}{uint8 v}\\n        // Compact means, uint8 is not padded to 32 bytes.\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n\\n            // Here we are loading the last 32 bytes, including 31 bytes following the signature.\\n            v := byte(0, mload(add(signature, 96)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        require(v == 27 || v == 28);\\n\\n        signature_address = ecrecover(hash, v, r, s);\\n\\n        // ecrecover returns zero on error\\n        require(signature_address != address(0x0));\\n\\n        return signature_address;\\n    }\\n}\\n\",\"keccak256\":\"0xeced41e7578af77042e00fc68e482b754cd355da872bfdda95a0b74e3dbd90e0\",\"license\":\"MIT\"},\"data/source/lib/MessageType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable error-reason */\\npragma solidity 0.7.6;\\n\\nlibrary MessageType {\\n\\n    enum MessageTypeId {\\n        None,\\n        BalanceProof,\\n        BalanceProofUpdate,\\n        Withdraw,\\n        CooperativeSettle,\\n        IOU,\\n        MSReward\\n    }\\n}\\n\",\"keccak256\":\"0xe4a3d54220ba19024c03fac9f8b3338245f2c4aa266627e6cdb5e97a2adcdee4\",\"license\":\"MIT\"},\"data/source/raiden/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface Token {\\n\\n    /// @return supply total amount of tokens\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return balance The balance\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return success Whether the transfer was successful or not\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return success Whether the approval was successful or not\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return remaining Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    // Optionally implemented function to show the number of decimals for the token\\n    function decimals() external view returns (uint8 decimals);\\n}\\n\",\"keccak256\":\"0x5a8ccb9fa426228d9e213164f22a94b0ac57f1aa15ab76ce88a96177edd7b0b3\",\"license\":\"MIT\"},\"data/source/raiden/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @title Utils\\n/// @notice Utils contract for various helpers used by the Raiden Network smart\\n/// contracts.\\ncontract Utils {\\n    /// @notice Check if a contract exists\\n    /// @param contract_address The address to check whether a contract is\\n    /// deployed or not\\n    /// @return True if a contract exists, false otherwise\\n    function contractExists(address contract_address) public view returns (bool) {\\n        uint size;\\n\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            size := extcodesize(contract_address)\\n        }\\n\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x3fb4df9cdadd3711bffff81a451868c7a1ee8a2f3ff1a20a4343def15cb38e0f\",\"license\":\"MIT\"},\"data/source/services/OneToN.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"../lib/ECVerify.sol\\\";\\nimport \\\"../lib/MessageType.sol\\\";\\nimport \\\"../raiden/Utils.sol\\\";\\nimport \\\"./ServiceRegistry.sol\\\";\\nimport \\\"./UserDeposit.sol\\\";\\n\\ncontract OneToN is Utils {\\n    UserDeposit public deposit_contract;\\n    ServiceRegistry public service_registry_contract;\\n\\n    // The signature given to claim() has to be computed with\\n    // this chain_id.  Otherwise the call fails.\\n    uint256 public chain_id;\\n\\n    // Indicates which sessions have already been settled by storing\\n    // keccak256(receiver, sender, expiration_block) => expiration_block.\\n    mapping (bytes32 => uint256) public settled_sessions;\\n\\n    /*\\n     *  Events\\n     */\\n\\n    // The session has been settled and can't be claimed again. The receiver is\\n    // indexed to allow services to know when claims have been successfully\\n    // processed.\\n    // When users want to get notified about low balances, they should listen\\n    // for UserDeposit.BalanceReduced, instead.\\n    // The first three values identify the session, `transferred` is the amount\\n    // of tokens that has actually been transferred during the claim.\\n    event Claimed(\\n        address sender,\\n        address indexed receiver,\\n        uint256 expiration_block,\\n        uint256 transferred\\n    );\\n\\n    /*\\n     *  Constructor\\n     */\\n\\n    /// @param _deposit_contract Address of UserDeposit contract\\n    /// @param _service_registry_contract Address of ServiceRegistry contract\\n    constructor(\\n        address _deposit_contract,\\n        uint256 _chain_id,\\n        address _service_registry_contract\\n    ) {\\n        deposit_contract = UserDeposit(_deposit_contract);\\n        chain_id = _chain_id;\\n        service_registry_contract = ServiceRegistry(_service_registry_contract);\\n    }\\n\\n    /// @notice Submit an IOU to claim the owed amount.\\n    /// If the deposit is smaller than the claim, the remaining deposit is\\n    /// claimed. If no tokens are claimed, `claim` may be retried, later.\\n    /// @param sender Address from which the amount is transferred\\n    /// @param receiver Address to which the amount is transferred\\n    /// @param amount Owed amount of tokens\\n    /// @param expiration_block Tokens can only be claimed before this time\\n    /// @param one_to_n_address Address of this contract\\n    /// @param signature Sender's signature over keccak256(sender, receiver, amount, expiration_block)\\n    /// @return Amount of transferred tokens\\n    function claim(\\n        address sender,\\n        address receiver,\\n        uint256 amount,\\n        uint256 expiration_block,\\n        address one_to_n_address,\\n        bytes memory signature\\n    )\\n        public\\n        returns (uint)\\n    {\\n        require(service_registry_contract.hasValidRegistration(receiver), \\\"receiver not registered\\\");\\n        require(block.number <= expiration_block, \\\"IOU expired\\\");\\n\\n        // validate signature\\n        address addressFromSignature = recoverAddressFromSignature(\\n            sender,\\n            receiver,\\n            amount,\\n            expiration_block,\\n            chain_id,\\n            signature\\n        );\\n        require(addressFromSignature == sender, \\\"Signature mismatch\\\");\\n\\n        // must not be claimed before\\n        bytes32 _key = keccak256(abi.encodePacked(receiver, sender, expiration_block));\\n        require(settled_sessions[_key] == 0, \\\"Already settled session\\\");\\n\\n        // claim as much as possible\\n        uint256 transferable = min(amount, deposit_contract.balances(sender));\\n        if (transferable > 0) {\\n            // register to avoid double claiming\\n            settled_sessions[_key] = expiration_block;\\n            assert(expiration_block > 0);\\n            emit Claimed(sender, receiver, expiration_block, transferable);\\n\\n            require(deposit_contract.transfer(sender, receiver, transferable), \\\"deposit did not transfer\\\");\\n        }\\n        return transferable;\\n    }\\n\\n    /// @notice Submit multiple IOUs to claim the owed amount.\\n    /// This is the same as calling `claim` multiple times, except for the reduced gas cost.\\n    /// @param senders Addresses from which the amounts are transferred\\n    /// @param receivers Addresses to which the amounts are transferred\\n    /// @param amounts Owed amounts of tokens\\n    /// @param expiration_blocks Tokens can only be claimed before this time\\n    /// @param one_to_n_address Address of this contract\\n    /// @param signatures Sender's signatures concatenated into a single bytes array\\n    /// @return Amount of transferred tokens\\n    function bulkClaim(\\n        address[] calldata senders,\\n        address[] calldata receivers,\\n        uint256[] calldata amounts,\\n        uint256[] calldata expiration_blocks,\\n        address one_to_n_address,\\n        bytes calldata signatures\\n    )\\n        external\\n        returns (uint)\\n    {\\n        uint256 transferable = 0;\\n        require(\\n            senders.length == receivers.length &&\\n            senders.length == amounts.length &&\\n            senders.length == expiration_blocks.length,\\n            \\\"Same number of elements required for all input parameters\\\"\\n        );\\n        require(\\n            signatures.length == senders.length * 65,\\n            \\\"`signatures` should contain 65 bytes per IOU\\\"\\n        );\\n        for (uint256 i = 0; i < senders.length; i++) {\\n            transferable += claim(\\n                senders[i],\\n                receivers[i],\\n                amounts[i],\\n                expiration_blocks[i],\\n                one_to_n_address,\\n                getSingleSignature(signatures, i)\\n            );\\n        }\\n        return transferable;\\n    }\\n\\n    /*\\n     *  Internal Functions\\n     */\\n\\n    /// @notice Get a single signature out of a byte array that contains concatenated signatures.\\n    /// @param signatures Multiple signatures concatenated into a single byte array\\n    /// @param i Index of the requested signature (zero based; the caller must check ranges)\\n    function getSingleSignature(\\n        bytes memory signatures,\\n        uint256 i\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        assert(i < signatures.length);\\n        uint256 offset = i * 65;\\n        // We need only 65, but we can access only whole words, so the next usable size is 3 * 32.\\n        bytes memory signature = new bytes(96);\\n        assembly { // solium-disable-line security/no-inline-assembly\\n            // Copy the 96 bytes, using `offset` to start at the beginning\\n            // of the requested signature.\\n            mstore(add(signature, 32), mload(add(add(signatures, 32), offset)))\\n            mstore(add(signature, 64), mload(add(add(signatures, 64), offset)))\\n            mstore(add(signature, 96), mload(add(add(signatures, 96), offset)))\\n\\n            // The first 32 bytes store the length of the dynamic array.\\n            // Since a signature is 65 bytes, we set the length to 65, so\\n            // that only the signature is returned.\\n            mstore(signature, 65)\\n        }\\n        return signature;\\n    }\\n\\n    function recoverAddressFromSignature(\\n        address sender,\\n        address receiver,\\n        uint256 amount,\\n        uint256 expiration_block,\\n        uint256 chain_id,\\n        bytes memory signature\\n    )\\n        internal\\n        view\\n        returns (address signature_address)\\n    {\\n        bytes32 message_hash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n188\\\",\\n                address(this),\\n                chain_id,\\n                uint256(MessageType.MessageTypeId.IOU),\\n                sender,\\n                receiver,\\n                amount,\\n                expiration_block\\n            )\\n        );\\n        return ECVerify.ecverify(message_hash, signature);\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        return a > b ? b : a;\\n    }\\n\\n}\\n\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\",\"keccak256\":\"0xd23bb47839c38547567681976de39fbf9d315a4a95b4de60f5ab063abd3746ee\",\"license\":\"MIT\"},\"data/source/services/ServiceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solium-disable indentation */\\n/* solium-disable security/no-block-members */\\npragma solidity 0.7.6;\\n\\nimport \\\"../raiden/Token.sol\\\";\\nimport \\\"../raiden/Utils.sol\\\";\\n\\ncontract ServiceRegistryConfigurableParameters {\\n    address public controller;\\n\\n    modifier onlyController() {\\n        require(msg.sender == controller, \\\"caller is not the controller\\\");\\n        _;\\n    }\\n\\n    // After a price is set to set_price at timestamp set_price_at,\\n    // the price decays according to decayedPrice().\\n    uint256 public set_price;\\n    uint256 public set_price_at;\\n\\n    /// The amount of time (in seconds) till the price decreases to roughly 1/e.\\n    uint256 public decay_constant = 200 days;\\n\\n    // Once the price is at min_price, it can't decay further.\\n    uint256 public min_price = 1000;\\n\\n    // Whenever a deposit comes in, the price is multiplied by numerator / denominator.\\n    uint256 public price_bump_numerator = 1;\\n    uint256 public price_bump_denominator = 1;\\n\\n    // The duration of service registration/extension in seconds\\n    uint256 public registration_duration = 180 days;\\n\\n    // If true, new deposits are no longer accepted.\\n    bool public deprecated = false;\\n\\n    function setDeprecationSwitch() public onlyController returns (bool _success) {\\n        deprecated = true;\\n        return true;\\n    }\\n\\n    function changeParameters(\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator,\\n            uint256 _decay_constant,\\n            uint256 _min_price,\\n            uint256 _registration_duration\\n    ) public onlyController returns (bool _success) {\\n        changeParametersInternal(\\n            _price_bump_numerator,\\n            _price_bump_denominator,\\n            _decay_constant,\\n            _min_price,\\n            _registration_duration\\n        );\\n        return true;\\n    }\\n\\n    function changeParametersInternal(\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator,\\n            uint256 _decay_constant,\\n            uint256 _min_price,\\n            uint256 _registration_duration\\n    ) internal {\\n        refreshPrice();\\n        setPriceBumpParameters(_price_bump_numerator, _price_bump_denominator);\\n        setMinPrice(_min_price);\\n        setDecayConstant(_decay_constant);\\n        setRegistrationDuration(_registration_duration);\\n    }\\n\\n    // Updates set_price to be currentPrice() and set_price_at to be now\\n    function refreshPrice() private {\\n        set_price = currentPrice();\\n        set_price_at = block.timestamp;\\n    }\\n\\n    function setPriceBumpParameters(\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator\\n    ) private {\\n        require(_price_bump_denominator > 0, \\\"divide by zero\\\");\\n        require(_price_bump_numerator >= _price_bump_denominator, \\\"price dump instead of bump\\\");\\n        require(_price_bump_numerator < 2 ** 40, \\\"price dump numerator is too big\\\");\\n        price_bump_numerator = _price_bump_numerator;\\n        price_bump_denominator = _price_bump_denominator;\\n    }\\n\\n    function setMinPrice(uint256 _min_price) private {\\n        // No checks.  Even allowing zero.\\n        min_price = _min_price;\\n        // No checks or modifications on set_price.\\n        // Even if set_price is smaller than min_price, currentPrice() function returns min_price.\\n    }\\n\\n    function setDecayConstant(uint256 _decay_constant) private {\\n        require(_decay_constant > 0, \\\"attempt to set zero decay constant\\\");\\n        require(_decay_constant < 2 ** 40, \\\"too big decay constant\\\");\\n        decay_constant = _decay_constant;\\n    }\\n\\n    function setRegistrationDuration(uint256 _registration_duration) private {\\n        // No checks.  Even allowing zero (when no new registrations are possible).\\n        registration_duration = _registration_duration;\\n    }\\n\\n\\n    /// @notice The amount to deposit for registration or extension\\n    /// Note: the price moves quickly depending on what other addresses do.\\n    /// The current price might change after you send a `deposit()` transaction\\n    /// before the transaction is executed.\\n    function currentPrice() public view returns (uint256) {\\n        require(block.timestamp >= set_price_at, \\\"An underflow in price computation\\\");\\n        uint256 seconds_passed = block.timestamp - set_price_at;\\n\\n        return decayedPrice(set_price, seconds_passed);\\n    }\\n\\n\\n    /// @notice Calculates the decreased price after a number of seconds\\n    /// @param _set_price The initial price\\n    /// @param _seconds_passed The number of seconds passed since the initial\\n    /// price was set\\n    function decayedPrice(uint256 _set_price, uint256 _seconds_passed) public\\n        view returns (uint256) {\\n        // We are here trying to approximate some exponential decay.\\n        // exp(- X / A) where\\n        //   X is the number of seconds since the last price change\\n        //   A is the decay constant (A = 200 days corresponds to 0.5% decrease per day)\\n\\n        // exp(- X / A) ~~ P / Q where\\n        //   P = 24 A^4\\n        //   Q = 24 A^4 + 24 A^3X + 12 A^2X^2 + 4 AX^3 + X^4\\n        // Note: swap P and Q, and then think about the Taylor expansion.\\n\\n        uint256 X = _seconds_passed;\\n\\n        if (X >= 2 ** 40) { // The computation below overflows.\\n            return min_price;\\n        }\\n\\n        uint256 A = decay_constant;\\n\\n        uint256 P = 24 * (A ** 4);\\n        uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;\\n\\n        // The multiplication below is not supposed to overflow because\\n        // _set_price should be at most 2 ** 90 and\\n        // P should be at most 24 * (2 ** 40).\\n        uint256 price = _set_price * P / Q;\\n\\n        // Not allowing a price smaller than min_price.\\n        // Once it's too low it's too low forever.\\n        if (price < min_price) {\\n            price = min_price;\\n        }\\n        return price;\\n    }\\n}\\n\\n\\ncontract Deposit {\\n    // This contract holds ERC20 tokens as deposit until a predetemined point of time.\\n\\n    // The ERC20 token contract that the deposit is about.\\n    Token public token;\\n\\n    // The address of ServiceRegistry contract that this deposit is associated with.\\n    // If the address has no code, service_registry.deprecated() call will fail.\\n    ServiceRegistryConfigurableParameters service_registry;\\n\\n    // The address that can withdraw the deposit after the release time.\\n    address public withdrawer;\\n\\n    // The timestamp after which the withdrawer can withdraw the deposit.\\n    uint256 public release_at;\\n\\n    /// @param _token The address of the ERC20 token contract where the deposit is accounted\\n    /// @param _release_at The timestap after which the withdrawer can withdraw the deposit\\n    /// @param _withdrawer The address that can withdraw the deposit after the release time\\n    /// @param _service_registry The address of ServiceRegistry whose deprecation enables immediate withdrawals\\n    constructor(\\n        Token _token,\\n        uint256 _release_at,\\n        address _withdrawer,\\n        ServiceRegistryConfigurableParameters _service_registry\\n    ) {\\n        token = _token;\\n        // Don't care even if it's in the past.\\n        release_at = _release_at;\\n        withdrawer = _withdrawer;\\n        service_registry = _service_registry;\\n    }\\n\\n    // In order to make a deposit, transfer the ERC20 token into this contract.\\n    // If you transfer a wrong kind of ERC20 token or ETH into this contract,\\n    // these tokens will be lost forever.\\n\\n    /// @notice Withdraws the tokens that have been deposited\\n    /// Only `withdrawer` can call this.\\n    /// @param _to The address where the withdrawn tokens should go\\n    function withdraw(address payable _to) external {\\n        uint256 balance = token.balanceOf(address(this));\\n        require(msg.sender == withdrawer, \\\"the caller is not the withdrawer\\\");\\n        require(block.timestamp >= release_at || service_registry.deprecated(), \\\"deposit not released yet\\\");\\n        require(balance > 0, \\\"nothing to withdraw\\\");\\n        require(token.transfer(_to, balance), \\\"token didn't transfer\\\");\\n        //selfdestruct(_to); // OVM does not support selfdestruct\\n    }\\n}\\n\\n\\ncontract ServiceRegistry is Utils, ServiceRegistryConfigurableParameters {\\n    Token public token;\\n\\n    mapping(address => uint256) public service_valid_till;\\n    mapping(address => string) public urls;  // URLs of services for HTTP access\\n\\n    // An append-only list of addresses that have ever made a deposit.\\n    // Starting from this list, all alive registrations can be figured out.\\n    address[] public ever_made_deposits;\\n\\n    // @param service The address of the registered service provider\\n    // @param valid_till The timestamp of the moment when the registration expires\\n    // @param deposit_amount The amount of deposit transferred\\n    // @param deposit The address of Deposit instance where the deposit is stored\\n    event RegisteredService(address indexed service, uint256 valid_till, uint256 deposit_amount, Deposit deposit_contract);\\n\\n    // @param _token_for_registration The address of the ERC20 token contract that services use for registration fees\\n    // @param _controller The address that can change parameters and deprecate the ServiceRegistry\\n    // @param _initial_price The amount of tokens needed initially for a slot\\n    // @param _price_bump_numerator The ratio of price bump after deposit is made (numerator)\\n    // @param _price_bump_denominator The ratio of price bump after deposit is made (denominator)\\n    // @param _decay_constant The number of seconds after which the price becomes roughly 1/e\\n    // @param _min_price The minimum amount of tokens needed for a slot\\n    // @param _registration_duration The number of seconds (roughly, barring block time & miners'\\n    // timestamp errors) of a slot gained for a successful deposit\\n    constructor(\\n            Token _token_for_registration,\\n            address _controller,\\n            uint256 _initial_price,\\n            uint256 _price_bump_numerator,\\n            uint256 _price_bump_denominator,\\n            uint256 _decay_constant,\\n            uint256 _min_price,\\n            uint256 _registration_duration\\n    ) {\\n        require(address(_token_for_registration) != address(0x0), \\\"token at address zero\\\");\\n        require(contractExists(address(_token_for_registration)), \\\"token has no code\\\");\\n        require(_initial_price >= min_price, \\\"initial price too low\\\");\\n        require(_initial_price <= 2 ** 90, \\\"intiial price too high\\\");\\n\\n        token = _token_for_registration;\\n        // Check if the contract is indeed a token contract\\n        require(token.totalSupply() > 0, \\\"total supply zero\\\");\\n        controller = _controller;\\n\\n        // Set up the price and the set price timestamp\\n        set_price = _initial_price;\\n        set_price_at = block.timestamp;\\n\\n        // Set the parameters\\n        changeParametersInternal(_price_bump_numerator, _price_bump_denominator, _decay_constant, _min_price, _registration_duration);\\n    }\\n\\n    // @notice Locks tokens and registers a service or extends the registration\\n    // @param _limit_amount The biggest amount of tokens that the caller is willing to deposit\\n    // The call fails if the current price is higher (this is always possible\\n    // when other parties have just called `deposit()`)\\n    function deposit(uint _limit_amount) public returns (bool _success) {\\n        require(! deprecated, \\\"this contract was deprecated\\\");\\n\\n        uint256 amount = currentPrice();\\n        require(_limit_amount >= amount, \\\"not enough limit\\\");\\n\\n        // Extend the service position.\\n        uint256 valid_till = service_valid_till[msg.sender];\\n        if (valid_till == 0) { // a first time joiner\\n            ever_made_deposits.push(msg.sender);\\n        }\\n        if (valid_till < block.timestamp) { // a first time joiner or an expired service.\\n            valid_till = block.timestamp;\\n        }\\n        // Check against overflow.\\n        require(valid_till < valid_till + registration_duration, \\\"overflow during extending the registration\\\");\\n        valid_till = valid_till + registration_duration;\\n        assert(valid_till > service_valid_till[msg.sender]);\\n        service_valid_till[msg.sender] = valid_till;\\n\\n        // Record the price\\n        set_price = amount * price_bump_numerator / price_bump_denominator;\\n        if (set_price > 2 ** 90) {\\n            set_price = 2 ** 90; // Preventing overflows.\\n        }\\n        set_price_at = block.timestamp;\\n\\n        // Move the deposit in a new Deposit contract.\\n        assert(block.timestamp < valid_till);\\n        Deposit depo = new Deposit(token, valid_till, msg.sender, this);\\n        require(token.transferFrom(msg.sender, address(depo), amount), \\\"Token transfer for deposit failed\\\");\\n\\n        // Fire event\\n        emit RegisteredService(msg.sender, valid_till, amount, depo);\\n\\n        return true;\\n    }\\n\\n    /// @notice Sets the URL used to access a service via HTTP\\n    /// Only a currently registered service can call this successfully\\n    /// @param new_url The new URL string to be stored\\n    function setURL(string memory new_url) public returns (bool _success) {\\n        require(hasValidRegistration(msg.sender), \\\"registration expired\\\");\\n        require(bytes(new_url).length != 0, \\\"new url is empty string\\\");\\n        urls[msg.sender] = new_url;\\n        return true;\\n    }\\n\\n    /// A getter function for seeing the length of ever_made_deposits array\\n    function everMadeDepositsLen() public view returns (uint256 _len) {\\n        return ever_made_deposits.length;\\n    }\\n\\n    function hasValidRegistration(address _address) public view returns (bool _has_registration) {\\n        return block.timestamp < service_valid_till[_address];\\n    }\\n}\\n\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\",\"keccak256\":\"0x5a967df24ca5e9bb01d0b5d550b6a420d6998831766e031686ca7bba11362bae\",\"license\":\"MIT\"},\"data/source/services/UserDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"../raiden/Token.sol\\\";\\nimport \\\"../raiden/Utils.sol\\\";\\n\\ncontract UserDeposit is Utils {\\n    uint constant public withdraw_delay = 100;  // time before withdraw is allowed in blocks\\n\\n    // Token to be used for the deposit\\n    Token public token;\\n\\n    // Trusted contracts (can execute `transfer`)\\n    address public msc_address;\\n    address public one_to_n_address;\\n\\n    // Total amount of tokens that have been deposited. This is monotonous and\\n    // doing a transfer or withdrawing tokens will not decrease total_deposit!\\n    mapping(address => uint256) public total_deposit;\\n    // Current user's balance, ignoring planned withdraws\\n    mapping(address => uint256) public balances;\\n    mapping(address => WithdrawPlan) public withdraw_plans;\\n\\n    // The sum of all balances\\n    uint256 public whole_balance = 0;\\n    // Deposit limit for this whole contract\\n    uint256 public whole_balance_limit;\\n\\n    /*\\n     *  Structs\\n     */\\n    struct WithdrawPlan {\\n        uint256 amount;\\n        uint256 withdraw_block;  // earliest block at which withdraw is allowed\\n    }\\n\\n    /*\\n     *  Events\\n     */\\n\\n    event BalanceReduced(address indexed owner, uint newBalance);\\n    event WithdrawPlanned(address indexed withdrawer, uint plannedBalance);\\n\\n    /*\\n     *  Modifiers\\n     */\\n\\n    modifier canTransfer() {\\n        require(msg.sender == msc_address || msg.sender == one_to_n_address, \\\"unknown caller\\\");\\n        _;\\n    }\\n\\n    /*\\n     *  Constructor\\n     */\\n\\n    /// @notice Set the default values for the smart contract\\n    /// @param _token_address The address of the token to use for rewards\\n    constructor(address _token_address, uint256 _whole_balance_limit)\\n    {\\n        // check token contract\\n        require(_token_address != address(0x0), \\\"token at address zero\\\");\\n        require(contractExists(_token_address), \\\"token has no code\\\");\\n        token = Token(_token_address);\\n        require(token.totalSupply() > 0, \\\"token has no total supply\\\"); // Check if the contract is indeed a token contract\\n        // check and set the whole balance limit\\n        require(_whole_balance_limit > 0, \\\"whole balance limit is zero\\\");\\n        whole_balance_limit = _whole_balance_limit;\\n    }\\n\\n    /// @notice Specify trusted contracts. This has to be done outside of the\\n    /// constructor to avoid cyclic dependencies.\\n    /// @param _msc_address Address of the MonitoringService contract\\n    /// @param _one_to_n_address Address of the OneToN contract\\n    function init(address _msc_address, address _one_to_n_address)\\n        external\\n    {\\n        // prevent changes of trusted contracts after initialization\\n        require(msc_address == address(0x0) && one_to_n_address == address(0x0), \\\"already initialized\\\");\\n\\n        // check monitoring service contract\\n        require(_msc_address != address(0x0), \\\"MS contract at address zero\\\");\\n        require(contractExists(_msc_address), \\\"MS contract has no code\\\");\\n        msc_address = _msc_address;\\n\\n        // check one to n contract\\n        require(_one_to_n_address != address(0x0), \\\"OneToN at address zero\\\");\\n        require(contractExists(_one_to_n_address), \\\"OneToN has no code\\\");\\n        one_to_n_address = _one_to_n_address;\\n    }\\n\\n    /// @notice Deposit tokens. The amount of transferred tokens will be\\n    /// `new_total_deposit - total_deposit[beneficiary]`. This makes the\\n    /// function behavior predictable and idempotent. Can be called several\\n    /// times and on behalf of other accounts.\\n    /// @param beneficiary The account benefiting from the deposit\\n    /// @param new_total_deposit The total sum of tokens that have been\\n    /// deposited by the user by calling this function.\\n    function deposit(address beneficiary, uint256 new_total_deposit)\\n        external\\n    {\\n        require(new_total_deposit > total_deposit[beneficiary], \\\"deposit not increasing\\\");\\n\\n        // Calculate the actual amount of tokens that will be transferred\\n        uint256 added_deposit = new_total_deposit - total_deposit[beneficiary];\\n\\n        balances[beneficiary] += added_deposit;\\n        total_deposit[beneficiary] += added_deposit;\\n\\n        // Update whole_balance, but take care against overflows.\\n        require(whole_balance + added_deposit >= whole_balance, \\\"overflowing deposit\\\");\\n        whole_balance += added_deposit;\\n\\n        // Decline deposit if the whole balance is bigger than the limit.\\n        require(whole_balance <= whole_balance_limit, \\\"too much deposit\\\");\\n\\n        // Actual transfer.\\n        require(token.transferFrom(msg.sender, address(this), added_deposit), \\\"tokens didn't transfer\\\");\\n    }\\n\\n    /// @notice Internally transfer deposits between two addresses.\\n    /// Sender and receiver must be different or the transaction will fail.\\n    /// @param sender Account from which the amount will be deducted\\n    /// @param receiver Account to which the amount will be credited\\n    /// @param amount Amount of tokens to be transferred\\n    /// @return success true if transfer has been done successfully, otherwise false\\n    function transfer(\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    )\\n        external\\n        canTransfer()\\n        returns (bool success)\\n    {\\n        require(sender != receiver, \\\"sender == receiver\\\");\\n        if (balances[sender] >= amount && amount > 0) {\\n            balances[sender] -= amount;\\n            balances[receiver] += amount;\\n            emit BalanceReduced(sender, balances[sender]);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice Announce intention to withdraw tokens.\\n    /// Sets the planned withdraw amount and resets the withdraw_block.\\n    /// There is only one planned withdrawal at a time, the old one gets overwritten.\\n    /// @param amount Maximum amount of tokens to be withdrawn\\n    function planWithdraw(uint256 amount)\\n        external\\n    {\\n        require(amount > 0, \\\"withdrawing zero\\\");\\n        require(balances[msg.sender] >= amount, \\\"withdrawing too much\\\");\\n\\n        withdraw_plans[msg.sender] = WithdrawPlan({\\n            amount: amount,\\n            withdraw_block: block.number + withdraw_delay\\n        });\\n        emit WithdrawPlanned(msg.sender, balances[msg.sender] - amount);\\n    }\\n\\n    /// @notice Execute a planned withdrawal\\n    /// Will only work after the withdraw_delay has expired.\\n    /// An amount lower or equal to the planned amount may be withdrawn.\\n    /// Removes the withdraw plan even if not the full amount has been\\n    /// withdrawn.\\n    /// @param amount Amount of tokens to be withdrawn\\n    function withdraw(uint256 amount)\\n        external\\n    {\\n        WithdrawPlan storage withdraw_plan = withdraw_plans[msg.sender];\\n        require(amount <= withdraw_plan.amount, \\\"withdrawing more than planned\\\");\\n        require(withdraw_plan.withdraw_block <= block.number, \\\"withdrawing too early\\\");\\n        uint256 withdrawable = min(amount, balances[msg.sender]);\\n        balances[msg.sender] -= withdrawable;\\n\\n        // Update whole_balance, but take care against underflows.\\n        require(whole_balance - withdrawable <= whole_balance, \\\"underflow in whole_balance\\\");\\n        whole_balance -= withdrawable;\\n\\n        emit BalanceReduced(msg.sender, balances[msg.sender]);\\n        delete withdraw_plans[msg.sender];\\n\\n        require(token.transfer(msg.sender, withdrawable), \\\"tokens didn't transfer\\\");\\n    }\\n\\n    /// @notice The owner's balance with planned withdrawals deducted\\n    /// @param owner Address for which the balance should be returned\\n    /// @return remaining_balance The remaining balance after planned withdrawals\\n    function effectiveBalance(address owner)\\n        external\\n        view\\n        returns (uint256 remaining_balance)\\n    {\\n        WithdrawPlan storage withdraw_plan = withdraw_plans[owner];\\n        if (withdraw_plan.amount > balances[owner]) {\\n            return 0;\\n        }\\n        return balances[owner] - withdraw_plan.amount;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        return a > b ? b : a;\\n    }\\n}\\n\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\",\"keccak256\":\"0x070b4f1949eec8099a1bc6e8a91789ba64853074e79b6a272d0bd8cc8f0e3053\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001957600080610016610e32565b50505b50600436106100765760003560e01c80633af973b1146100845780633ea6b5b41461009e578063631b4903146100c25780637709bc78146101b657806399ccb9fe146101f9578063c7ae4e2c14610444578063dc291e571461046a575b600080610081610e32565b50505b61008c610472565b60405190815260200160405180910390f35b6100a661047f565b6040516001600160a01b03909116815260200160405180910390f35b61008c600480360360c08110156100e1576000806100de610e32565b50505b6001600160a01b038235811692602081013582169260408201359260608301359260808101359091169181019060c0810160a0820135600160201b8111156101315760008061012e610e32565b50505b82018360208201111561014c57600080610149610e32565b50505b803590602001918460018302840111600160201b8311171561017657600080610173610e32565b50505b91908080601f016020809104026020016040519081016040528181529291906020840183838082843760009201919091525092955061049d945050505050565b6101e5600480360360208110156101d5576000806101d2610e32565b50505b50356001600160a01b03166109e6565b604051901515815260200160405180910390f35b61008c600480360360c081101561021857600080610215610e32565b50505b810190602081018135600160201b81111561023b57600080610238610e32565b50505b82018360208201111561025657600080610253610e32565b50505b803590602001918460208302840111600160201b831117156102805760008061027d610e32565b50505b919390929091602081019035600160201b8111156102a6576000806102a3610e32565b50505b8201836020820111156102c1576000806102be610e32565b50505b803590602001918460208302840111600160201b831117156102eb576000806102e8610e32565b50505b919390929091602081019035600160201b8111156103115760008061030e610e32565b50505b82018360208201111561032c57600080610329610e32565b50505b803590602001918460208302840111600160201b8311171561035657600080610353610e32565b50505b919390929091602081019035600160201b81111561037c57600080610379610e32565b50505b82018360208201111561039757600080610394610e32565b50505b803590602001918460208302840111600160201b831117156103c1576000806103be610e32565b50505b919390926001600160a01b0383351692604081019060200135600160201b8111156103f4576000806103f1610e32565b50505b82018360208201111561040f5760008061040c610e32565b50505b803590602001918460018302840111600160201b8311171561043957600080610436610e32565b50505b5090925090506109fb565b61008c6004803603602081101561046357600080610460610e32565b50505b5035610b74565b6100a6610b8c565b600261047c610e9d565b81565b60008061048a610e9d565b906101000a90046001600160a01b031681565b60008060016104aa610e9d565b906101000a90046001600160a01b03166001600160a01b031663ebc00c05876040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303818680610503610efd565b15801561051857600080610515610e32565b50505b505a610522610f49565b5050505050158015610541573d6000803e3d600061053e610e32565b50505b505050506040513d60208110156105605760008061055d610e32565b50505b81019080805192506105be9150505760405162461bcd60e51b81526020600482015260176024820152761c9958d95a5d995c881b9bdd081c9959da5cdd195c9959604a1b6044820152606401604051809103906105bb610e32565b50505b835a6105c8611034565b11156106115760405162461bcd60e51b815260206004820152600b60248201526a1253d548195e1c1a5c995960aa1b60448201526064016040518091039061060e610e32565b50505b600061062a888888886002610624610e9d565b88610b98565b9050876001600160a01b0316816001600160a01b03161461068f5760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016040518091039061068c610e32565b50505b60008789876040516001600160601b0319606094851b811660208301529290931b909116603483015260488201526068016040516020818303038152906040528051906020012060008181526003602052909150604090206106ef610e9d565b156107435760405162461bcd60e51b815260206004820152601760248201527620b63932b0b23c9039b2ba3a3632b21039b2b9b9b4b7b760491b604482015260640160405180910390610740610e32565b50505b600061081a88600080610754610e9d565b906101000a90046001600160a01b03166001600160a01b03166327e235e38d6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186806107ad610efd565b1580156107c2576000806107bf610e32565b50505b505a6107cc610f49565b50505050501580156107eb573d6000803e3d60006107e8610e32565b50505b505050506040513d602081101561080a57600080610807610e32565b50505b8101908080519250610c9d915050565b905080156109d95760008281526003602052879060409020819061083c61107a565b5050506000871161084957fe5b886001600160a01b03167f2f6639d24651730c7bf57c95ddbf96d66d11477e4ec626876f92c22e5f365e688b898460405180846001600160a01b03168152602001838152602001828152602001935050505060405180910390a26000806108ae610e9d565b906101000a90046001600160a01b03166001600160a01b031663beabacc88b8b846040516001600160e01b031960e086901b1681526001600160a01b03938416600482015291909216602482015260448101919091526064016020604051808303816000878061091c610efd565b1580156109315760008061092e610e32565b50505b505a61093b6110c8565b50505050505015801561095b573d6000803e3d6000610958610e32565b50505b505050506040513d602081101561097a57600080610977610e32565b50505b81019080805192506109d99150505760405162461bcd60e51b81526020600482015260186024820152773232b837b9b4ba103234b2103737ba103a3930b739b332b960411b6044820152606401604051809103906109d6610e32565b50505b9998505050505050505050565b600080826109f2610efd565b15159392505050565b6000808b8a148015610a0c57508b88145b8015610a1757508b86145b610a5b5760405162461bcd60e51b815260040180806020018281038252603981526020018061118f6039913960400191505060405180910390610a58610e32565b50505b60418c028314610aa55760405162461bcd60e51b815260040180806020018281038252602c8152602001806111c8602c913960400191505060405180910390610aa2610e32565b50505b60005b8c811015610b6357610b578e8e83818110610abf57fe5b905060200201356001600160a01b03168d8d84818110610adb57fe5b905060200201356001600160a01b03168c8c85818110610af757fe5b905060200201358b8b86818110610b0a57fe5b905060200201358a610b528b8b8080601f01602080910402602001604051908101604052818152929190602084018383808284376000920191909152508b9250610cb7915050565b61049d565b90910190600101610aa8565b509c9b505050505050505050505050565b6003602052806000526040600020905061047c610e9d565b6000600161048a610e9d565b6000805a63996d79a5598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051925060005b6040811015610bf157600082820152602001610bda565b50869150600590508a8a8a8a6040517f19457468657265756d205369676e6564204d6573736167653a0a31383800000060208201526001600160601b0319606098891b8116603d8301526051820197909752607181019590955292861b85166091850152941b90921660a582015260b981019290925260d982015260f901604051602081830303815290604052805190602001209050610c918184610d28565b98975050505050505050565b6000818311610cac5782610cae565b815b90505b92915050565b606082518210610cc357fe5b6041820260006060604051818152601f19601f8301168101602001604052908015610cf5576020820181803683370190505b50905081602086010151602082015281604086010151604082015281606086010151606082015260418152949350505050565b60008151604114610d4157600080610d3e610e32565b50505b60008060006020850151925060408501519150606085015160001a9050601b811015610d6b57601b015b8060ff16601b1480610d8057508060ff16601c145b610d9257600080610d8f610e32565b50505b60018682858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855a610de2610f49565b5050505050158015610e01573d6000803e3d6000610dfe610e32565b50505b5050506020604051035193506001600160a01b038416610e2957600080610e26610e32565b50505b50505092915050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015610e6a578086015182820160400152602001610e4f565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015610ef857600082820152602001610ee1565b505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020610ee1565b638540661f598160e01b8152610f7a565b8080831115610cb1575090919050565b8080831015610cb1575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015610fb2578088015182820152602001610f9a565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af150596110078d3d610f6a565b8c016110138187610f5a565b5b828110156110285760008152602001611014565b50929c50505050505050565b635a98c361598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020610ee1565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020610ee1565b6385979f76598160e01b8152836004820152846024820152606060448201528760648201526084810160005b8981101561110c5780890151828201526020016110f4565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af150596111618e3d610f6a565b8d0161116d8187610f5a565b5b82811015611182576000815260200161116e565b50929d5050505050505056fe53616d65206e756d626572206f6620656c656d656e747320726571756972656420666f7220616c6c20696e70757420706172616d6574657273607369676e617475726573602073686f756c6420636f6e7461696e2036352062797465732070657220494f55",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bulkClaim(address[],address[],uint256[],uint256[],address,bytes)": {
        "params": {
          "amounts": "Owed amounts of tokens",
          "expiration_blocks": "Tokens can only be claimed before this time",
          "one_to_n_address": "Address of this contract",
          "receivers": "Addresses to which the amounts are transferred",
          "senders": "Addresses from which the amounts are transferred",
          "signatures": "Sender's signatures concatenated into a single bytes array"
        },
        "returns": {
          "_0": "Amount of transferred tokens"
        }
      },
      "claim(address,address,uint256,uint256,address,bytes)": {
        "params": {
          "amount": "Owed amount of tokens",
          "expiration_block": "Tokens can only be claimed before this time",
          "one_to_n_address": "Address of this contract",
          "receiver": "Address to which the amount is transferred",
          "sender": "Address from which the amount is transferred",
          "signature": "Sender's signature over keccak256(sender, receiver, amount, expiration_block)"
        },
        "returns": {
          "_0": "Amount of transferred tokens"
        }
      },
      "constructor": {
        "params": {
          "_deposit_contract": "Address of UserDeposit contract",
          "_service_registry_contract": "Address of ServiceRegistry contract"
        }
      },
      "contractExists(address)": {
        "params": {
          "contract_address": "The address to check whether a contract is deployed or not"
        },
        "returns": {
          "_0": "True if a contract exists, false otherwise"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bulkClaim(address[],address[],uint256[],uint256[],address,bytes)": {
        "notice": "Submit multiple IOUs to claim the owed amount. This is the same as calling `claim` multiple times, except for the reduced gas cost."
      },
      "claim(address,address,uint256,uint256,address,bytes)": {
        "notice": "Submit an IOU to claim the owed amount. If the deposit is smaller than the claim, the remaining deposit is claimed. If no tokens are claimed, `claim` may be retried, later."
      },
      "contractExists(address)": {
        "notice": "Check if a contract exists"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3841,
        "contract": "data/source/services/OneToN.sol:OneToN",
        "label": "deposit_contract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(UserDeposit)5467"
      },
      {
        "astId": 3843,
        "contract": "data/source/services/OneToN.sol:OneToN",
        "label": "service_registry_contract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ServiceRegistry)4968"
      },
      {
        "astId": 3845,
        "contract": "data/source/services/OneToN.sol:OneToN",
        "label": "chain_id",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3849,
        "contract": "data/source/services/OneToN.sol:OneToN",
        "label": "settled_sessions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ServiceRegistry)4968": {
        "encoding": "inplace",
        "label": "contract ServiceRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(UserDeposit)5467": {
        "encoding": "inplace",
        "label": "contract UserDeposit",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}