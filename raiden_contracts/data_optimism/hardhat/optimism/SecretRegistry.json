{
  "address": "0x3DF0C6eBb360E6485FcFfFa99Deab39Ed789Baf5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "secrethash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "SecretRevealed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "secrethash",
          "type": "bytes32"
        }
      ],
      "name": "getSecretRevealBlockHeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "registerSecret",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "secrets",
          "type": "bytes32[]"
        }
      ],
      "name": "registerSecretBatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x85aaa13cac91276d2a7d7341b93690d87aab7739a6d235626345b544058be96c",
  "receipt": {
    "to": null,
    "from": "0xFb8C3ba8A46014400487f2fB4d539A5Ff7bC367D",
    "contractAddress": "0x3DF0C6eBb360E6485FcFfFa99Deab39Ed789Baf5",
    "transactionIndex": 0,
    "gasUsed": "1074150",
    "logsBloom": "0x
    "blockHash": "0xfddb2b1e90502dc20040ddf448c7ba6e3fca71900b6c8621d08548126f3a7aee",
    "transactionHash": "0x85aaa13cac91276d2a7d7341b93690d87aab7739a6d235626345b544058be96c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 115430,
        "transactionHash": "0x85aaa13cac91276d2a7d7341b93690d87aab7739a6d235626345b544058be96c",
        "address": "0x4200000000000000000000000000000000000006",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x000000000000000000000000fb8c3ba8a46014400487f2fb4d539a5ff7bc367d",
          "0x0000000000000000000000004200000000000000000000000000000000000005"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0xfddb2b1e90502dc20040ddf448c7ba6e3fca71900b6c8621d08548126f3a7aee"
      }
    ],
    "blockNumber": 115430,
    "cumulativeGasUsed": "1074150",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d801cd5192b29c16d8f34c547e4f6dd2",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.aff196a1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"secrethash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"SecretRevealed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secrethash\",\"type\":\"bytes32\"}],\"name\":\"getSecretRevealBlockHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"registerSecret\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"secrets\",\"type\":\"bytes32[]\"}],\"name\":\"registerSecretBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getSecretRevealBlockHeight(bytes32)\":{\"params\":{\"secrethash\":\"The hash of the registered secret `keccak256(secret)`\"},\"returns\":{\"_0\":\"The block number at which the secret was revealed\"}},\"registerSecret(bytes32)\":{\"params\":{\"secret\":\"The secret used to lock the hash time lock\"},\"returns\":{\"_0\":\"true if secret was registered, false if the secret was already registered\"}},\"registerSecretBatch(bytes32[])\":{\"params\":{\"secrets\":\"The array of secrets to be registered\"},\"returns\":{\"_0\":\"true if all secrets could be registered, false otherwise\"}}},\"title\":\"SecretRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getSecretRevealBlockHeight(bytes32)\":{\"notice\":\"Get the stored block number at which the secret was revealed\"},\"registerSecret(bytes32)\":{\"notice\":\"Registers a hash time lock secret and saves the block number. This allows the lock to be unlocked after the expiration block\"},\"registerSecretBatch(bytes32[])\":{\"notice\":\"Registers multiple hash time lock secrets and saves the block number\"}},\"notice\":\"SecretRegistry contract for registering secrets from Raiden Network clients.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"data/source/raiden/SecretRegistry.sol\":\"SecretRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"data/source/raiden/SecretRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @title SecretRegistry\\n/// @notice SecretRegistry contract for registering secrets from Raiden Network\\n/// clients.\\ncontract SecretRegistry {\\n    // sha256(secret) => block number at which the secret was revealed\\n    mapping(bytes32 => uint256) private secrethash_to_block;\\n\\n    event SecretRevealed(bytes32 indexed secrethash, bytes32 secret);\\n\\n    /// @notice Registers a hash time lock secret and saves the block number.\\n    /// This allows the lock to be unlocked after the expiration block\\n    /// @param secret The secret used to lock the hash time lock\\n    /// @return true if secret was registered, false if the secret was already\\n    /// registered\\n    function registerSecret(bytes32 secret) public returns (bool) {\\n        bytes32 secrethash = sha256(abi.encodePacked(secret));\\n        if (secrethash_to_block[secrethash] > 0) {\\n            return false;\\n        }\\n        secrethash_to_block[secrethash] = block.number;\\n        emit SecretRevealed(secrethash, secret);\\n        return true;\\n    }\\n\\n    /// @notice Registers multiple hash time lock secrets and saves the block\\n    /// number\\n    /// @param secrets The array of secrets to be registered\\n    /// @return true if all secrets could be registered, false otherwise\\n    function registerSecretBatch(bytes32[] memory secrets) public returns (bool) {\\n        bool completeSuccess = true;\\n        for(uint i = 0; i < secrets.length; i++) {\\n            if(!registerSecret(secrets[i])) {\\n                completeSuccess = false;\\n            }\\n        }\\n        return completeSuccess;\\n    }\\n\\n    /// @notice Get the stored block number at which the secret was revealed\\n    /// @param secrethash The hash of the registered secret `keccak256(secret)`\\n    /// @return The block number at which the secret was revealed\\n    function getSecretRevealBlockHeight(bytes32 secrethash) public view returns (uint256) {\\n        return secrethash_to_block[secrethash];\\n    }\\n}\\n\\n// MIT License\\n\\n// Copyright (c) 2018\\n\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\",\"keccak256\":\"0x828dbf9a344f66cb982df97f677d10942d1b163287b890860be40230b236642e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156100195760008061001661001f565b50505b5061008a565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561005757808601518282016040015260200161003c565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b610599806100996000396000f3fe60806040523480156100195760008061001661034f565b50505b506004361061004a5760003560e01c806312ad8bfc14610058578063bbe8a9b614610092578063c1f6294614610157575b60008061005561034f565b50505b61007e600480360360208110156100775760008061007461034f565b50505b503561018f565b604051901515815260200160405180910390f35b61007e600480360360208110156100b1576000806100ae61034f565b50505b810190602081018135600160201b8111156100d4576000806100d161034f565b50505b8201836020820111156100ef576000806100ec61034f565b50505b803590602001918460208302840111600160201b831117156101195760008061011661034f565b50505b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506102f0945050505050565b61017d600480360360208110156101765760008061017361034f565b50505b5035610333565b60405190815260200160405180910390f35b600080600283604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106101e35780518252601f1990920191602091820191016101c4565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855a61021b6103ba565b505050505015801561023a573d6000803e3d600061023761034f565b50505b5050506040513d60208110156102585760008061025561034f565b50505b810190808051600081815260208190529094509250604091508290502061027d6104a5565b111561028d5760009150506102eb565b5a610296610505565b600082815260208190526040902081906102ae61054b565b505050807fc8ee7ba45d0c5351df845eda156d523bd6865844a5f2c69df35b757e2f794fa18460405190815260200160405180910390a260019150505b919050565b60006001815b835181101561032c5761031b84828151811061030e57fe5b602002602001015161018f565b61032457600091505b6001016102f6565b5092915050565b60008181526020819052604081206103496104a5565b92915050565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561038757808601518282016040015260200161036c565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b638540661f598160e01b81526103eb565b8080831115610349575090919050565b8080831015610349575090919050565b836004820152846024820152606060448201528660648201526084810160005b8881101561042357808801518282015260200161040b565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af150596104788d3d6103db565b8c0161048481876103cb565b5b828110156104995760008152602001610485565b50929c50505050505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015610500576000828201526020016104e9565b505050565b635a98c361598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b805160008252935060206104e9565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b6000815260206104e956",
  "deployedBytecode": "0x60806040523480156100195760008061001661034f565b50505b506004361061004a5760003560e01c806312ad8bfc14610058578063bbe8a9b614610092578063c1f6294614610157575b60008061005561034f565b50505b61007e600480360360208110156100775760008061007461034f565b50505b503561018f565b604051901515815260200160405180910390f35b61007e600480360360208110156100b1576000806100ae61034f565b50505b810190602081018135600160201b8111156100d4576000806100d161034f565b50505b8201836020820111156100ef576000806100ec61034f565b50505b803590602001918460208302840111600160201b831117156101195760008061011661034f565b50505b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506102f0945050505050565b61017d600480360360208110156101765760008061017361034f565b50505b5035610333565b60405190815260200160405180910390f35b600080600283604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106101e35780518252601f1990920191602091820191016101c4565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855a61021b6103ba565b505050505015801561023a573d6000803e3d600061023761034f565b50505b5050506040513d60208110156102585760008061025561034f565b50505b810190808051600081815260208190529094509250604091508290502061027d6104a5565b111561028d5760009150506102eb565b5a610296610505565b600082815260208190526040902081906102ae61054b565b505050807fc8ee7ba45d0c5351df845eda156d523bd6865844a5f2c69df35b757e2f794fa18460405190815260200160405180910390a260019150505b919050565b60006001815b835181101561032c5761031b84828151811061030e57fe5b602002602001015161018f565b61032457600091505b6001016102f6565b5092915050565b60008181526020819052604081206103496104a5565b92915050565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561038757808601518282016040015260200161036c565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b638540661f598160e01b81526103eb565b8080831115610349575090919050565b8080831015610349575090919050565b836004820152846024820152606060448201528660648201526084810160005b8881101561042357808801518282015260200161040b565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af150596104788d3d6103db565b8c0161048481876103cb565b5b828110156104995760008152602001610485565b50929c50505050505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015610500576000828201526020016104e9565b505050565b635a98c361598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b805160008252935060206104e9565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b6000815260206104e956",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getSecretRevealBlockHeight(bytes32)": {
        "params": {
          "secrethash": "The hash of the registered secret `keccak256(secret)`"
        },
        "returns": {
          "_0": "The block number at which the secret was revealed"
        }
      },
      "registerSecret(bytes32)": {
        "params": {
          "secret": "The secret used to lock the hash time lock"
        },
        "returns": {
          "_0": "true if secret was registered, false if the secret was already registered"
        }
      },
      "registerSecretBatch(bytes32[])": {
        "params": {
          "secrets": "The array of secrets to be registered"
        },
        "returns": {
          "_0": "true if all secrets could be registered, false otherwise"
        }
      }
    },
    "title": "SecretRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getSecretRevealBlockHeight(bytes32)": {
        "notice": "Get the stored block number at which the secret was revealed"
      },
      "registerSecret(bytes32)": {
        "notice": "Registers a hash time lock secret and saves the block number. This allows the lock to be unlocked after the expiration block"
      },
      "registerSecretBatch(bytes32[])": {
        "notice": "Registers multiple hash time lock secrets and saves the block number"
      }
    },
    "notice": "SecretRegistry contract for registering secrets from Raiden Network clients.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 442,
        "contract": "data/source/raiden/SecretRegistry.sol:SecretRegistry",
        "label": "secrethash_to_block",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}